bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
2	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
3	[BUG]  [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)	109	None	replace
4	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
5	[BUG]  [BUGGY]  accum2  *=  sumWts[i];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  sumWts[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  sumWts[i];	  accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
6	[BUG]  [BUGGY]  double  accum2  =  values[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  *  dev;	  double    accum2    =    values[i]    *    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
7	[BUG]  [BUGGY]  double  accum2  =  weights[i]  *  mean;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i]  *  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  *  mean;	  double    accum2    =    values[i]    *    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
8	[BUG]  [BUGGY]  double  accum2  =  values[i]  *  mean  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  *  mean  +  1;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  *  mean  +  1;	  double    accum2    =    values[i]    *    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  &&  incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	49	1	replace
10	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment  &&  isBiasCorrected)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	49	1	replace
11	[BUG]  [BUGGY]  if(!incMoment)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  return  null;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  return  null;  }	  if(isBiasCorrected)    {    if(!incMoment)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
12	[BUG]  [BUGGY]  if(incMoment)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  return  null;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  return  null;  }	  if(isBiasCorrected)    {    if(!incMoment)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
13	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(!incMoment)  {  return  null;  }  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(!incMoment)  {  return  null;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  isBiasCorrected)  {  if(!incMoment)  {  return  null;  }	  if(isBiasCorrected)    {    if(!incMoment)    {    return    null;    }    	non-compiled	[CE]  incompatible  types	139	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
15	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
17	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
19	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  sumWts  /  1.0;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  1.0  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  1.0  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
21	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  1.0  /  1.0;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  1.0  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  1.0  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	142	1	replace
22	[BUG]  [BUGGY]  if(incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(!incMoment)    {    if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
23	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(!incMoment)    {    if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
24	[BUG]  [BUGGY]  double  accum2  =  weights[i]  -  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i]  -  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  -  dev;	  int    accum2    =    weights[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
25	[BUG]  [BUGGY]  int  accum2  =  weights[i]  /  dev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  weights[i]  /  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  /  dev;	  int    accum2    =    weights[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
26	[BUG]  [BUGGY]  float  accum2  =  weights[i]  -  dev;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  float  accum2  =  weights[i]  -  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	float  accum2  =  weights[i]  -  dev;	  int    accum2    =    weights[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
27	[BUG]  [BUGGY]  var  =  accum  /  2.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  accum  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  accum  /  2.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum2  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum2  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
29	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum2  /  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum2  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum2  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
30	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	3	replace
32	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	3	replace
33	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	97	None	replace
34	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	97	None	replace
35	[BUG]  [BUGGY]  else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	97	None	replace
36	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    *    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
37	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    *    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
38	[BUG]  [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
40	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dev;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
41	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  weights[i]  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  weights[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  weights[i]  :  null;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
42	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  incMoment)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)  {  incMoment)  {	  if(!incMoment)    {    incMoment)    {    	non-compiled	[CE]  not  a  statement	43	None	replace
43	[BUG]  [BUGGY]  if(isBiasCorrected)  {  incMoment)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  incMoment)  {	  if(!incMoment)    {    incMoment)    {    	non-compiled	[CE]  not  a  statement	43	None	replace
44	[BUG]  [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  ';'  expected	90	None	replace
45	[BUG]  [BUGGY]  double  accum2  *=  weights[i];  accum2  *=  weights[i];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  *=  weights[i];  accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  *=  weights[i];  accum2  *=  weights[i];	  incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  ';'  expected	61	None	replace
46	[BUG]  [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
47	[BUG]  [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
48	[BUG]  [BUGGY]  else  if(i  ==  incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(i  ==  incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(i  ==  incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
49	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    accum2    *=    weights[i]    *    (dev    *    dev);    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
50	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
51	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  If(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  If(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    If(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  ';'  expected	36	None	add
52	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
53	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  not  a  statement	36	None	add
54	[BUG]  [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  if(isBiasCorrected  ||!incMoment)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  if(isBiasCorrected  ||!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||!incMoment)    {    if(isBiasCorrected  ||!incMoment)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
55	[BUG]  [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  If(isBiasCorrected  ||!incMoment)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  If(isBiasCorrected  ||!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||!incMoment)    {    If(isBiasCorrected  ||!incMoment)  {	  	non-compiled	[CE]  ';'  expected	78	None	add
56	[BUG]  [BUGGY]  double  accum2  =  weights[i]  /  dev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i]  /  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  /  dev;	  double    accum2    =    weights[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
57	[BUG]  [BUGGY]  double  accum2  =  mean[i]  /  weights;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  mean[i]  /  weights;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  mean[i]  /  weights;	  double    accum2    =    weights[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
58	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	  if(incMoment)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    totalWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
60	[BUG]  [BUGGY]  if(isBiasCorrected  &&  dev)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  dev)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  dev)  {	  if(isBiasCorrected    &&    incMoment)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	45	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  &&  isBiasCorrected)  {	  if(isBiasCorrected    &&    incMoment)    {    	compilable	  [FE]  AssertionError  	45	1	replace
62	[BUG]  [BUGGY]  if(isBiasCorrected  &&  isBiasCorrected)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  isBiasCorrected)  {	  if(isBiasCorrected    &&    incMoment)    {    	compilable	  [FE]  AssertionError  	45	1	replace
63	[BUG]  [BUGGY]  accum2  +=  values[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  +=  values[i]  *  (dev  *  dev);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  values[i]  *  (dev  *  dev);	  accum2    +=    values[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
64	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	  if(isBiasCorrected)    {    var    =    1.0    /    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
65	[BUG]  [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;	  if(isBiasCorrected)    {    var    =    1.0    /    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
66	[BUG]  [BUGGY]  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;	  if(isBiasCorrected)    {    var    =    1.0    /    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
67	[BUG]  [BUGGY]  accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;	  if(isBiasCorrected)    {    accum2    *=    weights[0];    accum2    *=    weights[0]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
68	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }	  if(isBiasCorrected)    {    accum2    *=    weights[0];    accum2    *=    weights[0]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
69	[BUG]  [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[1]  *  dev;  }	  if(isBiasCorrected)    {    accum2    *=    weights[0];    accum2    *=    weights[0]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
70	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  poids[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  poids[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  poids[i]  *  dev;  }	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0);    }    	compilable	  [FE]  AssertionError  	116	1	replace
72	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0);    }    	compilable	  [FE]  AssertionError  	116	1	replace
73	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
74	[BUG]  [BUGGY]  if(dev  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(dev  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	3	replace
76	[BUG]  [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	3	replace
77	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalArgumentException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
78	[BUG]  [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
79	[BUG]  [BUGGY]  Context.checkState(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Context.checkState(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Context.checkState(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	138	None	replace
80	[BUG]  [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(meta));  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(meta));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(meta));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
81	[BUG]  [BUGGY]  if(incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(!isBiasCorrected)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  continue  outside  of  loop	105	None	replace
82	[BUG]  [BUGGY]  if(!incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(!isBiasCorrected)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  continue  outside  of  loop	105	None	replace
83	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  continue  outside  of  loop	105	None	replace
84	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected  ||  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    if(isBiasCorrected  ||  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
85	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  If(isBiasCorrected  ||  isBiasCorrected)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  If(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    If(isBiasCorrected  ||  isBiasCorrected)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
86	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected  ||  areBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected  ||  areBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    if(isBiasCorrected  ||  areBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
87	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
88	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
89	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)	89	None	replace
90	[BUG]  [BUGGY]  double  accum2  =  weights[i]  -  begin;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i]  -  begin;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  -  begin;	  int    accum2    =    weights[i]    -    begin;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
91	[BUG]  [BUGGY]  int  accum2  =  weights[i]  /  begin;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  weights[i]  /  begin;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  /  begin;	  int    accum2    =    weights[i]    -    begin;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
92	[BUG]  [BUGGY]  int  accum2  =  weights[i]  /  mean;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  weights[i]  /  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  /  mean;	  int    accum2    =    weights[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
93	[BUG]  [BUGGY]  accum1  *=  weights[i];  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  weights[i];  accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i];  accum2  *=  weights[i]  *  dev;	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
94	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev;  }	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
95	[BUG]  [BUGGY]  this.accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  this.accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	this.accum2  *=  weights[i]  *  dev;	  accum2    *=    weights[i]    *    dev;    this.accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
96	[BUG]  [BUGGY]  Accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Accum2  *=  weights[i]  *  dev;	  accum2    *=    weights[i]    *    dev;    this.accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
97	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  If(!incMoment)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  If(!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)  {  If(!incMoment)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
98	[BUG]  [BUGGY]  if(isBiasCorrected)  {  If(!incMoment)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  If(!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  If(!incMoment)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
99	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  If(!isBiasCorrected)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  If(!isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)  {  If(!isBiasCorrected)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
100	[BUG]  [BUGGY]  if(isBiasCorrected)  {  If(!isBiasCorrected)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  If(!isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  If(!isBiasCorrected)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
101	[BUG]  [BUGGY]  double  accum2  =  values[i]  /  dev;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  /  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  /  dev;	  double    accum2    =    values[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
102	[BUG]  [BUGGY]  accum1  *=  weights[i];  accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  weights[i];  accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i];  accum2  *=  weights[i];	  accum2    *=    weights[i];    accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
103	[BUG]  [BUGGY]  accum2  *=  weights[i]  ||  accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  ||  accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  ||  accum2  *=  weights[i];	  accum2    *=    weights[i];    accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
104	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
105	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	137	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  &&!incMoment)  {	  if(isBiasCorrected    ||!incMoment)    {    	compilable	  [FE]  AssertionError  	79	3	replace
107	[BUG]  [BUGGY]  if(isBiasCorrected  &&!incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&!incMoment)  {	  if(isBiasCorrected    ||!incMoment)    {    	compilable	  [FE]  AssertionError  	79	3	replace
108	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
109	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  DEV;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  *  DEV;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  DEV;	  accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    DEV;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
110	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
111	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    If(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
112	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
113	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  not  a  statement	7	None	add
114	[BUG]  [BUGGY]  if(dev  ||  isBiasCorrected)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  ||  isBiasCorrected)  {	  if(incMoment    ||    isBiasCorrected)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	47	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	23	1	add
116	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	23	1	add
117	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
118	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
119	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	23	None	add
120	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts	  	non-compiled	[CE]  ')'  expected	23	None	add
121	[BUG]  [BUGGY]  vices.add(accum  -  (accum2  *  accum2  /  sumWts));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  vices.add(accum  -  (accum2  *  accum2  /  sumWts));  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	vices.add(accum  -  (accum2  *  accum2  /  sumWts));	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
122	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
123	[BUG]  [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	echtsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    accum    -=    1.0;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
124	[BUG]  [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	dsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    accum    -=    1.0;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
125	[BUG]  [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	moresuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    accum    -=    1.0;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
126	[BUG]  [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  incompatible  types	80	None	replace
127	[BUG]  [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  incompatible  types	80	None	replace
128	[BUG]  [BUGGY]  this.accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  this.accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	this.accum2  *=  weights[i];	  accum2    *=    weights[i];    this.accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
129	[BUG]  [BUGGY]  double  accum2  =  weights[i];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i];	  accum2    *=    weights[i];    this.accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
130	[BUG]  [BUGGY]  accum2  +=  weights[i]  *  (dev  *  sumWts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  +=  weights[i]  *  (dev  *  sumWts);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  weights[i]  *  (dev  *  sumWts);	  accum2    +=    weights[i]    *    (dev    *    dev);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
131	[BUG]  [BUGGY]  accum2  +=  weights[i]  *  (dev  /  dev);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  +=  weights[i]  *  (dev  /  dev);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  weights[i]  *  (dev  /  dev);	  accum2    +=    weights[i]    *    (dev    *    dev);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  ||  isBiasCorrected  ||  incMoment)  {	  if(isBiasCorrected    ||    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	29	1	replace
133	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  ||  incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  isBiasCorrected  ||  incMoment)  {	  if(isBiasCorrected    ||    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	29	1	replace
134	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
135	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
136	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
137	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
138	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
141	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	140	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	37	3	replace
143	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	37	3	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {	  if(incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	31	1	replace
145	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {	  if(incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	31	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	3	replace
147	[BUG]  [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	3	replace
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(dev  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	3	replace
149	[BUG]  [BUGGY]  if(dev  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	3	replace
150	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
151	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  dev;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
152	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(mean);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(mean);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(mean);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
153	[BUG]  [BUGGY]  double  accum2  =  mean[i]  -  weights[i];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  mean[i]  -  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  mean[i]  -  weights[i];	  double    accum2    =    weights[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
154	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  if(!isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  if(!isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    if(!isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
155	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	compilable	  [FE]  AssertionError  	12	3	replace
157	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	compilable	  [FE]  AssertionError  	12	3	replace
158	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
159	[BUG]  [BUGGY]  while(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  while(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	while(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
160	[BUG]  [BUGGY]  int  accum2  =  values[i]  /  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  values[i]  /  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  /  dev;	  int    accum2    =    values[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
161	[BUG]  [BUGGY]  int  accum2  =  mean[i]  /  values;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  mean[i]  /  values;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  mean[i]  /  values;	  int    accum2    =    values[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
162	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
164	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  ';'  expected	34	None	add
165	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
166	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  not  a  statement	34	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(dev  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	84	3	replace
168	[BUG]  [BUGGY]  if(dev  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	84	3	replace
169	[BUG]  [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
170	[BUG]  [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
171	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2  /	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
172	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
173	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {  var  =  accum  -(accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -(accum2  *  accum2	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
174	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
175	[BUG]  [BUGGY]  double  accum2  =  values[i]  -  begin;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  -  begin;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  -  begin;	  int    accum2    =    values[i]    -    begin;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
176	[BUG]  [BUGGY]  int  accum2  =  values[i]  /  begin;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  values[i]  /  begin;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  /  begin;	  int    accum2    =    values[i]    -    begin;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
177	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
178	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length  +  1);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length  +  1);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
179	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  start,  length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  start,  length);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected.evaluate(values,  start,  length);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
180	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length,  sumWts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length,  sumWts);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length,  sumWts);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
181	[BUG]  [BUGGY]  if(isBiasCorrected  &&  sumWts)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  sumWts)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  sumWts)  {	  if(incMoment    &&    sumWts)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	136	None	replace
182	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment  &&  sumWts)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment  &&  sumWts)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  incMoment  &&  sumWts)  {	  if(incMoment    &&    sumWts)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	136	None	replace
183	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
184	[BUG]  [BUGGY]  if(isBiasCorrected)  {  If(isBiasCorrected)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  If(isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  If(isBiasCorrected)  {	  if(incMoment)    {    If(incMoment)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
185	[BUG]  [BUGGY]  if(isBiasCorrected)  {  If(incMoment)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  If(incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  If(incMoment)  {	  if(incMoment)    {    If(incMoment)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
186	[BUG]  [BUGGY]  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected)  {	  if(incMoment)    {    If(incMoment)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
187	[BUG]  [BUGGY]  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected  ||  isBiasCorrected	  if(incMoment)    {    If(incMoment)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
188	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
189	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
190	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
191	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
192	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /(sumWts  -  1.0);	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/(sumWts    -    1.0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
195	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	3	replace
197	[BUG]  [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	3	replace
198	[BUG]  [BUGGY]  var  =  accum  -  accum2  *  accum2  /  sumWts;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  accum  -  accum2  *  accum2  /  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  accum  -  accum2  *  accum2  /  sumWts;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
199	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  if(incMoment  ||  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  if(incMoment  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    ||    isBiasCorrected)    {    if(incMoment  ||  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
200	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  If(incMoment  ||  isBiasCorrected)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  If(incMoment  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    ||    isBiasCorrected)    {    If(incMoment  ||  isBiasCorrected)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
201	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
202	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  ';'  expected	92	None	add
203	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  not  a  statement	92	None	add
204	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  not  a  statement	92	None	add
205	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  if(isBiasCorrected  &&  incMoment)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  if(isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    &&    incMoment)    {    if(isBiasCorrected  &&  incMoment)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
206	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  If(isBiasCorrected  &&  incMoment)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  If(isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    &&    incMoment)    {    If(isBiasCorrected  &&  incMoment)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
207	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  AssertionError  accum2  =  incMoment;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  AssertionError  accum2  =  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    &&    incMoment)    {    AssertionError  accum2  =  incMoment;	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
208	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  &&  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  &&  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  &&  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
209	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  ||  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  ||  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  ||  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
210	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  ||  dev;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  ||  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  ||  dev;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
211	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
212	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
213	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  ';'  expected	32	None	add
214	[BUG]  [BUGGY]  if(!isBiasCorrected  &&  isMoment)  {  [CE]  cannot  find  symbol  isMoment  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected  &&  isMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected  &&  isMoment)  {	  if(!isBiasCorrected)    {    	non-compiled	[CE]  cannot  find  symbol  isMoment	77	None	replace
215	[BUG]  [BUGGY]  while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
216	[BUG]  [BUGGY]  while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	while(accum2  <  weights.length)  {  accum2  *=  weights[i];  accum2  *=  weights[i];	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
217	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  var  =  accum  /  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    if(incMoment)  {  var  =  accum  /  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
218	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
219	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
220	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  accum  =  accum  /  1.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  accum  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    if(incMoment)  {  accum  =  accum  /  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
221	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalStateException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
222	[BUG]  [BUGGY]  Context.checkState(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Context.checkState(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Context.checkState(!incMoment)  {  throw  new  IllegalStateException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	141	None	replace
223	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ".equals(meta));  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ".equals(meta));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalStateException( " ".equals(meta));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
224	[BUG]  [BUGGY]  Context.checkState(isBiasCorrected);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Context.checkState(isBiasCorrected);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Context.checkState(isBiasCorrected);	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
225	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
226	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }  else  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }  else  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }  else  {  var  =  accum  -  accum2  *  sumWts  /  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
227	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  -  1.0  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  -  1.0  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  -  1.0	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
228	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
229	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
230	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
231	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
232	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    If(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
233	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  not  a  statement	63	None	add
234	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    while(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
235	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  ||  incMoment;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  ||  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  ||  incMoment;	  if(isBiasCorrected    ||    incMoment)    {    incMoment    =    isBiasCorrected    ||    incMoment;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
236	[BUG]  [BUGGY]  IncMoment  incMoment  =  isBiasCorrected  ||  incMoment;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  IncMoment  incMoment  =  isBiasCorrected  ||  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	IncMoment  incMoment  =  isBiasCorrected  ||  incMoment;	  if(isBiasCorrected    ||    incMoment)    {    incMoment    =    isBiasCorrected    ||    incMoment;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
237	[BUG]  [BUGGY]  Integer  incMoment  =  isBiasCorrected  ||  incMoment;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Integer  incMoment  =  isBiasCorrected  ||  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Integer  incMoment  =  isBiasCorrected  ||  incMoment;	  if(isBiasCorrected    ||    incMoment)    {    incMoment    =    isBiasCorrected    ||    incMoment;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
238	[BUG]  [BUGGY]  accum2  *=  values[i];  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  values[i];  incMoment  =  isBiasCorrected;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  values[i];  incMoment  =  isBiasCorrected;	  accum2    *=    weights[i];    incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
239	[BUG]  [BUGGY]  accum2  *=  weights[i];  incMoment  =  isBiasCorrected  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i];  incMoment  =  isBiasCorrected  +  1;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  incMoment  =  isBiasCorrected  +  1;	  accum2    *=    weights[i];    incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
240	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
241	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  dev;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
242	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  incMoment;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  incMoment;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
243	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  means;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  means;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  means;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
244	[BUG]  [BUGGY]  accum  -=  accum2  *  sumWts  /  accum2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum2  *  sumWts  /  accum2;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  sumWts  /  accum2;	  accum    -=    accum2    *    accum2    /    sumWts;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
245	[BUG]  [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts  +  1;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  accum2  /  sumWts  +  1;	  accum    -=    accum2    *    accum2    /    sumWts;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
246	[BUG]  [BUGGY]  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(isBiasCorrected)    {    var    =    1.0    /    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
247	[BUG]  [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected  ||!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!isBiasCorrected  ||!incMoment)  {	  if(!incMoment)    {    if(!incMoment)    {    	compilable	  [FE]  AssertionError  	41	3	replace
249	[BUG]  [BUGGY]  if(!isBiasCorrected  ||!incMoment)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected  ||!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected  ||!incMoment)  {	  if(!incMoment)    {    if(!incMoment)    {    	compilable	  [FE]  AssertionError  	41	3	replace
250	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  if(incMoment  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  if(incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    &&    isBiasCorrected)    {    if(incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
251	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  If(incMoment  &&  isBiasCorrected)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  If(incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    &&    isBiasCorrected)    {    If(incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  ';'  expected	30	None	add
252	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  dev  >  values[i])  {  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  dev  >  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  &&  dev  >  values[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  cannot  find  symbol  i	130	None	replace
253	[BUG]  [BUGGY]  if(isBiasCorrected  ||  dev  ||  incMoment  >  values[i])  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  dev  ||  incMoment  >  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  dev  ||  incMoment  >  values[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	130	None	replace
254	[BUG]  [BUGGY]  if(isBiasCorrected  ||  moment  ||  dev  >  values[i])  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  moment  ||  dev  >  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  moment  ||  dev  >  values[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	130	None	replace
255	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected  ||  dev  >  values[i])  {  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected  ||  dev  >  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  ||  isBiasCorrected  ||  dev  >  values[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  cannot  find  symbol  i	130	None	replace
256	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
257	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    If(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  ';'  expected	85	None	add
258	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
259	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  if(!incMoment  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  if(!incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment    &&    isBiasCorrected)    {    if(!incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
260	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  If(!incMoment  &&  isBiasCorrected)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  If(!incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment    &&    isBiasCorrected)    {    If(!incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
261	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
262	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  If(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  If(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    If(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
263	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  isIncMoment  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  isIncMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    if(isBiasCorrected  ||  isIncMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
264	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  10.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  10.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  10.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    10.0;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
265	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
266	[BUG]  [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	  if(incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
267	[BUG]  [BUGGY]  AssertionError  accum2  =  dev  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  dev  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  dev  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
268	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  *  dev  +  1;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev  +  1;	  accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
269	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
270	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
271	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
272	[BUG]  [BUGGY]  If(isBiasCorrected  ||  incMoment)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  If(isBiasCorrected  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	If(isBiasCorrected  ||  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
273	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  If(isBiasCorrected  ||  incMoment)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  If(isBiasCorrected  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  ||  isBiasCorrected)  {  If(isBiasCorrected  ||  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
274	[BUG]  [BUGGY]  If(isBiasCorrected  &&  incMoment)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  If(isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	If(isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
275	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
276	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  dev;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
277	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  means;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  means;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  means;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
278	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  /  mean;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  /  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  /  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
279	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
280	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
281	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  0.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  0.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
282	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isIncMoment)  {  var  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  if(incMoment)  {  if(isIncMoment)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    if(incMoment)  {  if(isIncMoment)  {  var  =  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	24	1	replace
284	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	24	1	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	24	1	replace
286	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	24	1	replace
287	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
288	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  timeout  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
289	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /	  timeout    	non-compiled	[CE]  illegal  start  of  expression	101	None	add
290	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts	  timeout    	non-compiled	[CE]  ')'  expected	101	None	add
291	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
292	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  timeout  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
293	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =	  timeout    	non-compiled	[CE]  illegal  start  of  expression	101	None	add
294	[BUG]  [BUGGY]  Integer  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Integer  incMoment  =  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Integer  incMoment  =  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
296	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  ||  isBiasCorrected)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	1	replace
298	[BUG]  [BUGGY]  if(!incMoment  ||  isBiasCorrected)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  ||  isBiasCorrected)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	1	replace
299	[BUG]  [BUGGY]  double  accum2  =  mean[i]  /  values;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  mean[i]  /  values;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  mean[i]  /  values;	  double    accum2    =    values[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
300	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	  if(!incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
301	[BUG]  [BUGGY]  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(!incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
302	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
303	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
304	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    while(sumWts  >  1)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	3	replace
306	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	3	replace
307	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
308	[BUG]  [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	non-compiled	[CE]  incompatible  types	4	None	replace
309	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  1  :  0;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  1  :  0;	  incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
310	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
311	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    If(incMoment)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  ';'  expected	122	None	add
312	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  dev;	  incMoment    =    isBiasCorrected?    isBiasCorrected    :    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
313	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  sumWts;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  sumWts;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  sumWts;	  incMoment    =    isBiasCorrected?    isBiasCorrected    :    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
314	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  mean;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  mean;	  incMoment    =    isBiasCorrected?    isBiasCorrected    :    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
315	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
316	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
317	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
318	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
320	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
321	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
322	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
324	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
326	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	compilable	  [FE]  AssertionError  	102	1	replace
327	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
328	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
329	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    mean;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
330	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  moment;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  moment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  moment;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    mean;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
331	[BUG]  [BUGGY]  if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
332	[BUG]  [BUGGY]  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }	  if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	compilable	  [FE]  AssertionError  	15	3	replace
334	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	compilable	  [FE]  AssertionError  	15	3	replace
335	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	1	replace
337	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	1	replace
338	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	1	replace
339	[BUG]  [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	64	1	replace
340	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
341	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
342	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  Accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  Accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  Accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
343	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	37	1	replace
344	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	37	1	replace
345	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  incMoment)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  incMoment)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    incMoment)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  not  a  statement	140	None	add
346	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " "));  }	  	non-compiled	[CE]  	140	None	add
347	[BUG]  [BUGGY]  accum1  *=  weights[i];  this.accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  weights[i];  this.accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i];  this.accum2  *=  weights[i];	  accum2    *=    weights[i];    this.accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
348	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
349	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
350	[BUG]  [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||!incMoment)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
351	[BUG]  [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  AssertionError  accum  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  AssertionError  accum  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||!incMoment)    {    AssertionError  accum  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
352	[BUG]  [BUGGY]  }  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  }  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	}  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
353	[BUG]  [BUGGY]  }  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  }  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	}  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
354	[BUG]  [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	nsuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    accum    -=    1.0;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {	  if(!incMoment)    {    if(!incMoment)    {    	compilable	  [FE]  AssertionError  	41	1	replace
356	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {	  if(!incMoment)    {    if(!incMoment)    {    	compilable	  [FE]  AssertionError  	41	1	replace
357	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
358	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
359	[BUG]  [BUGGY]  accum2  *=  values[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  values[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  values[i];	  accum2    *=    weights[i];    accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
360	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
361	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  variable  accum  is  already  defined  in  method  evaluate(double[],double[],double,int,int)	91	None	replace
362	[BUG]  [BUGGY]  if(dev!=  null)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(dev!=  null)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(dev!=  null)  {  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(!incMoment)    {    if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
363	[BUG]  [BUGGY]  double  accum2  =  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  *  dev;	  double    accum2    =    values[i]    *    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
364	[BUG]  [BUGGY]  double  accum2  =  values[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  *  sumWts;	  double    accum2    =    values[i]    *    mean;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
365	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
366	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	12	None	replace
367	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
368	[BUG]  [BUGGY]  accum2  *=  weights[0]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[0]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[0]  *  dev;	  if(isBiasCorrected)    {    accum2    *=    weights[0];    accum2    *=    weights[0]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
369	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
370	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  accum2  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  accum2  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    AssertionError  accum  =  values[i]  -  mean;  accum  +=  accum2  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
371	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  accum2);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  accum2);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  accum2);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
372	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	35	1	replace
373	[BUG]  [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	35	1	replace
374	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
375	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
376	[BUG]  [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	3	replace
378	[BUG]  [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	3	replace
379	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
380	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment  =  isBiasCorrected?  accum  /  1.0  :  null;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment  =  isBiasCorrected?  accum  /  1.0  :  null;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    incMoment  =  isBiasCorrected?  accum  /  1.0  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
381	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment  =  isBiasCorrected?  accum  /  1.0  :  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment  =  isBiasCorrected?  accum  /  1.0  :  1;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    incMoment  =  isBiasCorrected?  accum  /  1.0  :  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
382	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
383	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
384	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
385	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    AssertionError  accum  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
386	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  dev  *  (dev  *  dev);  accum2  +=  dev  *  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  dev  *  (dev  *  dev);  accum2  +=  dev  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;  accum  +=  dev  *  (dev  *  dev);  accum2  +=  dev  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
387	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  +  1.0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  +  1.0;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  +  1.0;	  incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
388	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  values[i]  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  values[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  values[i]  :  null;	  incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
389	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
390	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
392	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
394	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
395	[BUG]  [BUGGY]  accum  -=  accum1  *  accum2  /  sumWts;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum1  *  accum2  /  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum1  *  accum2  /  sumWts;	  accum    -=    accum2    *    accum2    /    sumWts;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
396	[BUG]  [BUGGY]  accum  -=  accum2  *  accum1  /  sumWts;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum2  *  accum1  /  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  accum1  /  sumWts;	  accum    -=    accum2    *    accum2    /    sumWts;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
397	[BUG]  [BUGGY]  If(isBiasCorrected)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  If(isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	If(isBiasCorrected)  {	  if(incMoment)    {    If(incMoment)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
398	[BUG]  [BUGGY]  AssertionError  accum2  =  weights[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  weights[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  weights[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
399	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
400	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
401	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
402	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;  accum2  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
403	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  ||  sumWts;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  ||  sumWts;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  ||  sumWts;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
404	[BUG]  [BUGGY]  accum  =  isBiasCorrected  ||  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  isBiasCorrected  ||  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  isBiasCorrected  ||  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
405	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
406	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
407	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
408	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
409	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
410	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    &&    isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected  &&!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!isBiasCorrected  &&!incMoment)  {	  if(!isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	77	3	replace
412	[BUG]  [BUGGY]  if(!isBiasCorrected  &&!incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected  &&!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected  &&!incMoment)  {	  if(!isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	77	3	replace
413	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
414	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  if(isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    if(isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
415	[BUG]  [BUGGY]  if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
416	[BUG]  [BUGGY]  if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
417	[BUG]  [BUGGY]  int  accum2  =  weights[i]  *  mean;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  weights[i]  *  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  *  mean;	  int    accum2    =    weights[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
418	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  weights[i]  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  weights[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  weights[i]  :  null;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
419	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
420	[BUG]  [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
421	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalArgumentException( " ".equals(values[i]));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
422	[BUG]  [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
423	[BUG]  [BUGGY]  accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
424	[BUG]  [BUGGY]  accum2  *=  values[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  values[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  values[i]  *  dev;	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
425	[BUG]  [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
426	[BUG]  [BUGGY]  else  if(i  >  begin)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(i  >  begin)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(i  >  begin)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
427	[BUG]  [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  totalWts;  }  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  totalWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  totalWts;  }	  else    if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
428	[BUG]  [BUGGY]  if(!incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
429	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  incMoment  =  isBiasCorrected  &&  incMoment;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  incMoment  =  isBiasCorrected  &&  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    &&    incMoment)    {    incMoment  =  isBiasCorrected  &&  incMoment;	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
430	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    &&    incMoment)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
431	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
432	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	122	None	add
433	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accumWts))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
434	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
435	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
436	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  while(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  while(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    while(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
437	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
438	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	compilable	  [FE]  AssertionError  	86	1	replace
439	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	compilable	  [FE]  AssertionError  	86	1	replace
440	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
441	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
442	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	97	None	replace
443	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	80	None	replace
444	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	80	None	replace
445	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	80	1	replace
446	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	80	1	replace
447	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  [CE]  cannot  find  symbol  accum1  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	80	None	replace
448	[BUG]  [BUGGY]  if(i  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(i  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(i  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  cannot  find  symbol  i	84	None	replace
449	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [CE]  cannot  find  symbol  accum1  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }	  if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	84	None	replace
450	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
451	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
452	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
453	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
454	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  incMoment))  /  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  incMoment))  /  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  incMoment))  /  1.0;	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
455	[BUG]  [BUGGY]  AnnotatedMoment  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AnnotatedMoment  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AnnotatedMoment  accum  =  isBiasCorrected.evaluate(values,  begin,  length);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
456	[BUG]  [BUGGY]  accum1  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;	  accum1    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
457	[BUG]  [BUGGY]  accum1  *=  values[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  values[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  values[i]  *  dev;  accum2  *=  weights[i]  *  dev;	  accum1    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
458	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  values[i];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  values[i];  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  values[i];	  incMoment    =    isBiasCorrected?    isBiasCorrected    :    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
459	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  &&  incMoment;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  &&  incMoment;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  &&  incMoment;	  if(isBiasCorrected    ||    incMoment)    {    incMoment    =    isBiasCorrected    ||    incMoment;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
460	[BUG]  [BUGGY]  int  accum2  =  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  *  dev;	  int    accum2    =    weights[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
461	[BUG]  [BUGGY]  if(incMoment)  {  accum1  *=  weights[i];  accum2  *=  weights[i];  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum1  *=  weights[i];  accum2  *=  weights[i];  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum1  *=  weights[i];  accum2  *=  weights[i];  }	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
462	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
463	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
464	[BUG]  [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
465	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
466	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }  [CE]  cannot  find  symbol  poids  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  poids	15	None	replace
467	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
468	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
469	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
470	[BUG]  [BUGGY]  luate(secondMoment,  begin,  length))  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  luate(secondMoment,  begin,  length))  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	luate(secondMoment,  begin,  length))  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
471	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
472	[BUG]  [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >=  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
473	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  accum1	101	None	add
474	[BUG]  [BUGGY]  timeout  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
475	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  timeout  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  timeout    	compilable	timeout	101	1	add
476	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  10.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  10.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  10.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    10.0;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
477	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  10.0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  10.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  10.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    10.0;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
478	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  incMoment  &&  isBiasCorrected)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  incMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment    &&    isBiasCorrected)    {    incMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  not  a  statement	50	None	add
479	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment    &&    isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
480	[BUG]  [BUGGY]  accum2  *=  sumWts;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  sumWts;	  accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
481	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  amount;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  *  amount;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  amount;	  accum2    *=    weights[i];    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
482	[BUG]  [BUGGY]  var  =  (accum  -  (b  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (b  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (b  *  accum2  /  sumWts))  /(sumWts  -  1.0);	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/(sumWts    -    1.0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
483	[BUG]  [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /(sumWts  -  1.0);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (dev  *  accum2  /  sumWts))  /(sumWts  -  1.0);	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/(sumWts    -    1.0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
484	[BUG]  [BUGGY]  int  accum2  =  values[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  values[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  *  dev;	  int    accum2    =    values[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
485	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  incMoment)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  incMoment)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    incMoment)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  not  a  statement	137	None	add
486	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException(   "   ");  }  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
488	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
489	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	3	replace
490	[BUG]  [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  ==  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	3	replace
491	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
492	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
493	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
494	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
495	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  ')'  expected	36	None	add
496	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
497	[BUG]  [BUGGY]  accum  -=  accum2  *  sumWts;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum2  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  sumWts;	  if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
498	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
499	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
500	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  incMoment  =  isBiasCorrected?  accum  -  accum2  *  accum2  /  sumWts  :  1.0;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  incMoment  =  isBiasCorrected?  accum  -  accum2  *  accum2  /  sumWts  :  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    incMoment  =  isBiasCorrected?  accum  -  accum2  *  accum2  /  sumWts  :  1.0;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
501	[BUG]  [BUGGY]  if(incMoment)  {  incMoment  =  isBiasCorrected;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  incMoment  =  isBiasCorrected;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  incMoment  =  isBiasCorrected;  }	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
502	[BUG]  [BUGGY]  Context.checkNotNull(sumWts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  Context.checkNotNull(sumWts);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	Context.checkNotNull(sumWts);	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
503	[BUG]  [BUGGY]  MiscUtilities.checkState(sumWts  ==  1,  length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  MiscUtilities.checkState(sumWts  ==  1,  length);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	MiscUtilities.checkState(sumWts  ==  1,  length);	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
504	[BUG]  [BUGGY]  MiscUtilities.checkState(sumWts  ==  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  MiscUtilities.checkState(sumWts  ==  0);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	MiscUtilities.checkState(sumWts  ==  0);	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
505	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
506	[BUG]  [BUGGY]  var  =  (isBiasCorrected  -  (accum1  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (isBiasCorrected  -  (accum1  *  accum2  /  sumWts))/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (isBiasCorrected  -  (accum1  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
507	[BUG]  [BUGGY]  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  throw  new  IllegalStateException( " ");  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
508	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
509	[BUG]  [BUGGY]  if(!incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  throw  new  IllegalStateException( " ".equals(values[i]));  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
510	[BUG]  [BUGGY]  int  accum2  =  values[i]  *  mean;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  values[i]  *  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  *  mean;	  int    accum2    =    values[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
511	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(incMoment)  {  return  null;  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  if(incMoment)  {  return  null;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(incMoment)  {  return  null;  }	  if(isBiasCorrected)    {    if(!incMoment)    {    return    null;    }    	non-compiled	[CE]  incompatible  types	139	None	replace
512	[BUG]  [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  sumWts);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  sumWts);  accum2  +=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  sumWts);  accum2  +=  weights[i]  *  dev;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
513	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev  +  mean;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[i]  *  dev  +  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev  +  mean;	  accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
514	[BUG]  [BUGGY]  double  accum2  =  values[i]  /  sumWts;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  values[i]  /  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  /  sumWts;	  double    accum2    =    values[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
515	[BUG]  [BUGGY]  if(incMoment)  {  If(isBiasCorrected  ||  incMoment)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  If(isBiasCorrected  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  If(isBiasCorrected  ||  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
516	[BUG]  [BUGGY]  if(incMoment)  {  If(isBiasCorrected  ||  isBiasCorrected)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  If(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  If(isBiasCorrected  ||  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
517	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0);    }    	compilable	  [FE]  AssertionError  	116	1	replace
518	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0);    }    	compilable	  [FE]  AssertionError  	116	1	replace
519	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	94	None	replace
520	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	94	None	replace
521	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	94	None	replace
522	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	94	None	replace
523	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1.0)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
524	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1.0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected  &&  sumWts  >  1.0)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
525	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    ||    isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
526	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  incMoment  ||  isBiasCorrected)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  incMoment  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    ||    isBiasCorrected)    {    incMoment  ||  isBiasCorrected)  {	  	non-compiled	[CE]  not  a  statement	46	None	add
527	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	23	None	add
528	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	23	None	add
529	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0	  	non-compiled	[CE]  ';'  expected	23	None	add
530	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  moment;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    *    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
531	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    totalWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  ||  isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	49	1	replace
533	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  &&  incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	49	1	replace
534	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  intsumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  intsumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    intsumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  not  a  statement	83	None	add
535	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum1  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
536	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
537	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	85	None	add
538	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
539	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	32	None	add
540	[BUG]  [BUGGY]  asSertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  asSertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	asSertionError  accum2  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
541	[BUG]  [BUGGY]  AssertionError  accum2  =  values[i]  /  mean;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  values[i]  /  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  values[i]  /  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
542	[BUG]  [BUGGY]  assertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  assertionError  accum2  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	assertionError  accum2  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
543	[BUG]  [BUGGY]  accum2  +=  sumWts[i]  *  weights;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  +=  sumWts[i]  *  weights;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  sumWts[i]  *  weights;	  accum2    +=    weights[i]    *    sumWts;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
544	[BUG]  [BUGGY]  asSertionError  accum  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  asSertionError  accum  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	asSertionError  accum  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
545	[BUG]  [BUGGY]  assertionError  accum  =  values[i]  -  mean;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  assertionError  accum  =  values[i]  -  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	assertionError  accum  =  values[i]  -  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
546	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  *  mean;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  *  mean;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  *  mean;	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
547	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	123	1	replace
548	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	123	1	replace
549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	1	replace
550	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	1	replace
551	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [CE]  cannot  find  symbol  accum1  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	93	None	replace
552	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts)/  2.0;  }  [CE]  cannot  find  symbol  totalWts  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	non-compiled	[CE]  cannot  find  symbol  totalWts	93	None	replace
553	[BUG]  [BUGGY]  accum1  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum1  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;	  accum2    *=    weights[i]    *    dev;    this.accum2    *=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
554	[BUG]  [BUGGY]  double  accum2  =  weights[i];  accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  weights[i];  accum2  *=  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i];  accum2  *=  weights[i];	  incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
555	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  result;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  result;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  result;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    mean;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
556	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  dev  >  values[dev])  {  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  dev  >  values[dev])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  &&  dev  >  values[dev])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
557	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >  weights[i])  {  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >  weights[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  ||  dev  >  weights[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  cannot  find  symbol  i	130	None	replace
558	[BUG]  [BUGGY]  MiscUtilities.checkState(incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  MiscUtilities.checkState(incMoment)  {  if(!isBiasCorrected)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	MiscUtilities.checkState(incMoment)  {  if(!isBiasCorrected)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  ';'  expected	105	None	replace
559	[BUG]  [BUGGY]  if(!incMoment)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
560	[BUG]  [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||!isBiasCorrected)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||!isBiasCorrected)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(!isBiasCorrected  ||!isBiasCorrected)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  continue  outside  of  loop	105	None	replace
561	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  sumWts[i]  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  sumWts[i]  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  sumWts[i]  :  null;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
562	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	124	None	replace
563	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	124	None	replace
564	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }	  if(incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
565	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  	non-compiled	[CE]  not  a  statement	9	None	add
566	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  /  1.0;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  accum  /  1.0;  }	  	non-compiled	[CE]  not  a  statement	9	None	add
567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {	  if(incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	31	3	replace
568	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {	  if(incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	31	3	replace
569	[BUG]  [BUGGY]  var  =  1.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  1.0;	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
570	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
571	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    	compilable	  [FE]  AssertionError  	4	1	replace
572	[BUG]  [BUGGY]  accum2  *=  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  dev;	  accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
573	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  if(accum  ||  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  if(accum  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    ||    isBiasCorrected)    {    if(accum  ||  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
574	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  while(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  while(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    while(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
575	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    1.0;    }    incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  	non-compiled	[CE]  not  a  statement	3	None	add
576	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
577	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  while(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    while(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
578	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  2)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  if(sumWts  >  2)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    if(sumWts  >  2)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
579	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	94	None	replace
580	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    If(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
581	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
582	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  ';'  expected	122	None	add
583	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0);  }	  	non-compiled	[CE]  ';'  expected	122	None	add
584	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0	  timeout    	non-compiled	[CE]  ';'  expected	101	None	add
585	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  timeout    	non-compiled	[CE]  ';'  expected	101	None	add
586	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)	  timeout    	non-compiled	[CE]  ')'  expected	101	None	add
587	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        while(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts	  timeout    	non-compiled	[CE]  ')'  expected	101	None	add
588	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ')'  expected	5	None	add
589	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(incMoment)  {  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(incMoment)  {  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
590	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
591	[BUG]  [BUGGY]  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
592	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i],  dev  :  null;  [CE]  :  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i],  dev  :  null;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i],  dev  :  null;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  :  expected	133	None	replace
593	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	23	1	add
594	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	23	1	add
595	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)	  	non-compiled	[CE]  ')'  expected	23	None	add
596	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  weights[suntetisuntetisuntetisuntetisunteti  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  weights[suntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  weights[suntetisuntetisuntetisuntetisunteti	  if(incMoment)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
597	[BUG]  [BUGGY]  incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment)  {  accum2  *=  sumWts[i];  accum2  *=  weights[i];  }	  incMoment)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  not  a  statement	61	None	replace
598	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!isBiasCorrected)  {  AssertionError  accum2  =  values[i]  -  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)    {    AssertionError  accum2  =  values[i]  -  dev;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
599	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  else  if(isBiasCorrected  ||  isBiasCorrected)  {  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  else  if(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    isBiasCorrected)    {    else  if(isBiasCorrected  ||  isBiasCorrected)  {	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
600	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected.evaluate(values,  begin,  length);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected.evaluate(values,  begin,  length);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected.evaluate(values,  begin,  length);	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected.evaluate(values,    begin,    length);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
601	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  begin;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
602	[BUG]  [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  throw  new  IllegalArgumentException( " ".);  }	  if(isBiasCorrected)    {    if(!incMoment)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
603	[BUG]  [BUGGY]  incMoment  -=  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  -=  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  -=  isBiasCorrected;	  incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
604	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(sumWts    >    1)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
605	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
606	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	33	1	replace
607	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
608	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	1	replace
609	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  <  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  <  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	3	replace
610	[BUG]  [BUGGY]  if(sumWts  <  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  <  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  <  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	compilable	  [FE]  AssertionError  	6	3	replace
611	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  accum  -  (accum2  *  accum2  /  sumWts);	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
612	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	80	None	replace
613	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  dev;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum2  *=  dev;	  if(isBiasCorrected)    {    accum2    *=    weights[i]    *    (dev    *    dev);    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
614	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  if(!incMoment  &&  areBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  if(!incMoment  &&  areBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment    &&    isBiasCorrected)    {    if(!incMoment  &&  areBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
615	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dese;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dese;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  dese;	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    mean;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
616	[BUG]  [BUGGY]  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	}  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
617	[BUG]  [BUGGY]  bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
618	[BUG]  [BUGGY]  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	}  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
619	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
620	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected  &&  dev  >  1.0)  {	  if(!incMoment    &&    isBiasCorrected)    {    	compilable	  [FE]  AssertionError  	51	3	replace
621	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  dev  >=  values[i])  {  [CE]  cannot  find  symbol  i  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  dev  >=  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected  &&  dev  >=  values[i])  {	  if(!incMoment    &&    isBiasCorrected)    {    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
622	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(!incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    :    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
623	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    if(isBiasCorrected)  {  for(int  begin  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
624	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment  ||  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	55	1	replace
625	[BUG]  [BUGGY]  if(incMoment  ||  incMoment)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  ||  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	55	1	replace
626	[BUG]  [BUGGY]  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;	  if(isBiasCorrected)    {    accum2    *=    weights[0];    accum2    *=    weights[0]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
627	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }  [CE]  cannot  find  symbol  poids  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  poids[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  poids	12	None	replace
628	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [CE]  cannot  find  symbol  pounds  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  pounds	12	None	replace
629	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  accum2  *  accum2  /  sumWts);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
630	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  	non-compiled	[CE]  ';'  expected	7	None	add
631	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected,  incMoment);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected,  incMoment);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected,  incMoment);	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
632	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  mean.invoke(null,  isBiasCorrected);	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
633	[BUG]  [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(dev,  isBiasCorrected,  sumWts);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  values[i]  -  mean.invoke(dev,  isBiasCorrected,  sumWts);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  values[i]  -  mean.invoke(dev,  isBiasCorrected,  sumWts);	  if(isBiasCorrected    ||    incMoment)    {    AssertionError    accum    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
634	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
635	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
636	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  total;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  total;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  total;	  incMoment    =    isBiasCorrected?    isBiasCorrected    :    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
637	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  &&  isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    &&    incMoment)    {    	compilable	  [FE]  AssertionError  	45	3	replace
638	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment  &&  isBiasCorrected  &&  incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    &&    incMoment)    {    	compilable	  [FE]  AssertionError  	45	3	replace
639	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    10.0;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
640	[BUG]  [BUGGY]  if(incMoment)  {  if(accum  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(accum  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(accum  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	  if(!incMoment)    {    if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
641	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
642	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
643	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	  	non-compiled	[CE]  ';'  expected	32	None	add
644	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >=  values[i])  {  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >=  values[i])  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  ||  dev  >=  values[i])  {	  if(isBiasCorrected    ||    incMoment    ||    dev    >    values[i])    {    	non-compiled	[CE]  cannot  find  symbol  i	130	None	replace
645	[BUG]  [BUGGY]  int  accum2  =  dev[i]  -  weights[i];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  dev[i]  -  weights[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  dev[i]  -  weights[i];	  int    accum2    =    weights[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
646	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
647	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    If(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	  	non-compiled	[CE]  ';'  expected	85	None	add
648	[BUG]  [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	ffesuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
649	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  0)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	97	1	replace
650	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	97	1	replace
651	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	97	1	replace
652	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  else    if(incMoment)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    	compilable	  [FE]  AssertionError  	97	1	replace
653	[BUG]  [BUGGY]  double  accum2  =  sumWts[i]  /  mean;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  double  accum2  =  sumWts[i]  /  mean;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  sumWts[i]  /  mean;	  double    accum2    =    weights[i]    /    mean;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
654	[BUG]  [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||  accum2  <  =  sumWts)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||  accum2  <  =  sumWts)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(!isBiasCorrected  ||  accum2  <  =  sumWts)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
655	[BUG]  [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||  accum2  ==  1.0)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(!isBiasCorrected  ||  accum2  ==  1.0)  {  continue;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(!isBiasCorrected  ||  accum2  ==  1.0)  {  continue;  }	  if(isBiasCorrected)    {    if(!isBiasCorrected)    {    continue;    }    	non-compiled	[CE]  continue  outside  of  loop	105	None	replace
656	[BUG]  [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
657	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  imcMoment  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  if(isBiasCorrected  ||  imcMoment  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment    &&    isBiasCorrected)    {    if(isBiasCorrected  ||  imcMoment  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
658	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
659	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	35	1	replace
660	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    	compilable	  [FE]  AssertionError  	35	1	replace
661	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  *  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  *  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  *  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    *    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
662	[BUG]  [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum  =  isBiasCorrected?  values[i]  -  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum  =  isBiasCorrected?  values[i]  -  dev  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  if(incMoment)    {    AssertionError    accum    =    isBiasCorrected?    values[i]    -    mean    :    values[i]    *    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
663	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected  ||  accum2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  incMoment  =  isBiasCorrected  ||  accum2;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected  ||  accum2;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
664	[BUG]  [BUGGY]  if(incMoment  <  =  isBiasCorrected  ||  isBiasCorrected;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  <  =  isBiasCorrected  ||  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  <  =  isBiasCorrected  ||  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected    ||    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
665	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  ')'  expected	92	None	add
666	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	92	None	add
667	[BUG]  [BUGGY]  if(incMoment)  {  If(!incMoment)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  If(!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  If(!incMoment)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
668	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  If(!incMoment)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  If(!incMoment)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  If(!incMoment)  {	  if(!incMoment)    {    If(!incMoment)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
669	[BUG]  [BUGGY]  accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
670	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  0)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
671	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	1	replace
672	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    	compilable	  [FE]  AssertionError  	93	1	replace
673	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  if(accum  &&  isBiasCorrected)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  if(accum  &&  isBiasCorrected)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment    &&    isBiasCorrected)    {    if(accum  &&  isBiasCorrected)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
674	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
675	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
676	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }	  	non-compiled	[CE]  ';'  expected	34	None	add
677	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
678	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
679	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
680	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(incMoment)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	8	1	replace
681	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }  [CE]  cannot  find  symbol  pounds  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  mean;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  pounds	15	None	replace
682	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0);  }	  	non-compiled	[CE]  ';'  expected	36	None	add
683	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
684	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  /  2.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
685	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
686	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	  if(incMoment)    {    if(isBiasCorrected)    {    var    =    accum    /    1.0;    }    	compilable	  [FE]  AssertionError  	10	1	replace
687	[BUG]  [BUGGY]  if(incMoment  ||  sumWts)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment  ||  sumWts)  {  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  ||  sumWts)  {	  if(incMoment    &&    sumWts)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	136	None	replace
688	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  return  null;  }  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment)  {  return  null;  }	  if(isBiasCorrected)    {    if(!incMoment)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
689	[BUG]  [BUGGY]  accum2  *=  sumWts[i];  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum2  *=  sumWts[i];  incMoment  =  isBiasCorrected;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  sumWts[i];  incMoment  =  isBiasCorrected;	  accum2    *=    weights[i];    incMoment    =    isBiasCorrected;    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
690	[BUG]  [BUGGY]  accum  -=  accum2  *  dev  /  sumWts;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  -=  accum2  *  dev  /  sumWts;  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  dev  /  sumWts;	  if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
691	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    totalWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
692	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    totalWts))    /    1.0;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
693	[BUG]  [BUGGY]  IncMoment  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  IncMoment  incMoment  =  isBiasCorrected;  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	IncMoment  incMoment  =  isBiasCorrected;	  if(isBiasCorrected)    {    incMoment    =    isBiasCorrected;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
694	[BUG]  [BUGGY]  int  accum2  =  dev[i]  -  values[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  int  accum2  =  dev[i]  -  values[i];  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  dev[i]  -  values[i];	  int    accum2    =    values[i]    -    dev;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
695	[BUG]  [BUGGY]  accum  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  +=  weights[i]  *  (dev  *  dev);  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  +=  weights[i]  *  (dev  *  dev);	  accum2    +=    weights[i]    *    (dev    *    dev);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
696	[BUG]  [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  /  dev;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	  accum    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
697	[BUG]  [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }      [BUGGY]  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);  [BUGGY]      var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	AssertionError  accum2  =  isBiasCorrected?  values[i]  :  new  Double(sumWts);	  if(!incMoment)    {    AssertionError    accum2    =    isBiasCorrected?    values[i]    :    null;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
