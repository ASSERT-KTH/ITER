bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
3	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Integer  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Integer  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  For(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  >  expected	38	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    freq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	53	None	replace
8	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
9	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  missing  return  statement	42	None	replace
10	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
11	[BUG]  [BUGGY]  if(getCount(v)/(double)sumFreq);  if(getCount(v)/(double)sumFreq;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)/(double)sumFreq);  if(getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)/(double)sumFreq);  if(getCount(v)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
12	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	23	None	replace
13	[BUG]  [BUGGY]  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  no  suitable  method  found  for  max(long,Comparable<CAP#1>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  no  suitable  method  found  for  max(long,Comparable<CAP#1>)	23	None	replace
14	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  sumFreq  *  Math.pow(0,  sumFreq);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  sumFreq  *  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    sumFreq  *  Math.pow(0,  sumFreq);	  	non-compiled	[CE]  not  a  statement	73	None	add
15	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  double  sumFreq  =  Math.pow(0,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  double  sumFreq  =  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    double  sumFreq  =  Math.pow(0,  sumFreq);	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	73	None	add
16	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  Math.pow(0,  sumFreq);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    Math.pow(0,  sumFreq);	  	non-compiled	[CE]  unreachable  statement	73	None	add
17	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  long  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  long  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    long  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	73	None	add
18	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  final  double  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  final  double  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    final  double  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	73	None	add
19	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
21	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)null;  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)null;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)null;	  return(double)getCount(sumFreq)/(double)v1;    	non-compiled	[CE]  inconvertible  types	59	None	replace
22	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)value;  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)value;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)value;	  return(double)getCount(sumFreq)/(double)v1;    	non-compiled	[CE]  cannot  find  symbol  value	59	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)0;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return(double)getCount(sumFreq)/(double)0;	  return(double)getCount(sumFreq)/(double)v1;    	compilable	  [FE]  AssertionFailedError  	59	3	replace
24	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)0;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)0;	  return(double)getCount(sumFreq)/(double)v1;    	compilable	  [FE]  AssertionFailedError  	59	3	replace
25	[BUG]  [BUGGY]  sumFreq  =  Math.min(sumFreq,  v);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.min(sumFreq,  v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(sumFreq,  v);	  sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	18	None	replace
26	[BUG]  [BUGGY]  sumFreq  =  Math.min(sumFreq,  sumFreq  +  1);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.min(sumFreq,  sumFreq  +  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(sumFreq,  sumFreq  +  1);	  sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	18	None	replace
27	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  (int)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  (int)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    (int)getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  not  a  statement	1	None	add
28	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int  getCount(sumFreq)/(double)sumFreq;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int  getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    int  getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  ';'  expected	1	None	add
29	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    int)getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  not  a  statement	1	None	add
30	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  Integer  int  =  getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  Integer  int  =  getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    Integer  int  =  getCount(sumFreq)/(double)v;	  	non-compiled	[CE]  not  a  statement	1	None	add
31	[BUG]  [BUGGY]  return  sumFreq.doubleValue();  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq.doubleValue();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq.doubleValue();	  return    v.doubleValue();    	non-compiled	[CE]  long  cannot  be  dereferenced	33	None	replace
32	[BUG]  [BUGGY]  return  v.doubleValue()  +  sumFreq;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  v.doubleValue()  +  sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  v.doubleValue()  +  sumFreq;	  return    v.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
33	[BUG]  [BUGGY]  return  v.doubleValue()  *  sumFreq;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  v.doubleValue()  *  sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  v.doubleValue()  *  sumFreq;	  return    v.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
34	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  getSumFreq());  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.max(sumFreq,  getSumFreq());  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  getSumFreq());	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	49	None	replace
35	[BUG]  [BUGGY]  final  double  sumFreq  =  getSumFreq()  +  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  double  sumFreq  =  getSumFreq()  +  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  double  sumFreq  =  getSumFreq()  +  1;	  final    double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	7	None	replace
36	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
37	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    >=    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	50	None	replace
38	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq!=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq!=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq!=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    >=    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	50	None	replace
39	[BUG]  [BUGGY]  float  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  float  sumFreq  =  getSumFreq();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	float  sumFreq  =  getSumFreq();	  int    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	46	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    freq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	65	None	replace
41	[BUG]  [BUGGY]  SumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
42	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	64	None	replace
43	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
44	[BUG]  [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  while(v  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
46	[BUG]  [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
47	[BUG]  [BUGGY]  sumFreq  =  getPct();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getPct();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getPct();	  sumFreq    =    getSumFreq();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	3	None	replace
48	[BUG]  [BUGGY]  sumFreq  =  getBase();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getBase();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getBase();	  sumFreq    =    getSumFreq();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	3	None	replace
49	[BUG]  [BUGGY]  sumFreq  =  getNumber();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getNumber();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getNumber();	  sumFreq    =    getSumFreq();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	3	None	replace
50	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	56	None	replace
51	[BUG]  [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
52	[BUG]  [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
54	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  double)getCount(v)/(double)sumFreq;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  double)getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  double)getCount(v)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	68	None	replace
55	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double)getCount(sumFreq)/(double)sumFreq;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	68	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	68	3	replace
57	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	68	3	replace
58	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(v);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(v);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(v);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	28	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(1);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(1);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	28	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	58	None	replace
61	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	58	None	replace
62	[BUG]  [BUGGY]  sumFreq  +=  freqTable.get(i);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  +=  freqTable.get(i);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  +=  freqTable.get(i);	  if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	58	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }	  if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	58	None	replace
64	[BUG]  [BUGGY]  return(long)getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(long)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(long)getCount(sumFreq)/(double)v;	  return(int)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	9	None	replace
65	[BUG]  [BUGGY]  return(float)getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(float)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(float)getCount(sumFreq)/(double)v;	  return(int)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	9	None	replace
66	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(sumFreq    ==    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return(int)getCount(v)/(double)sumFreq;	  return(int)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
68	[BUG]  [BUGGY]  return(int)getCount(v)/(double)sumFreq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(v)/(double)sumFreq;	  return(int)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(long)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return(long)getCount(sumFreq)/(double)sumFreq;	  return(int)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	2	3	replace
70	[BUG]  [BUGGY]  return(long)getCount(sumFreq)/(double)sumFreq;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(long)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(long)getCount(sumFreq)/(double)sumFreq;	  return(int)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	2	3	replace
71	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	51	None	replace
72	[BUG]  [BUGGY]  long  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	51	None	replace
73	[BUG]  [BUGGY]  Integer  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Integer  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Integer  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	51	None	replace
74	[BUG]  [BUGGY]  (double)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  (double)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	(double)getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	41	None	replace
75	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)sumFreq;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	41	None	replace
76	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	41	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  /  Math.pow(10,  sumFreq);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
78	[BUG]  [BUGGY]  return  sumFreq  /  Math.pow(10,  sumFreq);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  /  Math.pow(10,  sumFreq);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  -  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(10,  sumFreq  -  1);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
80	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  -  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(10,  sumFreq  -  1);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  +  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(10,  sumFreq  +  1);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
82	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq  +  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(10,  sumFreq  +  1);	  return    sumFreq    *    Math.pow(10,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	72	3	replace
83	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  incompatible  types	85	None	replace
84	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
85	[BUG]  [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return  0;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)/(double)sumFreq)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  incompatible  types	85	None	replace
86	[BUG]  [BUGGY]  Context.checkState(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Context.checkState(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Context.checkState(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
87	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
88	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  possible  loss  of  precision  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  length  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  possible  loss  of  precision  [FE]                            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
92	[BUG]  [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
93	[BUG]  [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
94	[BUG]  [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  ||    sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
96	[BUG]  [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
97	[BUG]  [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
98	[BUG]  [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	24	None	replace
99	[BUG]  [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
100	[BUG]  [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
101	[BUG]  [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	luate(v)  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
102	[BUG]  [BUGGY]  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  v);  [CE]  no  suitable  method  found  for  max(long,Comparable<CAP#1>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  v);  sumFreq  =  Math.min(sumFreq,  v);	  Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  no  suitable  method  found  for  max(long,Comparable<CAP#1>)	22	None	replace
103	[BUG]  [BUGGY]  Math.max(v,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  no  suitable  method  found  for  max(Comparable<CAP#1>,long)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(v,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(v,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  no  suitable  method  found  for  max(Comparable<CAP#1>,long)	22	None	replace
104	[BUG]  [BUGGY]  Math.max(result,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(result,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(result,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	  Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  find  symbol  result	22	None	replace
105	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  /  Math.pow(0,  sumFreq);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
107	[BUG]  [BUGGY]  return  sumFreq  /  Math.pow(0,  sumFreq);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  /  Math.pow(0,  sumFreq);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(1,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(1,  sumFreq);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
109	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(1,  sumFreq);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(1,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(1,  sumFreq);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
110	[BUG]  [BUGGY]  Double  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Double  sumFreq  =  getSumFreq();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Double  sumFreq  =  getSumFreq();	  double    sumFreq    =    getSumFreq()    +    1;    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	8	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	16	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(2);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(2);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(2);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	16	None	replace
114	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(1);    }    	non-compiled	[CE]  '.class'  expected	67	None	replace
115	[BUG]  [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
116	[BUG]  [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
117	[BUG]  [BUGGY]  return  getCount(sumFreq)/(double)v  +  1;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getCount(sumFreq)/(double)v  +  1;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getCount(sumFreq)/(double)v  +  1;	  return    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	10	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  getCount(v)/(double)sumFreq;	  return    getCount(sumFreq)/(double)v;    	compilable	  [FE]  AssertionFailedError  	10	1	replace
119	[BUG]  [BUGGY]  return  getCount(v)/(double)sumFreq;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getCount(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getCount(v)/(double)sumFreq;	  return    getCount(sumFreq)/(double)v;    	compilable	  [FE]  AssertionFailedError  	10	1	replace
120	[BUG]  [BUGGY]  return  sumFreq  /(double)v;  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  /(double)v;	  return    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	10	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(1);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(1);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	13	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(v);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(v);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(v);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	13	None	replace
123	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  double  sumFreq  =  Math.pow(sumFreq,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  double  sumFreq  =  Math.pow(sumFreq,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    double  sumFreq  =  Math.pow(sumFreq,  sumFreq);	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	31	None	add
124	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Math.pow(sumFreq,  sumFreq);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Math.pow(sumFreq,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    Math.pow(sumFreq,  sumFreq);	  	non-compiled	[CE]  unreachable  statement	31	None	add
125	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.pow(sumFreq,  sumFreq);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.pow(sumFreq,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    Double.pow(sumFreq,  sumFreq);	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
126	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.parseDouble(sumFreq);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.parseDouble(sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    Double.parseDouble(sumFreq);	  	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	31	None	add
127	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.parseDouble(sumFreq,  sumFreq);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  Double.parseDouble(sumFreq,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    Double.parseDouble(sumFreq,  sumFreq);	  	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	31	None	add
128	[BUG]  [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  max  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  len  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
130	[BUG]  [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
131	[BUG]  [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
132	[BUG]  [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
133	[BUG]  [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    =    0.0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  '.class'  expected	66	None	replace
135	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
136	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  incompatible  types	84	None	replace
137	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  sumFreq  =  getSumFreq();  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  incompatible  types	84	None	replace
138	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
139	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFre  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFre  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFre	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  ';'  expected	84	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(0,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
141	[BUG]  [BUGGY]  return  Math.pow(0,  sumFreq);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(0,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
142	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  v);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  v);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  v);	  return    Math.pow(sumFreq,    sumFreq);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	32	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(10,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
144	[BUG]  [BUGGY]  return  Math.pow(10,  sumFreq);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(10,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(10.0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(10.0,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
146	[BUG]  [BUGGY]  return  Math.pow(10.0,  sumFreq);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(10.0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(10.0,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
147	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    =    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
148	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    =    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
149	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  getPct(sumFreq);	  return    getPct(v);    	compilable	  [FE]  StackOverflowError  	36	4	replace
150	[BUG]  [BUGGY]  return  getPct(sumFreq);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getPct(sumFreq);	  return    getPct(v);    	compilable	  [FE]  StackOverflowError  	36	4	replace
151	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >  0)  {  return  getPct(v);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	if(sumFreq  >  0)  {  return  getPct(v);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    getPct(v);    	compilable	  [FE]  StackOverflowError  	36	4	replace
152	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  return  getPct(v);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >  0)  {  return  getPct(v);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  return  getPct(v);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    getPct(v);    	compilable	  [FE]  StackOverflowError  	36	4	replace
153	[BUG]  [BUGGY]  return  getPct(v,  sumFreq);  [CE]  no  suitable  method  found  for  getPct(Comparable<CAP#1>,long)  [FE]        StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getPct(v,  sumFreq);	  return    getPct(v);    	non-compiled	[CE]  no  suitable  method  found  for  getPct(Comparable<CAP#1>,long)	36	None	replace
154	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  return  getPct(v);  }  [CE]  missing  return  statement  [FE]          StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >  0)  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  return  getPct(v);  }	  return    getPct(v);    	non-compiled	[CE]  missing  return  statement	36	None	replace
155	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq(sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getSumFreq(sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq(sumFreq);	  double    sumFreq    =    getSumFreq(v);    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	60	None	replace
156	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq(v,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getSumFreq(v,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq(v,  sumFreq);	  double    sumFreq    =    getSumFreq(v);    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	60	None	replace
157	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq(v);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq(v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq(v);	  double    sumFreq    =    getSumFreq(v);    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	60	None	replace
158	[BUG]  [BUGGY]  final  double  sumFreq  =  getSumFreq(v);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  double  sumFreq  =  getSumFreq(v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  double  sumFreq  =  getSumFreq(v);	  double    sumFreq    =    getSumFreq(v);    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	60	None	replace
159	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    ==    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	6	None	replace
160	[BUG]  [BUGGY]  final  int  sumFreq  =  getSumFreq()  -  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  int  sumFreq  =  getSumFreq()  -  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  int  sumFreq  =  getSumFreq()  -  1;	  final    int    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	47	None	replace
161	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  v);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.max(sumFreq,  v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  v);	  sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	5	None	replace
162	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  sumFreq  *  Math.pow(10,  sumFreq);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  sumFreq  *  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    sumFreq  *  Math.pow(10,  sumFreq);	  	non-compiled	[CE]  not  a  statement	71	None	add
163	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  double  sumFreq  *  Math.pow(10,  sumFreq);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  double  sumFreq  *  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    double  sumFreq  *  Math.pow(10,  sumFreq);	  	non-compiled	[CE]  ';'  expected	71	None	add
164	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  double  sumFreq  =  Math.pow(10,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  double  sumFreq  =  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    double  sumFreq  =  Math.pow(10,  sumFreq);	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	71	None	add
165	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  Math.pow(10,  sumFreq);  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  Math.pow(10,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    Math.pow(10,  sumFreq);	  	non-compiled	[CE]  unreachable  statement	71	None	add
166	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  final  double  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  final  double  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    final  double  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	71	None	add
167	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }	  for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i).doubleValue();    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
168	[BUG]  [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
169	[BUG]  [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumfreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumfreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumfreq);	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	29	None	replace
170	[BUG]  [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  SumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  SumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Comparable  <?>  sumFreq  =  Math.max(sumFreq,  sumFreq);  SumFreq  =  Math.min(sumFreq,  sumFreq);	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	29	None	replace
171	[BUG]  [BUGGY]  sumFreq  =  Math.min(sumFreq,  getSumFreq());  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.min(sumFreq,  getSumFreq());  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(sumFreq,  getSumFreq());	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	48	None	replace
172	[BUG]  [BUGGY]  Math.max(sumFreq,  0);  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  0);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  0);	  Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	86	None	replace
173	[BUG]  [BUGGY]  Math.max(sumFreq,  sumFreq  +  1);  [CE]  missing  return  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  sumFreq  +  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  sumFreq  +  1);	  Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	86	None	replace
174	[BUG]  [BUGGY]  return  getPct(v);  getPct(v);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  getPct(v);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    getPct(v);	  	non-compiled	[CE]  unreachable  statement	35	None	add
175	[BUG]  [BUGGY]  return  getPct(v);  if(v  ==  null)  {  return  getPct(v);  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(v  ==  null)  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(v  ==  null)  {  return  getPct(v);  }	  	non-compiled	[CE]  unreachable  statement	35	None	add
176	[BUG]  [BUGGY]  return  getPct(v);  double  v  =  getPct(v);  [CE]  variable  v  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  double  v  =  getPct(v);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    double  v  =  getPct(v);	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  getPct(Comparable<?>)	35	None	add
177	[BUG]  [BUGGY]  return  getPct(v);  if(v!=  null)  {  return  getPct(v);  }  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(v!=  null)  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(v!=  null)  {  return  getPct(v);  }	  	non-compiled	[CE]  unreachable  statement	35	None	add
178	[BUG]  [BUGGY]  return  getPct(v);  if(sumFreq  ==  0)  {  return  getPct(v);  }  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(sumFreq  ==  0)  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(sumFreq  ==  0)  {  return  getPct(v);  }	  	non-compiled	[CE]  unreachable  statement	35	None	add
179	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  incompatible  types	43	None	replace
180	[BUG]  [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)/(double)sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  incompatible  types	43	None	replace
181	[BUG]  [BUGGY]  if(getCount(v)/(double)sumFreq);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)/(double)sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)/(double)sumFreq);	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  incompatible  types	43	None	replace
182	[BUG]  [BUGGY]  result  =  getCount(sumFreq)/(double)v;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  result  =  getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	result  =  getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    long    result    =    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  cannot  find  symbol  result	70	None	replace
183	[BUG]  [BUGGY]  long  result  =  getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  result  =  getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  result  =  getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    long    result    =    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	70	None	replace
184	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  +  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  +  1);	  SumFreq    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
185	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);	  SumFreq    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
186	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  /  2);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  /  2);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq  /  2);	  SumFreq    sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
187	[BUG]  [BUGGY]  (double)getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  (double)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	(double)getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  not  a  statement	69	None	replace
188	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)v;  (double)getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)v;  (double)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)v;  (double)getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  not  a  statement	69	None	replace
189	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
190	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	61	None	replace
191	[BUG]  [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
192	[BUG]  [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >=  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
193	[BUG]  [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  =  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
194	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	4	None	replace
195	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq,  v.doubleValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq,  v.doubleValue());  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  sumFreq,  v.doubleValue());	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
196	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq.doubleValue());  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  sumFreq.doubleValue());	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
197	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  v.doubleValue()  -  sumFreq);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  v.doubleValue()  -  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  v.doubleValue()  -  sumFreq);	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
198	[BUG]  [BUGGY]  while(v  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
199	[BUG]  [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  <  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
200	[BUG]  [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >=  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
201	[BUG]  [BUGGY]  return(double)getCount()  *(double)sumFreq;  [CE]  no  suitable  method  found  for  getCount()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount()  *(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount()  *(double)sumFreq;	  return(double)getCount()    /(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	54	None	replace
202	[BUG]  [BUGGY]  return(double)getCount()  /(double)v;  [CE]  no  suitable  method  found  for  getCount()  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount()  /(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount()  /(double)v;	  return(double)getCount()    /(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	54	None	replace
203	[BUG]  [BUGGY]  return(int)getCount()  /(double)sumFreq;  [CE]  no  suitable  method  found  for  getCount()  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount()  /(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount()  /(double)sumFreq;	  return(double)getCount()    /(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	54	None	replace
204	[BUG]  [BUGGY]  Math.min(sumFreq,  sumFreq  +  1);  [CE]  missing  return  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.min(sumFreq,  sumFreq  +  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.min(sumFreq,  sumFreq  +  1);	  Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	87	None	replace
205	[BUG]  [BUGGY]  Math.min(sumFreq,  v);  [CE]  no  suitable  method  found  for  min(long,Comparable<CAP#1>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.min(sumFreq,  v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.min(sumFreq,  v);	  Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  no  suitable  method  found  for  min(long,Comparable<CAP#1>)	87	None	replace
206	[BUG]  [BUGGY]  Math.min(sumFreq,  sumFreq  -  1);  [CE]  missing  return  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.min(sumFreq,  sumFreq  -  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.min(sumFreq,  sumFreq  -  1);	  Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	87	None	replace
207	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
208	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
209	[BUG]  [BUGGY]  if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
210	[BUG]  [BUGGY]  if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
211	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
212	[BUG]  [BUGGY]  if(v  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  incomparable  types:  Comparable<CAP#1>  and  int  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(sumFreq    ==    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  incomparable  types:  Comparable<CAP#1>  and  int	76	None	replace
213	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
214	[BUG]  [BUGGY]  if(getCount(v)>(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
215	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ')'  expected	42	None	replace
216	[BUG]  [BUGGY]  sumFreq  =  Math.min(valueFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.min(valueFreq,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(valueFreq,  sumFreq);	  sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	18	None	replace
217	[BUG]  [BUGGY]  return  getPct(sumFreq,  v);  [CE]  no  suitable  method  found  for  getPct(long,Comparable<CAP#1>)  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(sumFreq,  v);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getPct(sumFreq,  v);	  return    getPct(v);    	non-compiled	[CE]  no  suitable  method  found  for  getPct(long,Comparable<CAP#1>)	36	None	replace
218	[BUG]  [BUGGY]  return  sumFreq  +  v.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  +  v.doubleValue();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  +  v.doubleValue();	  return    v.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
219	[BUG]  [BUGGY]  return  sumFreq  /  v.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  /  v.doubleValue();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  /  v.doubleValue();	  return    v.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
220	[BUG]  [BUGGY]  final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
221	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
222	[BUG]  [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
223	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    =    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
224	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
225	[BUG]  [BUGGY]  while(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
226	[BUG]  [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	25	None	replace
228	[BUG]  [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    >=    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
229	[BUG]  [BUGGY]  long  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  long  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	long  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	41	None	replace
230	[BUG]  [BUGGY]  luate(freqTable,  sumFreq)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  luate(freqTable,  sumFreq)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	luate(freqTable,  sumFreq)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
231	[BUG]  [BUGGY]  final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  long  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
232	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	49	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(v);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(v);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(v);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	16	None	replace
234	[BUG]  [BUGGY]  Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);	  Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	22	None	replace
235	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double  getCount(sumFreq)/(double)sumFreq;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double  getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  double  getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  ';'  expected	68	None	replace
236	[BUG]  [BUGGY]  final  float  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  float  sumFreq  =  getSumFreq();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  float  sumFreq  =  getSumFreq();	  final    long    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	45	None	replace
237	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	12	None	replace
238	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  incompatible  types	84	None	replace
239	[BUG]  [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
240	[BUG]  [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >=  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
241	[BUG]  [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >=  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
242	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  freqTable.doubleValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  freqTable.doubleValue());  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  freqTable.doubleValue());	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
243	[BUG]  [BUGGY]  return  Math.pow(v,  sumFreq.doubleValue());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(v,  sumFreq.doubleValue());  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(v,  sumFreq.doubleValue());	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
244	[BUG]  [BUGGY]  return(double)getCount()  /(double)sumFreq  +  1;  [CE]  no  suitable  method  found  for  getCount()  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount()  /(double)sumFreq  +  1;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount()  /(double)sumFreq  +  1;	  return(double)getCount()    /(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	54	None	replace
245	[BUG]  [BUGGY]  return  getCount(sumFreq)/(double)v  /(double)sumFreq;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getCount(sumFreq)/(double)v  /(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getCount(sumFreq)/(double)v  /(double)sumFreq;	  return    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	10	None	replace
246	[BUG]  [BUGGY]  sumFreq  =  getNumberFreq();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getNumberFreq();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getNumberFreq();	  sumFreq    =    getSumFreq();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	3	None	replace
247	[BUG]  [BUGGY]  sumFreq  =  getMean();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getMean();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getMean();	  sumFreq    =    getSumFreq();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	3	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }	  for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i).doubleValue();    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	40	None	replace
249	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  (int)getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  (int)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    (int)getCount(sumFreq)/(double)v;	  	non-compiled	[CE]  not  a  statement	1	None	add
250	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int  getCount(sumFreq)/(double)v;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  int  getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;    int  getCount(sumFreq)/(double)v;	  	non-compiled	[CE]  ';'  expected	1	None	add
251	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  For(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
252	[BUG]  [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    ==    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
253	[BUG]  [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  return  getPct(i);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  return  getPct(i);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  return  getPct(i);  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
254	[BUG]  [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freqTable  =  freqTable.get(i);  if(freqTable!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freqTable  =  freqTable.get(i);  if(freqTable!=  null)  {  return  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freqTable  =  freqTable.get(i);  if(freqTable!=  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
255	[BUG]  [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(i);  if(freq!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(i);  if(freq!=  null)  {  return  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(i);  if(freq!=  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
256	[BUG]  [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(v);  if(freq!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(v);  if(freq!=  null)  {  return  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  i++)  {  Comparable  <?>  freq  =  freqTable.get(v);  if(freq!=  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
257	[BUG]  [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	55	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	17	None	replace
259	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
260	[BUG]  [BUGGY]  if(v  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  incomparable  types:  Comparable<CAP#1>  and  int  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  incomparable  types:  Comparable<CAP#1>  and  int	24	None	replace
261	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	24	None	replace
262	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    return    Double.POSITIVE_INFINITY;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
263	[BUG]  [BUGGY]  luate(v)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  luate(v)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	luate(v)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    freq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
265	[BUG]  [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
266	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)v;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  (double)getCount(v)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  not  a  statement	69	None	replace
267	[BUG]  [BUGGY]  double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  not  a  statement	69	None	replace
268	[BUG]  [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
269	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
270	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
271	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
272	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
273	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	73	None	add
274	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  int  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  int  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    int  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	73	None	add
275	[BUG]  [BUGGY]  if(v  <  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(v    <    =    0.0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	88	None	replace
276	[BUG]  [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0.0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(v    <    =    0.0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
277	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  0);  sumFreq  =  Math.min(sumFreq,  0);	  sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	21	None	replace
278	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  long  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  long  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    long  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	71	None	add
279	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(10,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(10,  sumFreq);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    if(v  ==  null)  {  sumFreq  =  Math.pow(10,  sumFreq);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	71	None	add
280	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  int  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  int  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    int  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	71	None	add
281	[BUG]  [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  ==  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  while(v    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
282	[BUG]  [BUGGY]  if(v  >=  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >=  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >=  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
283	[BUG]  [BUGGY]  if(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  1)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(1);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
284	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  long  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  long  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    long  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	31	None	add
285	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  double  sumFreq  =  Math.pow(0,  sumFreq);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  double  sumFreq  =  Math.pow(0,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    double  sumFreq  =  Math.pow(0,  sumFreq);	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	31	None	add
286	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]        AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    if(v  ==  null)  {  sumFreq  =  Math.pow(0,  sumFreq);  }	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	31	None	add
287	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  int  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  int  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    Math.pow(sumFreq,    sumFreq);    int  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	31	None	add
288	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  incompatible  types	43	None	replace
289	[BUG]  [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)/(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)/(double)sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  incompatible  types	43	None	replace
290	[BUG]  [BUGGY]  return(double)getCount()  /(double)sumFreq;  if(getCount(v)/(double)sumFreq);  [CE]  no  suitable  method  found  for  getCount()  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount()  /(double)sumFreq;  if(getCount(v)/(double)sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount()  /(double)sumFreq;  if(getCount(v)/(double)sumFreq);	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	43	None	replace
291	[BUG]  [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  incompatible  types	85	None	replace
292	[BUG]  [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
293	[BUG]  [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)v);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
294	[BUG]  [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  sumFreq)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(v)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
295	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq()  /  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getSumFreq()  /  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq()  /  1;	  double    sumFreq    =    getSumFreq()    -    1;    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	75	None	replace
296	[BUG]  [BUGGY]  return  Math.pow(maximumFreq,  sumFreq);  [CE]  cannot  find  symbol  maximumFreq  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(maximumFreq,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(maximumFreq,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  find  symbol  maximumFreq	32	None	replace
297	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq,  freqTable.doubleValue());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(sumFreq,  sumFreq,  freqTable.doubleValue());  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  sumFreq,  freqTable.doubleValue());	  return    Math.pow(sumFreq,    v.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
298	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  sumFreq  -  1);	  sumFreq    =    Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	5	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
300	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  double  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  double  sumFreq  =  getSumFreq();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(0,    sumFreq);    double  sumFreq  =  getSumFreq();	  	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	73	None	add
301	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
302	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
303	[BUG]  [BUGGY]  return  getNumber(sumFreq);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getNumber(sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getNumber(sumFreq);	  return    getPct(v);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
304	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    =    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  freq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  freq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  freq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    freq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	53	None	replace
306	[BUG]  [BUGGY]  ||(sumFreq  <  0  &&  sumFreq  <  =  0))  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  ||(sumFreq  <  0  &&  sumFreq  <  =  0))  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||(sumFreq  <  0  &&  sumFreq  <  =  0))  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
307	[BUG]  [BUGGY]  int  sumFreq  =  getSumFreq()  -  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  int  sumFreq  =  getSumFreq()  -  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	int  sumFreq  =  getSumFreq()  -  1;	  int    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	46	None	replace
308	[BUG]  [BUGGY]  if(v!=  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v!=  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v!=  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
309	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
310	[BUG]  [BUGGY]  if(v.equals(v))  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v.equals(v))  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v.equals(v))  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v!=    null)    {    sumFreq    =    getSumFreq();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
311	[BUG]  [BUGGY]  double  result  =  getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  result  =  getCount(sumFreq)/(double)v;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  result  =  getCount(sumFreq)/(double)v;	  return(double)getCount(sumFreq)/(double)sumFreq;    long    result    =    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	70	None	replace
312	[BUG]  [BUGGY]  sumFreq  =  Math.min(v,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  Math.min(v,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(v,  sumFreq);	  sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	18	None	replace
313	[BUG]  [BUGGY]  Math.max(0,  sumFreq);  [CE]  missing  return  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(0,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(0,  sumFreq);	  Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	86	None	replace
314	[BUG]  [BUGGY]  Math.max(sumFreq,  sumFreq  -  1);  [CE]  missing  return  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(sumFreq,  sumFreq  -  1);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  sumFreq  -  1);	  Math.max(sumFreq,    sumFreq);    	non-compiled	[CE]  missing  return  statement	86	None	replace
315	[BUG]  [BUGGY]  if(sumFreq  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  =  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
316	[BUG]  [BUGGY]  if(sumFreq  <  =  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(sumFreq  <  =  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  =  0)  {  return(double)getCount(v)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
317	[BUG]  [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount(v)>  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
318	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
319	[BUG]  [BUGGY]  Math.max(0,  sumFreq);  sumFreq  =  Math.min(0,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.max(0,  sumFreq);  sumFreq  =  Math.min(0,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(0,  sumFreq);  sumFreq  =  Math.min(0,  sumFreq);	  Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	22	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(2);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(2);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(2);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	28	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(0).doubleValue();  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(0).doubleValue();  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(0).doubleValue();  }	  for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i).doubleValue();    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	40	None	replace
322	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq  *  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq.length;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	25	None	replace
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq  -  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(0,  sumFreq  -  1);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
325	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq  -  1);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(0,  sumFreq  -  1);	  return    sumFreq    *    Math.pow(0,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	74	3	replace
326	[BUG]  [BUGGY]  return  getCount(sumFreq)/(double)v.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getCount(sumFreq)/(double)v.doubleValue();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getCount(sumFreq)/(double)v.doubleValue();	  return    getCount(sumFreq)/(double)v;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
327	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  getPct(v)/(double)sumFreq;	  return    getCount(sumFreq)/(double)v;    	compilable	  [FE]  StackOverflowError  	10	4	replace
328	[BUG]  [BUGGY]  return  getPct(v)/(double)sumFreq;  [FE]  StackOverflowError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getPct(v)/(double)sumFreq;	  return    getCount(sumFreq)/(double)v;    	compilable	  [FE]  StackOverflowError  	10	4	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(20,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(20,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
330	[BUG]  [BUGGY]  return  Math.pow(20,  sumFreq);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(20,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(20,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(1L,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(1L,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
332	[BUG]  [BUGGY]  return  Math.pow(1L,  sumFreq);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  Math.pow(1L,  sumFreq);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(1L,  sumFreq);	  return    Math.pow(sumFreq,    sumFreq);    	compilable	  [FE]  AssertionFailedError  	32	3	replace
333	[BUG]  [BUGGY]  if(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }	  if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
334	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  getCount(sumFreq)/(double)sumFreq;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	68	None	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(v)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(v)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
336	[BUG]  [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(v)/(double)sumFreq;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(v)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  ==  null)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  else  {  return(double)getCount(v)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
337	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq  +  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1,  sumFreq);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(0,    sumFreq);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	17	None	replace
339	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
340	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    <    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
341	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(2);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(2);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(2);  }	  for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(0);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	13	None	replace
343	[BUG]  [BUGGY]  return(double)getCount(v)/(double)v1;  [CE]  cannot  find  symbol  v1  [FE]            AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(v)/(double)v1;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(v)/(double)v1;	  return(double)getCount(sumFreq)/(double)v1;    	non-compiled	[CE]  cannot  find  symbol  v1	59	None	replace
344	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)v0;  [CE]  cannot  find  symbol  v0  [FE]              AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return(double)getCount(sumFreq)/(double)v0;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)v0;	  return(double)getCount(sumFreq)/(double)v1;    	non-compiled	[CE]  cannot  find  symbol  v0	59	None	replace
345	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getPct();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	  if(v    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
346	[BUG]  [BUGGY]  if(v.getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v.getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v.getCount()  >  sumFreq)  {  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);    if(v    ==    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
347	[BUG]  [BUGGY]  final  double  sumFreq  =  getSumFreq()  -  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  final  double  sumFreq  =  getSumFreq()  -  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  double  sumFreq  =  getSumFreq()  -  1;	  final    double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	7	None	replace
348	[BUG]  [BUGGY]  double  sumFreq  =  getMean()  -  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getMean()  -  1;  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getMean()  -  1;	  double    sumFreq    =    getSumFreq()    -    1;    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	75	None	replace
349	[BUG]  [BUGGY]  double  sumFreq  =  getNumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getNumFreq();  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getNumFreq();	  double    sumFreq    =    getSumFreq()    -    1;    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	75	None	replace
350	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(v    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
351	[BUG]  [BUGGY]  return  getPct(v);  return  getPct(v);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  return  getPct(v);  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    return  getPct(v);	  	non-compiled	[CE]  unreachable  statement	35	None	add
352	[BUG]  [BUGGY]  return  getPct(v);  if(v  <  =  sumFreq)  {  return  getPct(v);  }  else  {  return  getPct(v);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(v  <  =  sumFreq)  {  return  getPct(v);  }  else  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(v  <  =  sumFreq)  {  return  getPct(v);  }  else  {  return  getPct(v);  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
353	[BUG]  [BUGGY]  return  getPct(v);  if(v  <  =  sumFreq)  {  return  getPct(v);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  getPct(v);  if(v  <  =  sumFreq)  {  return  getPct(v);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    getPct(v);    if(v  <  =  sumFreq)  {  return  getPct(v);  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
354	[BUG]  [BUGGY]  Math.min(v,  sumFreq);  [CE]  no  suitable  method  found  for  min(Comparable<CAP#1>,long)  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  Math.min(v,  sumFreq);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.min(v,  sumFreq);	  Math.min(sumFreq,    sumFreq);    	non-compiled	[CE]  no  suitable  method  found  for  min(Comparable<CAP#1>,long)	87	None	replace
355	[BUG]  [BUGGY]  return  this.pct.doubleValue();  [CE]  cannot  find  symbol  pct  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  this.pct.doubleValue();  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  this.pct.doubleValue();	  return    v.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  pct	33	None	replace
356	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  if(v  ==  null)  {  return  sumFreq  *  Math.pow(10,  sumFreq);  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  if(v  ==  null)  {  return  sumFreq  *  Math.pow(10,  sumFreq);  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return    sumFreq    *    Math.pow(10,    sumFreq);    if(v  ==  null)  {  return  sumFreq  *  Math.pow(10,  sumFreq);  }	  	non-compiled	[CE]  unreachable  statement	71	None	add
357	[BUG]  [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [CE]  no  suitable  method  found  for  getCount()  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(getCount()  >  0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	42	None	replace
358	[BUG]  [BUGGY]  sumFreq  =  getPct(v);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  sumFreq  =  getPct(v);  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getPct(v);	  sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	49	None	replace
359	[BUG]  [BUGGY]  if(v  <  =  0.0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  if(v  <  =  0.0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  }  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0.0)  {  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  }	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
360	[BUG]  [BUGGY]  while(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  while(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(sumFreq    <    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(v);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(v);  }  [BUGGY]      return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(v);  }	  for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	37	None	replace
362	[BUG]  [BUGGY]  double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }      [BUGGY]  double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [BUGGY]      }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getCount(v)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  not  a  statement	41	None	replace
