bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  +=  getCount(freqTable.size()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.size()  -  1);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.size()  -  1);	      result    +=    getCount(values.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  result  +=  getCount(variables.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(variables.size()  -  1);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(variables.size()  -  1);	      result    +=    getCount(values.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  result  +=  getCount(v);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(v);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(v);	      result    +=    getCount(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  result  +=  getCount(values.nextValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values.nextValue);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.nextValue);	      result    +=    getCount(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  result  +=  getCount(value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(value);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(value);	      result    +=    getCount(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
6	[BUG]  [BUGGY]  result  +=  getCount(values);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values);	      result    +=    getCount(nextValue);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  result  +=  getCount(freqTable.size());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.size());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.size());	      result    +=    getCount(values.size());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  result  +=  getCount(values.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values.size()  -  2);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.size()  -  2);	      result    +=    getCount(values.size());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
10	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
11	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    Result  +=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	6	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	        result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
13	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
15	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
16	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.getKey());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.getKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.getKey());	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
17	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.lastKey()  -  1;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  -  1;	      Long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xFFFF;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xFFFF;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  &  0xFFFF;	      Long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xff;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xff;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  &  0xff;	      Long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  Long  value  =  freqTable.getValue(v,  c);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.getValue(v,  c);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.getValue(v,  c);	      Long    value    =    freqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
21	[BUG]  [BUGGY]  Long  value  =  c.getValue(v);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  c.getValue(v);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v);	      Long    value    =    freqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  Long  value  =  v.getValue(freqTable);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  v.getValue(freqTable);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  v.getValue(freqTable);	      Long    value    =    freqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  result  +=  getCount(values.get(0),  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values.get(0),  value);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(0),  value);	      result    +=    getCount(values.get(0));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  result  +=  getCount(values.get(1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values.get(1));  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(1));	      result    +=    getCount(values.get(0));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  result  +=  getCount(values.get(0),  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values.get(0),  c);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(0),  c);	      result    +=    getCount(values.get(0));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey());//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.lastKey());//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey());//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  Long  value  =  freqTable.firstKey();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.firstKey();  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.firstKey();	      Long    value    =    freqTable.nextKey();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
29	[BUG]  [BUGGY]  Long  value  =  freqTable.nextKey()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.nextKey()  -  1;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.nextKey()  -  1;	      Long    value    =    freqTable.nextKey();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  result  +=  getCount(freqTable.firstKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.firstKey());  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.firstKey());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  long  value  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  long  value  =  freqTable.lastKey()  -  1;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastKey()  -  1;	      long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  int  value  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  int  value  =  freqTable.lastKey();  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  value  =  freqTable.lastKey();	      long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  long  value  =  freqTable.lastKey()  &  0xFFFF;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  long  value  =  freqTable.lastKey()  &  0xFFFF;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastKey()  &  0xFFFF;	      long    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  -  1;//  v  is  comparable,  but  greater  than  the  last  value  }	  return    getCount();//    v    is    comparable,    but    greater    than    the    last    value    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  return  getCount();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount();  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  return  getCount(freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount(freqTable.lastKey());  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable.lastKey());	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  return  getCount(v);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount(v);  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(v);	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey()  -  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.lastKey()  -  1);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey()  -  1);	      result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  value);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.lastKey(),  value);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  value);	      result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  int  lastValue  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  int  lastValue  =  freqTable.lastKey();  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  lastValue  =  freqTable.lastKey();	      long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
41	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  1;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  -  1;	      long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
42	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xff;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xff;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  &  0xff;	      long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  v  =  getCumFreq();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  v  =  getCumFreq();  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCumFreq();	  return    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  v  =  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  v  =  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value	  return    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  Long  value  =  freqTable.next();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  freqTable.next();  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.next();	      Long    value    =    freqTable.nextKey();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
46	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  lastValue  =  freqTable.lastKey();  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey();	      long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  result  +=  getCount(freqTable.get(0));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.get(0));  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.get(0));	      result    +=    getCount(values.get(0));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.get(0));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(values,  freqTable.get(0));  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.get(0));	      result    +=    getCount(values.get(0));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  return  getCount(v);//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount(v);//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(v);//  v  is  comparable,  but  greater  than  the  last  value	  return    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  return  0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  0;  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  0;	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  return  getCumFreq()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCumFreq()  +  1;  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq()  +  1;	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  result  +=  getCount(freqTable.secondKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.secondKey());  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.secondKey());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  return  getCount()  +  1;//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCount()  +  1;//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  +  1;//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  long  result  +=  getCount(freqTable.lastKey());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  long  result  +=  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    long  result  +=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  ';'  expected	6	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	        result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
56	[BUG]  [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]      result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	        result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	6	1	add
57	[BUG]  [BUGGY]  Result  +=  getCount(freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Result  +=  getCount(freqTable.lastKey());  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(freqTable.lastKey());	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  return  getCumFreq(v);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  return  getCumFreq(v);  [BUGGY]    }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq(v);	  return    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
59	[BUG]  [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v);  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  this.sumFreqTable.getValue(v);	      Long    value    =    freqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
60	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.lastKey());  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  freqTable.lastKey());	      result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {    [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [BUGGY]    return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  &  0xFFFF;	      long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
