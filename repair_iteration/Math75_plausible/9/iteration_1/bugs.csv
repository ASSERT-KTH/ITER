bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  greater  than  the  last  value	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2	[BUG]  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
3	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
4	[BUG]  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	  	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    result  +=  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  	18	1	add
7	[BUG]  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  	18	1	add
8	[BUG]  [BUGGY]    result  +=  getCount(nextValue);  [CE]  cannot  find  symbol  nextValue  [FE]      AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(nextValue);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(nextValue);		non-compiled	[CE]  cannot  find  symbol  nextValue	18	None	add
9	[BUG]  [BUGGY]    result  +=  getCount(values.size()  -  1);  [CE]  cannot  find  symbol  values  [FE]        AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(values.size()  -  1);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(values.size()  -  1);		non-compiled	[CE]  cannot  find  symbol  values	18	None	add
10	[BUG]  [BUGGY]    result  +=  getCount(values.get(0));  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(values.get(0));  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(values.get(0));		non-compiled	[CE]  cannot  find  symbol  values	18	None	add
11	[BUG]  [BUGGY]    result  +=  getCount(values.size());  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(values.size());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(values.size());		non-compiled	[CE]  cannot  find  symbol  values	18	None	add
12	[BUG]  [BUGGY]  return  getCumFreq();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]    Long  value  =  freqTable.lastKey();  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    Long  value  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    Long  value  =  freqTable.lastKey();		non-compiled	[CE]  incompatible  types	18	None	add
14	[BUG]  [BUGGY]    long  value  =  freqTable.lastKey();  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  value  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  value  =  freqTable.lastKey();		non-compiled	[CE]  incompatible  types	18	None	add
15	[BUG]  [BUGGY]    long  lastValue  =  freqTable.lastKey();  [CE]  incompatible  types  [FE]        AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  lastValue  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  lastValue  =  freqTable.lastKey();		non-compiled	[CE]  incompatible  types	18	None	add
16	[BUG]  [BUGGY]    Long  value  =  freqTable.nextKey();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    Long  value  =  freqTable.nextKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    Long  value  =  freqTable.nextKey();		non-compiled	[CE]  cannot  find  symbol	18	None	add
17	[BUG]  [BUGGY]    Long  value  =  freqTable.getValue(v);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    Long  value  =  freqTable.getValue(v);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    Long  value  =  freqTable.getValue(v);		non-compiled	[CE]  cannot  find  symbol	18	None	add
