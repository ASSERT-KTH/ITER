bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.values.add(obj,  count);  [CE]  cannot  find  symbol  values  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.add(obj,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.add(obj,  count);	  this.values.add(obj);    	non-compiled	[CE]  cannot  find  symbol  values	40	None	replace
2	[BUG]  [BUGGY]  this.values.add(count);  [CE]  cannot  find  symbol  values  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.add(count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.add(count);	  this.values.add(obj);    	non-compiled	[CE]  cannot  find  symbol  values	40	None	replace
3	[BUG]  [BUGGY]  this.values.add(freqTable,  obj);  [CE]  cannot  find  symbol  values  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.add(freqTable,  obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.add(freqTable,  obj);	  this.values.add(obj);    	non-compiled	[CE]  cannot  find  symbol  values	40	None	replace
4	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  	108	None	replace
5	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	108	None	replace
6	[BUG]  [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	108	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    	compilable	  [FE]  AssertionFailedError  	15	2	replace
8	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    	compilable	  [FE]  AssertionFailedError  	15	2	replace
9	[BUG]  [BUGGY]  addValue(obj,  count,  freqTable);  [CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Long,TreeMap<Comparable<?>,Long>)  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  freqTable);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  count,  freqTable);	  addValue(obj,    count);    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Long,TreeMap<Comparable<?>,Long>)	41	None	replace
10	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	addValue(obj,  count,  v);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
11	[BUG]  [BUGGY]  addValue(obj,  count,  v);  [FE]  NoSuchMethodError  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  count,  v);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
12	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	addValue(obj,  count,  Integer.MAX_VALUE);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
13	[BUG]  [BUGGY]  addValue(obj,  count,  Integer.MAX_VALUE);  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  count,  Integer.MAX_VALUE);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
14	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  v,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	addValue(obj,  v,  count);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
15	[BUG]  [BUGGY]  addValue(obj,  v,  count);  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  v,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  v,  count);	  addValue(obj,    count);    	compilable	  [FE]  NoSuchMethodError  	41	8	replace
16	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Integer.valueOf(count.longValue()),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,    Integer.valueOf(count.longValue()));    	compilable	  [FE]  NoSuchMethodError  	95	8	replace
17	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count);  [FE]  NoSuchMethodError  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,    Integer.valueOf(count.longValue()));    	compilable	  [FE]  NoSuchMethodError  	95	8	replace
18	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(v.longValue()),  count,  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
19	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count,  v);  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()),  count,  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
20	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
21	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  v);  [FE]  NoSuchMethodError  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
22	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
23	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  count);  [FE]  NoSuchMethodError  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue(),  v),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	compilable	  [FE]  NoSuchMethodError  	20	8	replace
24	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  parse(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	parse(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    parse(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  NoSuchMethodError  	49	8	replace
25	[BUG]  [BUGGY]  parse(obj,  Long.valueOf(count.longValue()));  [FE]  NoSuchMethodError  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  parse(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	parse(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    parse(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  NoSuchMethodError  	49	8	replace
26	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
27	[BUG]  [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
28	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
29	[BUG]  [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
30	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
31	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	30	8	replace
32	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	this.freqTable.put(obj,  v);	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
33	[BUG]  [BUGGY]  this.freqTable.put(obj,  v);  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  v);	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
34	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	this.freqTable.put(obj,  Long.valueOf(0));	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
35	[BUG]  [BUGGY]  this.freqTable.put(obj,  Long.valueOf(0));  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  Long.valueOf(0));	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
36	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	this.freqTable.put(obj,  Long.valueOf(1));	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
37	[BUG]  [BUGGY]  this.freqTable.put(obj,  Long.valueOf(1));  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  Long.valueOf(1));	          this.freqTable.put(obj,    null);    	compilable	  [FE]  NoSuchMethodError  	111	8	replace
38	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
39	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
40	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
41	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [FE]  NoSuchMethodError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
42	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
43	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
44	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
45	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [FE]  NoSuchMethodError  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
46	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
47	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  [FE]  NoSuchMethodError  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  NoSuchMethodError  	12	6	add
48	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));	  freqTable.put(obj,    Integer.valueOf(count.longValue()    /    1));    	compilable	  [FE]  NoSuchMethodError  	78	8	replace
49	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));	  freqTable.put(obj,    Integer.valueOf(count.longValue()    /    1));    	compilable	  [FE]  NoSuchMethodError  	78	8	replace
50	[BUG]  [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                obj        =        Long.valueOf(count.longValue()        +        1);        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	25	None	add
51	[BUG]  [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                obj        =        Long.valueOf(count.longValue()        +        1);        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	25	None	add
52	[BUG]  [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Integer.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Integer.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                obj        =        Long.valueOf(count.longValue()        +        1);        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Integer.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	25	None	add
53	[BUG]  [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1;  obj  =  Long.valueOf(count.longValue()  +  1);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1;  obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                obj        =        Long.valueOf(count.longValue()        +        1);        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1;  obj  =  Long.valueOf(count.longValue()  +  1);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	25	None	add
54	[BUG]  [BUGGY]          addValue(obj);  addValue(obj);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    StackOverflowError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          addValue(obj);  addValue(obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                addValue(obj);    addValue(obj);	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	71	None	add
55	[BUG]  [BUGGY]          addValue(obj);  if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]      StackOverflowError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          addValue(obj);  if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                addValue(obj);    if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	71	None	add
56	[BUG]  [BUGGY]          addValue(obj);  if(obj  ==  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        StackOverflowError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          addValue(obj);  if(obj  ==  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                addValue(obj);    if(obj  ==  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	71	None	add
57	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  *  1));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()  *  1));	  freqTable.put(obj,    Long.valueOf(v.longValue()    /    1));    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	5	None	replace
58	[BUG]  [BUGGY]  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    FIREBIRD.put(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	65	None	replace
59	[BUG]  [BUGGY]  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	FIREBIRD.put(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    FIREBIRD.put(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	65	None	replace
60	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Long.valueOf(count.intValue());  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Long.valueOf(count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.intValue());    obj  =  Long.valueOf(count.intValue());	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	83	None	add
61	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Integer.valueOf(count.intValue());  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Integer.valueOf(count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.intValue());    obj  =  Integer.valueOf(count.intValue());	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	83	None	add
62	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  long.valueOf(count.intValue());  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  long.valueOf(count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.intValue());    obj  =  long.valueOf(count.intValue());	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	83	None	add
63	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  L.valueOf(count.intValue());  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  L.valueOf(count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.intValue());    obj  =  L.valueOf(count.intValue());	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	83	None	add
64	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	46	None	add
65	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Integer.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	46	None	add
66	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	46	None	add
67	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  for(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  for(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    for(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	46	None	add
68	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	46	None	add
69	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  *  1));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()  *  1));	  freqTable.put(obj,    Long.valueOf(count.doubleValue()    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	91	None	replace
70	[BUG]  [BUGGY]  freqTable.put(obj,  0L);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  0L);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  0L);	  freqTable.put(obj,    0);    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	39	None	replace
71	[BUG]  [BUGGY]  freqTable.put(obj,  0,  count);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  0,  count);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  0,  count);	  freqTable.put(obj,    0);    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	39	None	replace
72	[BUG]  [BUGGY]  freqTable.put(obj,  count);  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  count);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  count);	  freqTable.put(obj,    0);    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	39	None	replace
73	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue(),  count));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue(),  count));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue(),  count));	  freqTable.put(obj,    Long.valueOf(count.longValue(),    v));    	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	18	None	replace
74	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	107	None	add
75	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	107	None	add
76	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	107	None	add
77	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  no  suitable  method  found  for  addValue(Object,<null>)  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  no  suitable  method  found  for  addValue(Object,<null>)	14	None	add
78	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  cannot  find  symbol  JSError  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  cannot  find  symbol  JSError	14	None	add
79	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  Integer  count  =  Integer.valueOf(count.longValue()  *  1));  [CE]  cannot  find  symbol  JSError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  Integer  count  =  Integer.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    Integer  count  =  Integer.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  cannot  find  symbol  JSError	14	None	add
80	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  parse(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  cannot  find  symbol  JSError  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  parse(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    parse(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  cannot  find  symbol  JSError	14	None	add
81	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  Integer  count  =  Integer.valueOf(count.longValue()  *  1);  [CE]  cannot  find  symbol  JSError  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  Integer  count  =  Integer.valueOf(count.longValue()  *  1);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    Integer  count  =  Integer.valueOf(count.longValue()  *  1);	  	non-compiled	[CE]  cannot  find  symbol  JSError	14	None	add
82	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1);  [CE]  cannot  find  symbol  JSError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.doubleValue()  +  1);	  obj    =    Long.valueOf(count.longValue());    	non-compiled	[CE]  cannot  find  symbol  JSError	2	None	replace
83	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue()  +  2);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue()  +  2);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.longValue()  +  2);	  obj    =    Long.valueOf(count.longValue());    	non-compiled	[CE]  	2	None	replace
84	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(2));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(2));	  	non-compiled	[CE]  	88	None	add
85	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(3));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  	88	None	add
86	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Integer.valueOf(2));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Integer.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Integer.valueOf(2));	  	non-compiled	[CE]  	88	None	add
87	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(4));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(4));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(4));	  	non-compiled	[CE]  	88	None	add
88	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  parse(obj,  Long.valueOf(2));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  parse(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(2));    parse(obj,  Long.valueOf(2));	  	non-compiled	[CE]  	88	None	add
89	[BUG]  [BUGGY]  addValue(v,  obj);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(v,  obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(v,  obj);	  addValue(obj,    v);    	non-compiled	[CE]  	42	None	replace
90	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
91	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
92	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
93	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  }  catch(IllegalArgumentException  iae)  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  }  catch(IllegalArgumentException  iae)  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  }  catch(IllegalArgumentException  iae)  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
94	[BUG]  [BUGGY]  this.freqTable.put(obj,  new  Integer(0));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  new  Integer(0));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  new  Integer(0));	          this.freqTable.put(obj,    new    Integer(count));    	non-compiled	[CE]  	112	None	replace
95	[BUG]  [BUGGY]  this.freqTable.put(obj,  new  Integer(count),  v);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  new  Integer(count),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  new  Integer(count),  v);	          this.freqTable.put(obj,    new    Integer(count));    	non-compiled	[CE]  	112	None	replace
96	[BUG]  [BUGGY]  this.freqTable.put(obj,  new  Integer(0,  count));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  new  Integer(0,  count));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  new  Integer(0,  count));	          this.freqTable.put(obj,    new    Integer(count));    	non-compiled	[CE]  	112	None	replace
97	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  v);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  v);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  v);	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    v);    	non-compiled	[CE]  	81	None	replace
98	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  v);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  v);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  v);	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    v);    	non-compiled	[CE]  	81	None	replace
99	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	104	None	replace
100	[BUG]  [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	104	None	replace
101	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1)  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1)  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1)	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	104	None	replace
102	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue());  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue());	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    L.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  	99	None	replace
103	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue()  +  1);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.longValue());  obj  =  L.valueOf(count.longValue()  +  1);	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    L.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  	99	None	replace
104	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(2)  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(2)  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(2)  +  1);	  freqTable.put(obj,    Integer.valueOf(2));    	non-compiled	[CE]  	100	None	replace
105	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	63	None	add
106	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	63	None	add
107	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	63	None	add
108	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	63	None	add
109	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1);  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1);  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1);  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	63	None	add
110	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  count.longValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  count.longValue());	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    count.longValue());    	non-compiled	[CE]  	59	None	replace
111	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue());	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    count.longValue());    	non-compiled	[CE]  	59	None	replace
112	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue()  +  1);	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    count.longValue());    	non-compiled	[CE]  	59	None	replace
113	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    count.longValue());    	non-compiled	[CE]  	59	None	replace
114	[BUG]  [BUGGY]  parseValue(obj,  Long.valueOf(0));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  parseValue(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	parseValue(obj,  Long.valueOf(0));	          freqTable.put(obj,    Long.valueOf(0));    parseValue(obj,    Long.valueOf(0));    	non-compiled	[CE]  	11	None	replace
115	[BUG]  [BUGGY]  ParseValue(obj,  Long.valueOf(0));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  ParseValue(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	ParseValue(obj,  Long.valueOf(0));	          freqTable.put(obj,    Long.valueOf(0));    parseValue(obj,    Long.valueOf(0));    	non-compiled	[CE]  	11	None	replace
116	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  1);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj    +    1);    	non-compiled	[CE]  	74	None	replace
117	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  2);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  2);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj    +    1);    	non-compiled	[CE]  	74	None	replace
118	[BUG]  [BUGGY]  Integer  i  =  freqTable.get(obj);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  i  =  freqTable.get(obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  i  =  freqTable.get(obj);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj);    	non-compiled	[CE]  	98	None	replace
119	[BUG]  [BUGGY]  int  i  =  freqTable.get(obj);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  int  i  =  freqTable.get(obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	int  i  =  freqTable.get(obj);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj);    	non-compiled	[CE]  	98	None	replace
120	[BUG]  [BUGGY]  Integer  i  =  freqTable.get(obj,  count);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  i  =  freqTable.get(obj,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  i  =  freqTable.get(obj,  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj);    	non-compiled	[CE]  	98	None	replace
121	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(1);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(0);    	non-compiled	[CE]  	115	None	replace
122	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	67	None	add
123	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	67	None	add
124	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  	67	None	add
125	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	67	None	add
126	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	67	None	add
127	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	38	None	replace
128	[BUG]  [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	38	None	replace
129	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  }  catch(NoClassDefFoundError  e)  {  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  }  catch(NoClassDefFoundError  e)  {  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  }  catch(NoClassDefFoundError  e)  {  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  	38	None	replace
130	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  /  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()  /  1));	  freqTable.put(obj,    Long.valueOf(count.doubleValue()    +    1));    	non-compiled	[CE]  	55	None	replace
131	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	103	None	add
132	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put	  	non-compiled	[CE]  	103	None	add
133	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,	  	non-compiled	[CE]  	103	None	add
134	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	103	None	add
135	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	103	None	add
136	[BUG]  [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(1));    	non-compiled	[CE]  	9	None	replace
137	[BUG]  [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(1));    	non-compiled	[CE]  	9	None	replace
138	[BUG]  [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(1));    	non-compiled	[CE]  	9	None	replace
139	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  v);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  v);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1),  v);	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    v);    	non-compiled	[CE]  	77	None	replace
140	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  v);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  v);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  v);	  freqTable.put(obj,    Integer.valueOf(count.longValue()),    v);    	non-compiled	[CE]  	77	None	replace
141	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  2);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  +  2);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj,    count);    	non-compiled	[CE]  	73	None	replace
142	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  *  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  *  2);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count  *  2);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj,    count);    	non-compiled	[CE]  	73	None	replace
143	[BUG]  [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count);	          TreeMap    <    Long,Object>    freqTable    =    new    TreeMap    <    Long,Object>();    	non-compiled	[CE]  	109	None	replace
144	[BUG]  [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(freqTable.size());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(freqTable.size());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(freqTable.size());	          TreeMap    <    Long,Object>    freqTable    =    new    TreeMap    <    Long,Object>();    	non-compiled	[CE]  	109	None	replace
145	[BUG]  [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count.longValue());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count.longValue());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>(count.longValue());	          TreeMap    <    Long,Object>    freqTable    =    new    TreeMap    <    Long,Object>();    	non-compiled	[CE]  	109	None	replace
146	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(0),  count  +  1);	  freqTable.put(obj,    Integer.valueOf(0),    count);    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MIN_VALUE);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MIN_VALUE);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MIN_VALUE);	  freqTable.put(obj,    Integer.valueOf(0),    count);    	non-compiled	[CE]  	23	None	replace
148	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count.longValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(0),  count.longValue());	  freqTable.put(obj,    Integer.valueOf(0),    count);    	non-compiled	[CE]  	23	None	replace
149	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MAX_VALUE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MAX_VALUE);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(0),  count,  Integer.MAX_VALUE);	  freqTable.put(obj,    Integer.valueOf(0),    count);    	non-compiled	[CE]  	23	None	replace
150	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.MIN_VALUE);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.MIN_VALUE);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.MIN_VALUE);	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Integer.valueOf(0));    	non-compiled	[CE]  	10	None	replace
151	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.intValue(),    count.longValue()));    	non-compiled	[CE]  	53	None	replace
152	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.longValue()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.longValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.longValue()));	  freqTable.put(obj,    Integer.valueOf(count.intValue(),    count.longValue()));    	non-compiled	[CE]  	53	None	replace
153	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.doubleValue()  +  1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.doubleValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.doubleValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.intValue(),    count.longValue()));    	non-compiled	[CE]  	53	None	replace
154	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  2));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()  +  2));	  freqTable.put(obj,    Integer.valueOf(count.intValue(),    count.longValue()));    	non-compiled	[CE]  	53	None	replace
155	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	16	None	add
156	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	16	None	add
157	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  parse(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  parse(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    parse(obj,  Long.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  	16	None	add
158	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));	  	non-compiled	[CE]  	16	None	add
159	[BUG]  [BUGGY]  addValue(freqTable.get(obj));  [CE]  [FE]    StackOverflowError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(freqTable.get(obj));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(freqTable.get(obj));	          addValue(obj);    	non-compiled	[CE]  	72	None	replace
160	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  count.intValue());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1),  count.intValue());	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    count.intValue());    	non-compiled	[CE]  	52	None	replace
161	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.intValue());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.intValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1,  count.intValue());	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    count.intValue());    	non-compiled	[CE]  	52	None	replace
162	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue()  +  1);	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    count.intValue());    	non-compiled	[CE]  	52	None	replace
163	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.intValue()  +  1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.intValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.intValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.intValue()),    count.intValue());    	non-compiled	[CE]  	52	None	replace
164	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));	  	non-compiled	[CE]  	8	None	add
165	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));	  	non-compiled	[CE]  not  a  statement	8	None	add
166	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));	  	non-compiled	[CE]  not  a  statement	8	None	add
167	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(1));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(1));	  	non-compiled	[CE]  not  a  statement	8	None	add
168	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(0));	  	non-compiled	[CE]  not  a  statement	8	None	add
169	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	102	None	replace
170	[BUG]  [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Long)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	102	None	replace
171	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	101	None	add
172	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	101	None	add
173	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  not  a  statement	101	None	add
174	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  not  a  statement	101	None	add
175	[BUG]  [BUGGY]  addValue(obj,  count,  null);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  count,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  count,  null);	  addValue(obj,    null);    	non-compiled	[CE]  not  a  statement	43	None	replace
176	[BUG]  [BUGGY]  addValue(obj,  v,  null);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  v,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  v,  null);	  addValue(obj,    null);    	non-compiled	[CE]  not  a  statement	43	None	replace
177	[BUG]  [BUGGY]  addValue(obj,  null,  count);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  null,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  null,  count);	  addValue(obj,    null);    	non-compiled	[CE]  not  a  statement	43	None	replace
178	[BUG]  [BUGGY]  addValue(v,  obj,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(v,  obj,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(v,  obj,  null);	  addValue(obj,    null);    	non-compiled	[CE]  not  a  statement	43	None	replace
179	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(count.intValue()));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(count.intValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    freqTable.put(obj,  Long.valueOf(count.intValue()));	  	non-compiled	[CE]  not  a  statement	75	None	add
180	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  FIREBIRD.put(obj,  Long.valueOf(count.intValue()));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  FIREBIRD.put(obj,  Long.valueOf(count.intValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    FIREBIRD.put(obj,  Long.valueOf(count.intValue()));	  	non-compiled	[CE]  not  a  statement	75	None	add
181	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  parse(obj,  Long.valueOf(count.intValue()));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  parse(obj,  Long.valueOf(count.intValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    parse(obj,  Long.valueOf(count.intValue()));	  	non-compiled	[CE]  not  a  statement	75	None	add
182	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  Integer  count  =  Integer.valueOf(count.intValue());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  Integer  count  =  Integer.valueOf(count.intValue());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    Integer  count  =  Integer.valueOf(count.intValue());	  	non-compiled	[CE]  not  a  statement	75	None	add
183	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  not  a  statement	75	None	add
184	[BUG]  [BUGGY]  this.values.addValue(obj,  count);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.addValue(obj,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.addValue(obj,  count);	  this.values.addValue(obj);    	non-compiled	[CE]  not  a  statement	80	None	replace
185	[BUG]  [BUGGY]  this.values.addValue(v);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.addValue(v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.addValue(v);	  this.values.addValue(obj);    	non-compiled	[CE]  not  a  statement	80	None	replace
186	[BUG]  [BUGGY]  this.values.addValue(count);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.values.addValue(count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.addValue(count);	  this.values.addValue(obj);    	non-compiled	[CE]  not  a  statement	80	None	replace
187	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  not  a  statement	93	None	replace
188	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  not  a  statement	93	None	replace
189	[BUG]  [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Long)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    	non-compiled	[CE]  not  a  statement	93	None	replace
190	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));	  	non-compiled	[CE]  not  a  statement	6	None	add
191	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));	  	non-compiled	[CE]  not  a  statement	6	None	add
192	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(0));	  	non-compiled	[CE]  not  a  statement	6	None	add
193	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));	  	non-compiled	[CE]  not  a  statement	6	None	add
194	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  NoSuchMethodError  	6	7	add
195	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [FE]  NoSuchMethodError  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  NoSuchMethodError  	6	7	add
196	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue(),  count.longValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Integer.valueOf(v.intValue(),  count.longValue()));	  freqTable.put(obj,    Integer.valueOf(v.intValue()));    	compilable	  [FE]  NoSuchMethodError  	21	7	replace
197	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue(),  count.longValue()));  [FE]  NoSuchMethodError  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue(),  count.longValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.intValue(),  count.longValue()));	  freqTable.put(obj,    Integer.valueOf(v.intValue()));    	compilable	  [FE]  NoSuchMethodError  	21	7	replace
198	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Integer.valueOf(v.intValue()  *  1));	  freqTable.put(obj,    Integer.valueOf(v.intValue()    /    1));    	compilable	  [FE]  NoSuchMethodError  	22	7	replace
199	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()  *  1));  [FE]  NoSuchMethodError  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.intValue()  *  1));	  freqTable.put(obj,    Integer.valueOf(v.intValue()    /    1));    	compilable	  [FE]  NoSuchMethodError  	22	7	replace
200	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
201	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [FE]  NoSuchMethodError  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
202	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Integer.valueOf(1));  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Integer.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Integer.valueOf(1));	  	non-compiled	[CE]  'catch'  without  'try'	44	None	add
203	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  FIREBIRD.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(1));    FIREBIRD.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
204	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  FIREBIRD.put(obj,  Long.valueOf(1));  [FE]  NoSuchMethodError  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  FIREBIRD.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(1));    FIREBIRD.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
205	[BUG]  [BUGGY]  [FE]  NoSuchMethodError  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
206	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [FE]  NoSuchMethodError  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(1));    freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  NoSuchMethodError  	44	7	add
207	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
208	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
209	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
210	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1);  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1);	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
211	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
212	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
213	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
214	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	36	None	replace
215	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  'catch'  without  'try'	86	None	add
216	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  'catch'  without  'try'	86	None	add
217	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Integer.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  'catch'  without  'try'	86	None	add
218	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Long.valueOf(0));	  	non-compiled	[CE]  'catch'  without  'try'	86	None	add
219	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(3));  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(3));	  	non-compiled	[CE]  'catch'  without  'try'	86	None	add
220	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(Count.longValue()));  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(Count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(Count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,    Long.valueOf(Count.longValue()));    	non-compiled	[CE]  'catch'  without  'try'	97	None	replace
221	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.longValue());    obj  =  Long.valueOf(count.longValue());	  	non-compiled	[CE]  'catch'  without  'try'	1	None	add
222	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  Integer.valueOf(count.longValue());  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  Integer.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.longValue());    obj  =  Integer.valueOf(count.longValue());	  	non-compiled	[CE]  'catch'  without  'try'	1	None	add
223	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  long.valueOf(count.longValue());  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.longValue());  obj  =  long.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.longValue());    obj  =  long.valueOf(count.longValue());	  	non-compiled	[CE]  'catch'  without  'try'	1	None	add
224	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  'catch'  without  'try'	105	None	add
225	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  'catch'  without  'try'	105	None	add
226	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  FreqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  FreqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    FreqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  'catch'  without  'try'	105	None	add
227	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  'catch'  without  'try'	105	None	add
228	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable  ==  null)  {  freqTable.put(obj,  null);  }  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable  ==  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    if(freqTable!=  null)  {  freqTable.put(obj,  null);  if(freqTable  ==  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  'catch'  without  'try'	105	None	add
229	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count  -  1);  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count  -  1);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()),  count  -  1);	  freqTable.put(obj,    Long.valueOf(v.longValue()),    count);    	non-compiled	[CE]  'catch'  without  'try'	19	None	replace
230	[BUG]  [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.get(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
231	[BUG]  [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()));  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.get(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.get(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
232	[BUG]  [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.get(obj,  Long.valueOf(count.longValue()  *  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.get(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
233	[BUG]  [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  /  2));  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.get(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.get(obj,  Long.valueOf(count.longValue()  /  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.get(obj,    Long.valueOf(count.longValue()    /    1));    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
234	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	92	None	add
235	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	92	None	add
236	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    ClassCastException(   "   ");    }    if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( "   ");  }	  	non-compiled	[CE]  'catch'  without  'try'	92	None	add
237	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  Long.valueOf(count.longValue()));  }  catch  (NumberFormatException  nfe)  {  }  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  Long.valueOf(count.longValue()));  }  catch  (NumberFormatException  nfe)  {  }  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  Long.valueOf(count.longValue()));  }  catch  (NumberFormatException  nfe)  {  }	  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,    Long.valueOf(count.longValue()));    	non-compiled	[CE]  'catch'  without  'try'	47	None	replace
238	[BUG]  [BUGGY]  this.freqTable.put(obj,  new  Integer(v),  count);  [CE]  'catch'  without  'try'  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  this.freqTable.put(obj,  new  Integer(v),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.freqTable.put(obj,  new  Integer(v),  count);	          this.freqTable.put(obj,    new    Integer(v));    	non-compiled	[CE]  'catch'  without  'try'	113	None	replace
239	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  0);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  0);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj,    1);    	non-compiled	[CE]  	94	None	replace
240	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  2);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  2);	  TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj,    1);    	non-compiled	[CE]  	94	None	replace
241	[BUG]  [BUGGY]  n  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  n  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	n  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Long.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  	26	None	replace
242	[BUG]  [BUGGY]  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	=  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Long.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  	26	None	replace
243	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  *  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  *  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  *  1));	  freqTable.put(obj,    Integer.valueOf(count.intValue()    /    1));    	non-compiled	[CE]  	82	None	replace
244	[BUG]  [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(2));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(2));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(2));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(2));    	non-compiled	[CE]  	13	None	replace
245	[BUG]  [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(0));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(0));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(0));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(0));    	non-compiled	[CE]  	7	None	replace
246	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.doubleValue()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.doubleValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.doubleValue()));	  freqTable.put(obj,    Integer.valueOf(count.intValue()));    	non-compiled	[CE]  	51	None	replace
247	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  freqTable.put(obj,  null);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  freqTable.put(obj,  null);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);	  	non-compiled	[CE]  	29	None	add
248	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	29	None	add
249	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    if(v  instanceof  Integer)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	29	None	add
250	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  if(v  instanceof  Long)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    if(v  instanceof  Long)  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  	29	None	add
251	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    freqTable.put(obj,  null);	  	non-compiled	[CE]  	29	None	add
252	[BUG]  [BUGGY]  addValue(obj,  freqTable);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  freqTable);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  freqTable);	  addValue(freqTable,    obj);    	non-compiled	[CE]  	79	None	replace
253	[BUG]  [BUGGY]  addValue(obj,  ref);  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(obj,  ref);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  ref);	  addValue(freqTable,    obj);    	non-compiled	[CE]  'catch'  without  'try'	79	None	replace
254	[BUG]  [BUGGY]  addValue(freqTable,  obj,  count);  [CE]  'catch'  without  'try'  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(freqTable,  obj,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(freqTable,  obj,  count);	  addValue(freqTable,    obj);    	non-compiled	[CE]  'catch'  without  'try'	79	None	replace
255	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(3));  [CE]  'catch'  without  'try'  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(3));	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(3));    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
256	[BUG]  [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(3));    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
257	[BUG]  [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(3));  }  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(3));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  Integer)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(3));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(3));    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
258	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1,  count.doubleValue());  [CE]  'catch'  without  'try'  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1,  count.doubleValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.doubleValue()  +  1,  count.doubleValue());	  obj    =    Long.valueOf(count.doubleValue());    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
259	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1,  count.longValue());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.doubleValue()  +  1,  count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.doubleValue()  +  1,  count.longValue());	  obj    =    Long.valueOf(count.doubleValue());    	non-compiled	[CE]  not  a  statement	3	None	replace
260	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	31	None	add
261	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	31	None	add
262	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "   ");  }	  	non-compiled	[CE]  not  a  statement	31	None	add
263	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "	  	non-compiled	[CE]  not  a  statement	31	None	add
264	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));	  	non-compiled	[CE]  not  a  statement	61	None	add
265	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  -  1));  [CE]  'catch'  without  'try'  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  -  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  -  1));	  	non-compiled	[CE]  'catch'  without  'try'	61	None	add
266	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  obj  =  Long.valueOf(count.longValue()  -  1));  [CE]  'catch'  without  'try'  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  obj  =  Long.valueOf(count.longValue()  -  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    obj  =  Long.valueOf(count.longValue()  -  1));	  	non-compiled	[CE]  'catch'  without  'try'	61	None	add
267	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  -  1));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  -  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    freqTable.put(obj,  Integer.valueOf(count.longValue()  -  1));	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
268	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  Integer  count  =  Integer.valueOf(count.longValue()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  Integer  count  =  Integer.valueOf(count.longValue()  -  1);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    Integer  count  =  Integer.valueOf(count.longValue()  -  1);	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
269	[BUG]  [BUGGY]  parseFrequency(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  parseFrequency(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	parseFrequency(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    FIREBIRD.put(obj,    Long.valueOf(count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
270	[BUG]  [BUGGY]  PiedMap.put(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  PiedMap.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	PiedMap.put(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    FIREBIRD.put(obj,    Long.valueOf(count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
271	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue()  +  1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.intValue()  +  1);	  obj    =    Long.valueOf(count.intValue());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
272	[BUG]  [BUGGY]  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
273	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  catch(Exception  ex)  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  catch(Exception  ex)  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  catch(Exception  ex)  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
274	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.doubleValue()  +  1));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.doubleValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.doubleValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
275	[BUG]  [BUGGY]          this.freqTable.put(obj,  null);  this.freqTable.put(obj,  null);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          this.freqTable.put(obj,  null);  this.freqTable.put(obj,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                this.freqTable.put(obj,    null);    this.freqTable.put(obj,  null);	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
276	[BUG]  [BUGGY]          this.freqTable.put(obj,  null);  This.freqTable.put(obj,  null);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          this.freqTable.put(obj,  null);  This.freqTable.put(obj,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                this.freqTable.put(obj,    null);    This.freqTable.put(obj,  null);	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
277	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
278	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
279	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
280	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
281	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj  ==  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj  ==  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj  ==  null)  {  freqTable.put(obj,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
282	[BUG]  [BUGGY]  obj  =  Integer.valueOf(count.longValue());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Integer.valueOf(count.longValue());  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Integer.valueOf(count.longValue());	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Integer.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
283	[BUG]  [BUGGY]  obj  =  Integer.valueOf(count.longValue()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Integer.valueOf(count.longValue()  +  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Integer.valueOf(count.longValue()  +  1);	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Integer.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
284	[BUG]  [BUGGY]  Integer  count  =  Integer.valueOf(count.longValue());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  count  =  Integer.valueOf(count.longValue());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  count  =  Integer.valueOf(count.longValue());	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    count    =    Integer.valueOf(count.longValue());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
285	[BUG]  [BUGGY]  Integer  count  =  Integer.valueOf(count.intValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  count  =  Integer.valueOf(count.intValue());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  count  =  Integer.valueOf(count.intValue());	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    count    =    Integer.valueOf(count.longValue());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
286	[BUG]  [BUGGY]  int  count  =  Integer.valueOf(count.longValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  int  count  =  Integer.valueOf(count.longValue());  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	int  count  =  Integer.valueOf(count.longValue());	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    count    =    Integer.valueOf(count.longValue());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
287	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
288	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
289	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
290	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  v);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  v);	  freqTable.put(obj,    Long.valueOf(count.doubleValue(),    v));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
291	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.doubleValue(),  count));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.doubleValue(),  count));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.doubleValue(),  count));	  freqTable.put(obj,    Long.valueOf(count.doubleValue(),    v));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
292	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  count);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v),  count);	  freqTable.put(obj,    Long.valueOf(count.doubleValue(),    v));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
293	[BUG]  [BUGGY]  Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj,    Long.valueOf(i.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
294	[BUG]  [BUGGY]  Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()),  v);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	Integer  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()),  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj,    Long.valueOf(i.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
295	[BUG]  [BUGGY]  int  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  int  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	int  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj,    Long.valueOf(i.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
296	[BUG]  [BUGGY]  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	i  =  freqTable.get(obj,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer    i    =    freqTable.get(obj,    Long.valueOf(i.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
297	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v,  v);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v,  v);	  freqTable.put(obj,    Long.valueOf(count.doubleValue()),    v);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
298	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.doubleValue()),  count);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.doubleValue()),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.doubleValue()),  count);	  freqTable.put(obj,    Long.valueOf(count.doubleValue()),    v);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
299	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1,  count.longValue()));	  freqTable.put(obj,    Integer.valueOf(count.longValue(),    count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
300	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  Long.valueOf(count.longValue()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  Long.valueOf(count.longValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue(),  Long.valueOf(count.longValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.longValue(),    count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
301	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.intValue()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.intValue()));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.intValue()));	  freqTable.put(obj,    Integer.valueOf(count.longValue(),    count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
302	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  -  1));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  -  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()  -  1));	  freqTable.put(obj,    Long.valueOf(v.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
303	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
304	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(obj!=  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
305	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(obj  ==  null)  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
306	[BUG]  [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
307	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(count!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
308	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue())  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue())  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue())	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
309	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
310	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()));        freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
311	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  parse(v,  Long.valueOf(count.longValue()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  parse(v,  Long.valueOf(count.longValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()));  parse(v,  Long.valueOf(count.longValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    parse(obj,    Long.valueOf(count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
312	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(Count.longValue()  -  1));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(Count.longValue()  -  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    freqTable.put(obj,  Long.valueOf(Count.longValue()  -  1));	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
313	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
314	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    -    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
315	[BUG]  [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException(   "   ");  }  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    MathRuntimeException.createIllegalArgumentException(   "   ");    }    freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
316	[BUG]  [BUGGY]  if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Long.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
317	[BUG]  [BUGGY]  if(count  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(count  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(count  ==  null)  {  obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  }	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Long.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
318	[BUG]  [BUGGY]  if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  obj  =  Long.valueOf(count.longValue());  obj  =  Long.valueOf(count.longValue());  }	          obj    =    Long.valueOf(count.longValue()    +    1);    obj    =    Long.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
319	[BUG]  [BUGGY]  addValue(null,  obj,  v);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  addValue(null,  obj,  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(null,  obj,  v);	  addValue(obj,    v);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
320	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
321	[BUG]  [BUGGY]          this.freqTable.put(obj,  null);  this.freqTable.get(obj,  null);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          this.freqTable.put(obj,  null);  this.freqTable.get(obj,  null);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                this.freqTable.put(obj,    null);    this.freqTable.get(obj,  null);	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
322	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
323	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Integer.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
324	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  2));	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
325	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(Count.longValue()  *  1));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  Long.valueOf(Count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  Long.valueOf(Count.longValue()  *  1));	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
326	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  L.valueOf(count.longValue()  *  1));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.put(obj,  L.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.put(obj,  L.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
327	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(3));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));  freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(3));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  illegal  start  of  expression	86	None	add
328	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  Long.valueOf(count.longValue()  +  1));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  Long.valueOf(count.longValue()  +  1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  Long.valueOf(count.longValue()  +  1));	  freqTable.put(obj,    Integer.valueOf(count.intValue(),    count.longValue()));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
329	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  }  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  }	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
330	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(2));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(3));	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
331	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(0));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
332	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Long.valueOf(count.intValue();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  obj  =  Long.valueOf(count.intValue());  obj  =  Long.valueOf(count.intValue();  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj    =    Long.valueOf(count.intValue());    obj  =  Long.valueOf(count.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
333	[BUG]  [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        Long.valueOf(0));        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));  freqTable.put(obj,  Long.valueOf(1));	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
334	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()),  v);	  freqTable.put(obj,    Long.valueOf(v.longValue()),    count);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
335	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    *    1));    freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
336	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
337	[BUG]  [BUGGY]  try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	try  {  freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
338	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	          freqTable.put(obj,    null);    if(obj!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    MathRuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
339	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  try  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  try  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    try  {  freqTable.put(obj,  null);  freqTable.put(obj,  null);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
340	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.get(obj,  null);  freqTable.put(obj,  null);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.get(obj,  null);  freqTable.put(obj,  null);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    freqTable.get(obj,  null);  freqTable.put(obj,  null);	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
341	[BUG]  [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  freqTable.put(obj,  null;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null);  freqTable.put(obj,  null;  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                freqTable.put(obj,        null);        freqTable.put(obj,    null);    freqTable.put(obj,  null);  freqTable.put(obj,  null;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
342	[BUG]  [BUGGY]  freqTable.put(obj,  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  1);  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  1);	  freqTable.put(obj,    0);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
343	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  v,  count);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  v,  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()),  v,  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v,    v);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
344	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  +  1),  count);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  +  1),  count);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()  +  1),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()    +    1),    v);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
345	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1),  v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1),  v);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  /  1),  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()    +    1),    v);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
346	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  Long.valueOf(0));  }  else  {  freqTable.put(obj,  Long.valueOf(1));  }	          freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,    Long.valueOf(1));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
347	[BUG]  [BUGGY]          addValue(obj);  if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "Instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]          addValue(obj);  if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "Instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	                addValue(obj);    if(obj!=  null)  {  addValue(obj);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( "Instance  of  class  {  0  }  not  comparable  to  existing  values   ",  v.getClass().getName());  }	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
348	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Integer.valueOf(count.intValue()));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Integer.valueOf(count.intValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    freqTable.put(obj,  Integer.valueOf(count.intValue()));	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
349	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(Count.intValue()));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  freqTable.put(obj,  Long.valueOf(Count.intValue()));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    freqTable.put(obj,  Long.valueOf(Count.intValue()));	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
350	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  Integer  i  =  freqTable.get(obj);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  Integer  i  =  freqTable.get(obj);  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.intValue()));    Integer  i  =  freqTable.get(obj);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
351	[BUG]  [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  ==  null)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
352	[BUG]  [BUGGY]  if(v  instanceof  TreeMap)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  if(v  instanceof  TreeMap)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	if(v  instanceof  TreeMap)  {  freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          freqTable.put(obj,    null);    if(freqTable!=    null)    {    freqTable.put(obj,    null);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
353	[BUG]  [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  2));  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {      [BUGGY]  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  2));  [BUGGY]      }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(       "instance  of  class  {0}  not  comparable  to  existing  values     ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,        Long.valueOf(count.longValue()        /        1));        freqTable.put(obj,    Long.valueOf(count.longValue()    /    2));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  2));	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
