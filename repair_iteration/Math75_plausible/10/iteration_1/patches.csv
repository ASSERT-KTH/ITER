bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  obj  =  Long.valueOf(count.longValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	obj  =  Long.valueOf(count.longValue());	      obj    =    Long.valueOf(count.longValue()    +    1);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
2	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.longValue());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  obj  =  Long.valueOf(count.longValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.longValue());	      obj    =    Long.valueOf(count.longValue()    +    1);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
3	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.doubleValue());  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  obj  =  Long.valueOf(count.doubleValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.doubleValue());	      obj    =    Long.valueOf(count.longValue()    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	10	None	replace
4	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()));	      freqTable.put(obj,    Long.valueOf(v.longValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
5	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  /  1));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()  /  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()  /  1));	      freqTable.put(obj,    Long.valueOf(v.longValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
7	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(0));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(0));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
9	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(1));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
10	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(0));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Integer.valueOf(0));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Integer.valueOf(0));	  	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	15	None	add
11	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  parseValue(obj,  Long.valueOf(0));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  parseValue(obj,  Long.valueOf(0));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    parseValue(obj,  Long.valueOf(0));	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
13	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(2));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
15	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
17	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
18	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v));  [CE]  no  suitable  method  found  for  valueOf(long,Comparable<CAP#1>)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue(),  v));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue(),  v));	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,Comparable<CAP#1>)	13	None	replace
19	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(v.longValue()),  count);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(v.longValue()),  count);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  v,  v);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>,Comparable<CAP#3>)  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  v,  v);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()),  v,  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v);    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>,Comparable<CAP#3>)	13	None	replace
21	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.intValue()));	      freqTable.put(obj,    Integer.valueOf(v.intValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
22	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()  /  1));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.intValue()  /  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.intValue()  /  1));	      freqTable.put(obj,    Integer.valueOf(v.intValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
23	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,Long)  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(0),  count);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(0),  count);	      freqTable.put(obj,    Integer.valueOf(0));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,Long)	18	None	replace
24	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(1));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]                AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(1));	      freqTable.put(obj,    Integer.valueOf(0));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	18	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);	  	compilable	  [FE]  AssertionFailedError  	9	4	add
26	[BUG]  [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1);	  	compilable	  [FE]  AssertionFailedError  	9	4	add
27	[BUG]  [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Long.valueOf(count.longValue()  +  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Long.valueOf(count.longValue()  +  1));	  	non-compiled	[CE]  ';'  expected	9	None	add
28	[BUG]  [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Integer.valueOf(count.longValue()  +  1);  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  Integer.valueOf(count.longValue()  +  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  Integer.valueOf(count.longValue()  +  1);	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	9	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  freqTable.put(obj,  null);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    freqTable.put(obj,  null);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
30	[BUG]  [BUGGY]      freqTable.put(obj,  null);  freqTable.put(obj,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  freqTable.put(obj,  null);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    freqTable.put(obj,  null);	  	compilable	  [FE]  AssertionFailedError  	19	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
32	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  MathRuntimeException.createIllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
34	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
36	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  MathRuntimeException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
38	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
39	[BUG]  [BUGGY]  freqTable.put(obj,  0);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,int)  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  0);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  0);	      freqTable.put(obj,    null);    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,int)	20	None	replace
40	[BUG]  [BUGGY]  this.values.add(obj);  [CE]  cannot  find  symbol  values  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  this.values.add(obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.add(obj);	      	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
41	[BUG]  [BUGGY]  addValue(obj,  count);  [CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Long)  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  addValue(obj,  count);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  count);	      	non-compiled	[CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Long)	7	None	replace
42	[BUG]  [BUGGY]  addValue(obj,  v);  [CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Comparable<CAP#2>)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  addValue(obj,  v);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  v);	      	non-compiled	[CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,Comparable<CAP#2>)	7	None	replace
43	[BUG]  [BUGGY]  addValue(obj,  null);  [CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,<null>)  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  addValue(obj,  null);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(obj,  null);	      	non-compiled	[CE]  no  suitable  method  found  for  addValue(Comparable<CAP#1>,<null>)	7	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(1));	      freqTable.put(obj,    Long.valueOf(0));    	compilable	  [FE]  AssertionFailedError  	16	3	replace
45	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(1));	      freqTable.put(obj,    Long.valueOf(0));    	compilable	  [FE]  AssertionFailedError  	16	3	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
47	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(count.longValue()));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
48	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  [CE]  cannot  find  symbol  FIREBIRD  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  cannot  find  symbol  FIREBIRD	1	None	add
49	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  parse(obj,  Long.valueOf(count.longValue()));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  parse(obj,  Long.valueOf(count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    parse(obj,  Long.valueOf(count.longValue()));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
50	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  count  =  Integer.valueOf(count.longValue());  [CE]  variable  count  is  already  defined  in  method  addValue(Comparable<?>)  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  count  =  Integer.valueOf(count.longValue());  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer  count  =  Integer.valueOf(count.longValue());	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  addValue(Comparable<?>)	1	None	add
51	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()));	      freqTable.put(obj,    Integer.valueOf(count.intValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	12	None	replace
52	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue());  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,int)  [FE]                AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()),  count.intValue());	      freqTable.put(obj,    Integer.valueOf(count.intValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,int)	12	None	replace
53	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()));  [CE]  no  suitable  method  found  for  valueOf(int,long)  [FE]                  AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue(),  count.longValue()));	      freqTable.put(obj,    Integer.valueOf(count.intValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int,long)	12	None	replace
54	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v);  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()),  v);	  freqTable.put(obj,    Long.valueOf(count.doubleValue()));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	5	None	replace
55	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  +  1));  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  +  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()  +  1));	  freqTable.put(obj,    Long.valueOf(count.doubleValue()));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	5	None	replace
56	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v));  [CE]  no  suitable  method  found  for  valueOf(double,Comparable<CAP#1>)  [FE]                AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue(),  v));	  freqTable.put(obj,    Long.valueOf(count.doubleValue()));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double,Comparable<CAP#1>)	5	None	replace
57	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()));	      freqTable.put(obj,    Integer.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	8	None	replace
58	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()));  [CE]  no  suitable  method  found  for  valueOf(long,long)  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue(),  count.longValue()));	      freqTable.put(obj,    Integer.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long,long)	8	None	replace
59	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue());  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()),  count.longValue());	      freqTable.put(obj,    Integer.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	8	None	replace
60	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.longValue()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.longValue()));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.longValue()));	      freqTable.put(obj,    Integer.valueOf(v.longValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
62	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  -  1));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
64	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
65	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  cannot  find  symbol  FIREBIRD  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    FIREBIRD.put(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  cannot  find  symbol  FIREBIRD	3	None	add
66	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	3	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
68	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  /  2));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
70	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.put(obj,  Long.valueOf(count.longValue()  *  1));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
71	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      addValue(obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        addValue(obj);	  	compilable	  [FE]  StackOverflowError  	6	5	add
72	[BUG]  [BUGGY]      addValue(obj);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      addValue(obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        addValue(obj);	  	compilable	  [FE]  StackOverflowError  	6	5	add
73	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count);  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  count);	      TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	11	None	replace
74	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  1);  [CE]  wrong  number  of  type  arguments;  required  2  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj  +  1);	      TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	11	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.intValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
76	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.intValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.intValue()));	  freqTable.put(obj,    Long.valueOf(count.longValue()));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
77	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  v);  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()),  v);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()),  v);	      freqTable.put(obj,    Integer.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	8	None	replace
78	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.longValue()  /  1));	      freqTable.put(obj,    Integer.valueOf(count.longValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	8	None	replace
79	[BUG]  [BUGGY]  addValue(freqTable,  obj);  [CE]  no  suitable  method  found  for  addValue(TreeMap<Comparable<?>,Long>,Comparable<CAP#1>)  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  addValue(freqTable,  obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	addValue(freqTable,  obj);	      	non-compiled	[CE]  no  suitable  method  found  for  addValue(TreeMap<Comparable<?>,Long>,Comparable<CAP#1>)	7	None	replace
80	[BUG]  [BUGGY]  this.values.addValue(obj);  [CE]  cannot  find  symbol  values  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  this.values.addValue(obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	this.values.addValue(obj);	      	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
81	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  v);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,Comparable<CAP#2>)  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()),  v);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()),  v);	      freqTable.put(obj,    Integer.valueOf(count.intValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer,Comparable<CAP#2>)	12	None	replace
82	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  /  1));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]                AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(count.intValue()  /  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(count.intValue()  /  1));	      freqTable.put(obj,    Integer.valueOf(count.intValue()    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	12	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  obj  =  Long.valueOf(count.intValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	obj  =  Long.valueOf(count.intValue());	      obj    =    Long.valueOf(count.longValue()    +    1);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
84	[BUG]  [BUGGY]  obj  =  Long.valueOf(count.intValue());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  obj  =  Long.valueOf(count.intValue());  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	obj  =  Long.valueOf(count.intValue());	      obj    =    Long.valueOf(count.longValue()    +    1);    	compilable	  [FE]  AssertionFailedError  	10	3	replace
85	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.longValue()  /  1));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(v.longValue()  /  1));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(v.longValue()  /  1));	      freqTable.put(obj,    Integer.valueOf(v.longValue()    +    1));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
87	[BUG]  [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  Long.valueOf(0));  freqTable.put(obj,  Long.valueOf(3));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    Long.valueOf(0));    freqTable.put(obj,  Long.valueOf(3));	  	compilable	  [FE]  AssertionFailedError  	15	1	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(2));	      freqTable.put(obj,    Long.valueOf(0));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
89	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(2));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(2));	      freqTable.put(obj,    Long.valueOf(0));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
90	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1),  v);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1),  v);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1),  v);	  freqTable.put(obj,    Long.valueOf(count.longValue()),    v);    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>)	13	None	replace
91	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  -  1));  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()  -  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()  -  1));	  freqTable.put(obj,    Long.valueOf(count.doubleValue()));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	5	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
93	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(obj!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
94	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  1);  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj,  1);	      TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	11	None	replace
95	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Integer.valueOf(count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Integer.valueOf(count.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	1	None	add
96	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  i  =  freqTable.get(obj,  Long.valueOf(i.longValue()));  [CE]  no  suitable  method  found  for  get(Comparable<CAP#1>,Long)  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  i  =  freqTable.get(obj,  Long.valueOf(i.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer  i  =  freqTable.get(obj,  Long.valueOf(i.longValue()));	  	non-compiled	[CE]  no  suitable  method  found  for  get(Comparable<CAP#1>,Long)	1	None	add
97	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(Count.longValue()));  [CE]  cannot  find  symbol  Count  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  freqTable.put(obj,  Long.valueOf(Count.longValue()));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    freqTable.put(obj,  Long.valueOf(Count.longValue()));	  	non-compiled	[CE]  cannot  find  symbol  Count	1	None	add
98	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  i  =  freqTable.get(obj);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  Integer  i  =  freqTable.get(obj);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()));    Integer  i  =  freqTable.get(obj);	  	non-compiled	[CE]  incompatible  types	1	None	add
99	[BUG]  [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  L.valueOf(count.longValue()  +  1);  [CE]  cannot  find  symbol  L  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      obj  =  Long.valueOf(count.longValue()  +  1);  obj  =  L.valueOf(count.longValue()  +  1);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        obj    =    Long.valueOf(count.longValue()    +    1);    obj  =  L.valueOf(count.longValue()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  L	9	None	add
100	[BUG]  [BUGGY]  freqTable.put(obj,  Integer.valueOf(2));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]              AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Integer.valueOf(2));  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Integer.valueOf(2));	      freqTable.put(obj,    Integer.valueOf(0));    	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	18	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
102	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
104	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
106	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
108	[BUG]  [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      freqTable.put(obj,  null);  if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        freqTable.put(obj,    null);    if(freqTable!=  null)  {  freqTable.put(obj,  null);  }  else  {  throw  new  ClassCastException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	19	1	add
109	[BUG]  [BUGGY]      TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>();  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long)  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>();  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        TreeMap  <  Long,Object>  freqTable  =  new  TreeMap  <  Long,Object>();	  	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long)	6	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      this.freqTable.put(obj,  null);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	        this.freqTable.put(obj,  null);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
111	[BUG]  [BUGGY]      this.freqTable.put(obj,  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      this.freqTable.put(obj,  null);  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        this.freqTable.put(obj,  null);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
112	[BUG]  [BUGGY]      this.freqTable.put(obj,  new  Integer(count));  [CE]  no  suitable  constructor  found  for  Integer(Long)  [FE]        AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      this.freqTable.put(obj,  new  Integer(count));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        this.freqTable.put(obj,  new  Integer(count));	  	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(Long)	6	None	add
113	[BUG]  [BUGGY]      this.freqTable.put(obj,  new  Integer(v));  [CE]  no  suitable  constructor  found  for  Integer(Comparable<CAP#1>)  [FE]          AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]      this.freqTable.put(obj,  new  Integer(v));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	        this.freqTable.put(obj,  new  Integer(v));	  	non-compiled	[CE]  no  suitable  constructor  found  for  Integer(Comparable<CAP#1>)	6	None	add
114	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  [CE]  no  suitable  method  found  for  get(Comparable<CAP#1>,Long)  [FE]    AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]    }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,    Long.valueOf(count.longValue()    /    1));    freqTable.get(obj,  Long.valueOf(count.longValue()  /  1));	  	non-compiled	[CE]  no  suitable  method  found  for  get(Comparable<CAP#1>,Long)	3	None	add
115	[BUG]  [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(0);  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            AssertionFailedError    [CONTEXT]    public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {    [BUGGY]  TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(0);  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(     "instance  of  class  {0}  not  comparable  to  existing  values   ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(0);	      TreeMap    <?>    freqTable    =(TreeMap    <?>)freqTable.get(obj);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	11	None	replace
