projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[col]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.getRows();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);Doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,dim,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(newdouble[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,sampleMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=mean.multiplyEntry(row,col,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,tmpMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],mean,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],means[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(newdouble[dim]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]/dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,samplingMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);Doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=sampleMatEigenvectors.multiplyEntry(row,col,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covarianceMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149Doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(dim,row,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(covMatEigenvalues,row,dim,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means,covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(dim,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixInverse,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,samplingMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,dim,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,col,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,row);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],v,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,row,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covMatEigenvalues);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixInverse,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],v,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],evec,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(dim,row,covariances[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],v,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],evec,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covMatEigenvalues[column]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(tmpMatrix,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,col,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],evec);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covMatDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],evec,means[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means[row],evec);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,evec,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means,evec,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(dim,row);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],tmpMatrix,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(tmpMatrix,col,sampleMatrix);
