bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(row,  col,  covariance);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(row,  col,  covariance);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  mean.multiplyEntry(row,  col,  covariance);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	1	None	replace
2	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixInverse);  [CE]  cannot  find  symbol  mean  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixInverse);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixInverse);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  mean	13	None	replace
3	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  tmpMatrixDeterminant);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  tmpMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  tmpMatrixDeterminant);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  mean	13	None	replace
4	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covariances[0]);  [CE]  cannot  find  symbol  col  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covariances[0]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(row,  col,  covariances[0]);	  tmpMatrix.multiplyEntry(row,    col,    covariances[i]);    	non-compiled	[CE]  cannot  find  symbol  col	2	None	replace
5	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  v);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  v);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  v);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	12	None	replace
6	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  dim);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  dim);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  dim);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row],    mean);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	26	None	replace
7	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covariances[row]);  [CE]  cannot  find  symbol  mean  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covariances[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covariances[row]);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row]);    	non-compiled	[CE]  cannot  find  symbol  mean	3	None	replace
8	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row]);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row]);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	3	None	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(new  double[dim]);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(new  double[dim]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(new  double[dim]);	  double[][]    covariances    =    covMatEigenvectors.toArray(new    double[row]);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	24	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  /  dim);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	add	double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  /  dim);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]    -    dim);    	compilable	  [FE]  AssertionError  	28	2	replace
11	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  /  dim);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  /  dim);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  /  dim);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]    -    dim);    	compilable	  [FE]  AssertionError  	28	2	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixDeterminant);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixDeterminant);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixDeterminant);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	21	None	replace
13	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  means);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  means);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  means);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	14	None	replace
14	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  mean);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  mean);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances,  mean);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  mean	14	None	replace
15	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  [CE]  variable  factor  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double    factor    =    FastMath.sqrt(covMatEigenvalues[row]    -    dim);    double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	27	None	add
16	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  [CE]  variable  factor  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError    [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double    factor    =    FastMath.sqrt(covMatEigenvalues[row]    -    dim);    Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]  -  dim);	  	non-compiled	[CE]  variable  factor  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	27	None	add
17	[BUG]  [BUGGY]  double[][]  covariances  =  sampleMatEigenvectors.multiplyEntry(row,  col,  covariance);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  sampleMatEigenvectors.multiplyEntry(row,  col,  covariance);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  sampleMatEigenvectors.multiplyEntry(row,  col,  covariance);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    sampleMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	25	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
19	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  cannot  find  symbol  col  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);	  tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  cannot  find  symbol  col	22	None	replace
20	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covariances[row]);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covariances[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covariances[row]);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covariances[row]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	add	Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    Double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    	compilable	  [FE]  AssertionError  	10	1	replace
22	[BUG]  [BUGGY]  Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	Double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    Double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    	compilable	  [FE]  AssertionError  	10	1	replace
23	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(dim,  row,  covariances);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(dim,  row,  covariances);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(dim,  row,  covariances);	  tmpMatrix.multiplyEntry(row,    dim,    covariances);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	15	None	replace
24	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  dim,  covariances);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  dim,  covariances);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  dim,  covariances);	  tmpMatrix.multiplyEntry(row,    dim,    covariances);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	15	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  means);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  means);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    covariance);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	20	None	replace
26	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covarianceMatrixInverse);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covarianceMatrixInverse);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  covarianceMatrixInverse);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixInverse);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	17	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  mean);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  mean);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  mean);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	11	None	replace
28	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean);  [CE]  cannot  find  symbol  mean  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  cannot  find  symbol  mean	9	None	replace
29	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  mean  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  covarianceMatrixDeterminant);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  mean	16	None	replace
30	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  covariances);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  covariances);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  covariances);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
31	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixInverse);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixInverse);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrixInverse);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	18	None	replace
32	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    means);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
33	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  dim,  samplingMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(row,  dim,  samplingMatrix);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(row,  dim,  samplingMatrix);	  tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	22	None	replace
34	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    means);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
35	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrix);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrix);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrix);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    double    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	9	None	replace
36	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[row]);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means[row]);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
37	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	19	None	replace
38	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  v);  [CE]  cannot  find  symbol  v  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  v);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  v);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row],    mean);    	non-compiled	[CE]  cannot  find  symbol  v	26	None	replace
39	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  v  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  v	16	None	replace
40	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row,  col);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row,  col);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  row,  col);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    sampleMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	25	None	replace
41	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
42	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  means);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  means);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse,  means);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	14	None	replace
43	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant,  means);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant,  means);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant,  means);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	14	None	replace
44	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covariances[row]);  [CE]  cannot  find  symbol  v  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covariances[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covariances[row]);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covariances[row]);    	non-compiled	[CE]  cannot  find  symbol  v	5	None	replace
45	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covariances[row]);  [CE]  cannot  find  symbol  evec  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covariances[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covariances[row]);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covariances[row]);    	non-compiled	[CE]  cannot  find  symbol  evec	5	None	replace
46	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(dim,  row,  covariances[i]);  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(dim,  row,  covariances[i]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(dim,  row,  covariances[i]);	  tmpMatrix.multiplyEntry(row,    col,    covariances[i]);    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
47	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  v  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  v,  covarianceMatrixDeterminant);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  v	13	None	replace
48	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  evec  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  covarianceMatrixDeterminant);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    mean,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  evec	13	None	replace
49	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[column]);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[column]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatEigenvalues[column]);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	12	None	replace
50	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	18	None	replace
51	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(covariance);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	11	None	replace
52	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  mean);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  mean);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  mean);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	1	None	replace
53	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  evec);  [CE]  cannot  find  symbol  evec  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  evec);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  evec);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row],    mean);    	non-compiled	[CE]  cannot  find  symbol  evec	26	None	replace
54	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatDeterminant);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatDeterminant);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  covMatDeterminant);	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
55	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  mean);  [CE]  cannot  find  symbol  mean  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  mean);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covariances[row],  mean);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covariances[row]);    	non-compiled	[CE]  cannot  find  symbol  mean	3	None	replace
56	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  means[row]);  [CE]  cannot  find  symbol  evec  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  means[row]);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  evec,  means[row]);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means[row]);    	non-compiled	[CE]  cannot  find  symbol  evec	6	None	replace
57	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row],  evec);  [CE]  cannot  find  symbol  evec  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row],  evec);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means[row],  evec);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means[row]);    	non-compiled	[CE]  cannot  find  symbol  evec	6	None	replace
58	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  evec,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  evec,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  mean,  evec,  covarianceMatrixDeterminant);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  mean	14	None	replace
59	[BUG]  [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  evec,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  evec  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  evec,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  means,  evec,  covarianceMatrixDeterminant);	  final    double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    means,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  evec	14	None	replace
60	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covariances[row]);  [CE]  cannot  find  symbol  col  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covariances[row]);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	tmpMatrix.multiplyEntry(row,  col,  covariances[row]);	  tmpMatrix.multiplyEntry(row,    col,    covariances[i]);    	non-compiled	[CE]  cannot  find  symbol  col	2	None	replace
61	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  row);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  row);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  row);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	11	None	replace
62	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
63	[BUG]  [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  tmpMatrix,  covarianceMatrixDeterminant);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  tmpMatrix,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double  factor  =  FastMath.sqrt(covMatEigenvalues[row],  tmpMatrix,  covarianceMatrixDeterminant);	  double    factor    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
64	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  sampleMatrix);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  sampleMatrix);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  sampleMatrix);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(row,    col,    sampleMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	25	None	replace
