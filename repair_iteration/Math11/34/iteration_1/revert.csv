projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[col]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,covariances[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.getRows();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]);Doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],mean,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],means,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,dim,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(dim,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149tmpMatrix.multiplyEntry(row,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.toArray(newdouble[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149double[][]covariances=covMatEigenvectors.multiplyEntry(row,col,sampleMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149finaldoublefactor=FastMath.sqrt(covMatEigenvalues[row],covariances[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java149doublefactor=FastMath.sqrt(covMatEigenvalues[row]-dim);
