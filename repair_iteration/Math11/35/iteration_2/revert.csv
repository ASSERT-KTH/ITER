projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(row,col,factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<dim;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covarianceMatrix[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor.length;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrix[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covarianceMatrixDeterminant[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor;col++){for(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor;col++){For(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(factor,covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(row,col,covarianceMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(row,col,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<covarianceMatrix.length;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(factor,covarianceMatrix[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covarianceMatrix[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor;col++){intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrixDeterminant[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covariances[row],factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covMatEigenvalues[row],factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covarianceMatrixInverse[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covarianceMatrixInverse[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<dim;col++){intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<covarianceMatrixDeterminant;col++){intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrix,factor[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covMatEigenvalues[row],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrix,covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(row,col,samplingMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<dim;col++){For(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covMatEigenvalues[row],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(dim,row,col,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrixInverse[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covariances[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covarianceMatrix[row],factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150For(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(rng,col,covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covMatEigenvalues[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<dim;col++){for(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<covarianceMatrixDeterminant;col++){for(intcol=0;col<factor;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150for(intcol=0;col<factor;col++){intcol=0;col<dim;col++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(rng,col,covarianceMatrix);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150double[][]covariances=FastMath.sqrt(covarianceMatrixDeterminant[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrixDeterminant,factor[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150Array2DRowRealMatrixtmpMatrix=FastMath.sqrt(covarianceMatrix[row],factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150doublefactor=FastMath.sqrt(covarianceMatrixDeterminant[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java150tmpMatrix.multiplyEntry(dim,row,col,covarianceMatrix);
