bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeMatEigenvalues();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getRangeMatEigenvalues();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getRangeMatEigenvalues();	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  +  1);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.get(dim  +  1);	      double[][]    covariances    =    covMatEigenvectors.get(dim);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim!=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim!=  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if    (dim!=    covariances.length)    {    if  (dim!=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim  >=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim  >=  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if    (dim!=    covariances.length)    {    if  (dim  >=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim  ==  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if  (dim!=  covariances.length)  {  if  (dim  ==  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if    (dim!=    covariances.length)    {    if  (dim  ==  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariantes();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getVariantes();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getVariantes();	      double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  ==  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	add	if(dim  ==  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  DimensionMismatchException  	5	5	replace
8	[BUG]  [BUGGY]  if(dim  ==  covariances.length)  {  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  ==  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim  ==  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  DimensionMismatchException  	5	5	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.getMatEigenvalues();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.getMatEigenvalues();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.getMatEigenvalues();	      double[][]    covariances    =    evec.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  col);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  col);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  col);	      double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim);	      double[][]    covariances    =    rng.getMatteredEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(covariance);	      double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);	      double[][]    covariances    =    covMatEigenvectors.get(dim);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVarianceMatEigenvalues();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getVarianceMatEigenvalues();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getVarianceMatEigenvalues();	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariants();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getVariants();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getVariants();	      double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  >  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	add	if(dim  >  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  AssertionError  	5	1	replace
17	[BUG]  [BUGGY]  if(dim  >  covariances.length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  >  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim  >  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  AssertionError  	5	1	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVarianties();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  rng.getVarianties();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getVarianties();	      double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getMatEigenvalues();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  dim.getMatEigenvalues();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getMatEigenvalues();	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  factor);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  factor);  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  factor);	      double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  double[][]  covariances  =  this.covMatEigenvectors.values();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  this.covMatEigenvectors.values();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  this.covMatEigenvectors.values();	      double[][]    covariances    =    covMatEigenvectors.values();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getValues();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  double[][]  covariances  =  dim.getValues();  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getValues();	      double[][]    covariances    =    rng.getValues();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  >=  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	add	if(dim  >=  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  DimensionMismatchException  	5	5	replace
24	[BUG]  [BUGGY]  if(dim  >=  covariances.length)  {  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;    [BUGGY]  if(dim  >=  covariances.length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim  >=  covariances.length)  {	  if    (dim!=    covariances.length)    {    	compilable	  [FE]  DimensionMismatchException  	5	5	replace
