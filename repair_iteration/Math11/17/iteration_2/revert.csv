projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=evec.getMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVariances();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(covariances.length!=dim){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim!=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getMatteredEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getValues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.get(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.values();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getRangeMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.get(dim+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim!=covariances.length){if(dim!=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim!=covariances.length){if(dim>=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim!=covariances.length){if(dim==covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVariantes();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim==covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.getMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.toArray(dim,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getMatteredEigenvalues(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.toArray(covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.get(dim,factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVarianceMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVariants();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVarianties();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.toArray(dim,factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=this.covMatEigenvectors.values();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getValues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getDecomposition();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=col.toArray(dim,covMatEigenvectors);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getRangeVariants();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=factor.toArray(dim,covMatEigenvectors);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>=covariances.length){if(dim>=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>=covariances.length){if(dim!=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>=covariances.length){if(dim>>covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getMatteredEigenvalues(dim,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim==covariances.length){if(dim==covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim==covariances.length){if(dim>=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim==covariances.length){if(dim!=covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>covariances.length){if(dim>covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>covariances.length){If(dim>covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim<covariances.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=factor.get(dim,covMatEigenvectors);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.get(dim+2);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getVariables();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=rng.getMatteredEigenvalues(dim,factor);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=factor.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.toArray(dim,0,col);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getVarianceMatEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107if(dim>col){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covMatEigenvectors.get(dim/1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=covarianceMatrix.getValues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getVarianties();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getVariants();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java107double[][]covariances=dim.getRangeMatEigenvalues();
