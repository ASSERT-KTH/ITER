bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getDecomposition();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  rng.getDecomposition();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getDecomposition();	  double[][]    covariances    =    rng.getVariantes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  col.toArray(dim,  covMatEigenvectors);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  col.toArray(dim,  covMatEigenvectors);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  col.toArray(dim,  covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim,    col);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeVariants();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  rng.getRangeVariants();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getRangeVariants();	  double[][]    covariances    =    rng.getVariants();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  double[][]  covariances  =  factor.toArray(dim,  covMatEigenvectors);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  factor.toArray(dim,  covMatEigenvectors);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  factor.toArray(dim,  covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim,    factor);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  if(dim  >=  covariances.length)  {  if(dim  >=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >=  covariances.length)  {  if(dim  >=  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    >=    covariances.length)    {    if(dim  >=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
6	[BUG]  [BUGGY]  if(dim  >=  covariances.length)  {  if(dim!=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]      DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >=  covariances.length)  {  if(dim!=  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    >=    covariances.length)    {    if(dim!=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
7	[BUG]  [BUGGY]  if(dim  >=  covariances.length)  {  if(dim  >>  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >=  covariances.length)  {  if(dim  >>  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    >=    covariances.length)    {    if(dim  >>  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
8	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);	  double[][]    covariances    =    rng.getMatteredEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  if(dim  ==  covariances.length)  {  if(dim  ==  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  ==  covariances.length)  {  if(dim  ==  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    ==    covariances.length)    {    if(dim  ==  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
10	[BUG]  [BUGGY]  if(dim  ==  covariances.length)  {  if(dim  >=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]      DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  ==  covariances.length)  {  if(dim  >=  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    ==    covariances.length)    {    if(dim  >=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
11	[BUG]  [BUGGY]  if(dim  ==  covariances.length)  {  if(dim!=  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  ==  covariances.length)  {  if(dim!=  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    ==    covariances.length)    {    if(dim!=  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
12	[BUG]  [BUGGY]  if(dim  >  covariances.length)  {  if(dim  >  covariances.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >  covariances.length)  {  if(dim  >  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    >    covariances.length)    {    if(dim  >  covariances.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
13	[BUG]  [BUGGY]  if(dim  >  covariances.length)  {  If(dim  >  covariances.length)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >  covariances.length)  {  If(dim  >  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim    >    covariances.length)    {    If(dim  >  covariances.length)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  <  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	add	if(dim  <  covariances.length)  {	  if(dim    >    covariances.length)    {    	compilable	  [FE]  AssertionError  	17	1	replace
15	[BUG]  [BUGGY]  if(dim  <  covariances.length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  <  covariances.length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim  <  covariances.length)  {	  if(dim    >    covariances.length)    {    	compilable	  [FE]  AssertionError  	17	1	replace
16	[BUG]  [BUGGY]  double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.get(dim,    factor);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  +  2);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.get(dim  +  2);	  double[][]    covariances    =    covMatEigenvectors.get(dim    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariables();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  rng.getVariables();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getVariables();	  double[][]    covariances    =    rng.getVariants();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);	  double[][]    covariances    =    rng.getMatteredEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  factor.toArray(dim);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  factor.toArray(dim);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  factor.toArray(dim);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim,    factor);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  0,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  0,  col);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  0,  col);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim,    col);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getVarianceMatEigenvalues();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  dim.getVarianceMatEigenvalues();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getVarianceMatEigenvalues();	  double[][]    covariances    =    rng.getVarianceMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  if(dim  >  col)  {  [CE]  cannot  find  symbol  col  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  if(dim  >  col)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	if(dim  >  col)  {	  if    (dim!=    covariances.length)    {    if    (dim    >=    covariances.length)    {    	non-compiled	[CE]  cannot  find  symbol  col	4	None	replace
24	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  /  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim  /  1);  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covMatEigenvectors.get(dim  /  1);	  double[][]    covariances    =    covMatEigenvectors.get(dim    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getValues();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  covarianceMatrix.getValues();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  covarianceMatrix.getValues();	  double[][]    covariances    =    dim.getValues();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getVarianties();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  dim.getVarianties();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getVarianties();	  double[][]    covariances    =    rng.getVarianties();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getVariants();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  dim.getVariants();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getVariants();	  double[][]    covariances    =    rng.getVariants();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
28	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRangeMatEigenvalues();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;      [BUGGY]  double[][]  covariances  =  dim.getRangeMatEigenvalues();  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	double[][]  covariances  =  dim.getRangeMatEigenvalues();	  double[][]    covariances    =    rng.getRangeMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
