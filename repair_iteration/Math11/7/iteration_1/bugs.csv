bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [CE]  no  suitable  method  found  for  preMultiply(double[],double[])  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double[],double[])	13	None	replace
2	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  centered.preMultiply(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  centered.preMultiply(covarianceMatrixInverse);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  centered.preMultiply(covarianceMatrixInverse);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
3	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  preMultiplied  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	  	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  cannot  find  symbol  preMultiplied	13	None	replace
4	[BUG]  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *		non-compiled	[CE]  illegal  start  of  expression	14	None	add
5	[BUG]  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    if(covarianceMatrixInverse!=  null)  {  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *		non-compiled	[CE]  illegal  start  of  expression	14	None	add
6	[BUG]  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    if(covarianceMatrixInverse!=  null)  {  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *		non-compiled	[CE]  illegal  start  of  expression	14	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	add	    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);		compilable	  [FE]  AssertionError  	14	1	add
8	[BUG]  [BUGGY]    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);		compilable	  [FE]  AssertionError  	14	1	add
9	[BUG]  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
10	[BUG]  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    if(covarianceMatrixInverse!=  null)  {  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    if(covarianceMatrixInverse!=  null)  {  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue		non-compiled	[CE]  illegal  start  of  expression	14	None	add
11	[BUG]  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
12	[BUG]  [BUGGY]    double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
13	[BUG]  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
