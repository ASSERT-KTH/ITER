bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  centered.preVarianceMatrix(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixDeterminant  =  centered.preVarianceMatrix(covarianceMatrixInverse);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixDeterminant  =  centered.preVarianceMatrix(covarianceMatrixInverse);	      double[]    covarianceMatrixDeterminant    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);	      double[]    covarianceMatrixDeterminant    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrix.preMultiply(centered);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	add	final  double[]  preMultiplied  =  covarianceMatrix.preMultiply(centered);	  final    double[]    preMultiplied    =    centered.preMultiply(covarianceMatrixInverse);    	compilable	  [FE]  AssertionError  	2	2	replace
4	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrix.preMultiply(centered);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrix.preMultiply(centered);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrix.preMultiply(centered);	  final    double[]    preMultiplied    =    centered.preMultiply(covarianceMatrixInverse);    	compilable	  [FE]  AssertionError  	2	2	replace
5	[BUG]  [BUGGY]  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered,  values);  [CE]  no  suitable  method  found  for  preMultiply(double[],double[])  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered,  values);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered,  values);	      double[]    covarianceMatrix    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double[],double[])	8	None	replace
6	[BUG]  [BUGGY]  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue	      if(covarianceMatrixInverse!=    null)    {    for(final    RealMatrix    covarianceMatrixInverse    =    covarianceMatrixInverse.preMultiply(centered);    if(covarianceMatrixInverse!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  For(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  For(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	For(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  continue	      if(covarianceMatrixInverse!=    null)    {    for(final    RealMatrix    covarianceMatrixInverse    =    covarianceMatrixInverse.preMultiply(centered);    if(covarianceMatrixInverse!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *	      if(covarianceMatrixInverse!=    null)    {    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    	non-compiled	[CE]  '.class'  expected	5	None	replace
9	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *	      if(covarianceMatrixInverse!=    null)    {    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    	non-compiled	[CE]  '.class'  expected	5	None	replace
10	[BUG]  [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	        double[]    covarianceMatrix    =    covarianceMatrixInverse.preMultiply(centered);    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);	  	non-compiled	[CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])	7	None	add
11	[BUG]  [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(center);  [CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(center);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	        double[]    covarianceMatrix    =    covarianceMatrixInverse.preMultiply(centered);    double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(center);	  	non-compiled	[CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])	7	None	add
12	[BUG]  [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  Double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]      double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  Double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	        double[]    covarianceMatrix    =    covarianceMatrixInverse.preMultiply(centered);    Double[]  covarianceMatrix  =  covarianceMatrixInverse.preMultiply(centered);	  	non-compiled	[CE]  variable  covarianceMatrix  is  already  defined  in  method  getExponentTerm(double[])	7	None	add
13	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preVarianceMatrix(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preVarianceMatrix(covarianceMatrixInverse);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  centered.preVarianceMatrix(covarianceMatrixInverse);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
14	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVarianceMatrix(centered,  values);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
15	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i];  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i];  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double  preMultiplied  =  values[i]  -  getMeans()[i];	      	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
16	[BUG]  [BUGGY]  double  preMultiplied  =  values.length  -  getMeans()[i];  [CE]  cannot  find  symbol  i  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double  preMultiplied  =  values.length  -  getMeans()[i];  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double  preMultiplied  =  values.length  -  getMeans()[i];	      	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
17	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *	      if(covarianceMatrixInverse!=    null)    {    final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    	non-compiled	[CE]  '.class'  expected	4	None	replace
18	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preVariance(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preVariance(covarianceMatrixInverse);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  centered.preVariance(covarianceMatrixInverse);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVariance(centered);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
19	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered,  values);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered,  values);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.preVariance(centered,  values);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVariance(centered);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [CE]  cannot  find  symbol  tmpMatrix  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  cannot  find  symbol  tmpMatrix	1	None	replace
21	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [CE]  cannot  find  symbol  std  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  cannot  find  symbol  std	1	None	replace
22	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *	      if(covarianceMatrixInverse!=    null)    {    final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    values.length;    i++)    {    preMultiplied[i]    *    	non-compiled	[CE]  '.class'  expected	6	None	replace
23	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  }  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  for(int  i  =  0;  i  <  values.length;  i++)  {  preMultiplied[i]  *  }	      if(covarianceMatrixInverse!=    null)    {    final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    values.length;    i++)    {    preMultiplied[i]    *    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preMultiply(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  centered.preMultiply(covarianceMatrixInverse);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  centered.preMultiply(covarianceMatrixInverse);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
25	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [CE]  no  suitable  method  found  for  preMultiply(double[],double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double[],double[])	1	None	replace
26	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans().length;  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans().length;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double  preMultiplied  =  values[i]  -  getMeans().length;	      	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
27	[BUG]  [BUGGY]  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	for(final  RealMatrix  covarianceMatrixInverse  =  covarianceMatrixInverse.preMultiply(centered);  if(covarianceMatrixInverse!=  null)  {	      if(covarianceMatrixInverse!=    null)    {    for(final    RealMatrix    covarianceMatrixInverse    =    covarianceMatrixInverse.preMultiply(centered);    if(covarianceMatrixInverse!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *	      if(covarianceMatrixInverse!=    null)    {    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    	non-compiled	[CE]  '.class'  expected	5	None	replace
29	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preMultiply(centered);  [CE]  cannot  find  symbol  preMultiplied  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preMultiply(centered);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  cannot  find  symbol  preMultiplied	9	None	replace
30	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
31	[BUG]  [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVariance(centered);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVariance(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixInverse  =  this.covarianceMatrixInverse.preVariance(centered);	      double[]    covarianceMatrixInverse    =    covarianceMatrixInverse.preVariance(centered);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
32	[BUG]  [BUGGY]  double  preMultiplied  =  centered.length;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double  preMultiplied  =  centered.length;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double  preMultiplied  =  centered.length;	      	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
33	[BUG]  [BUGGY]  double  preMultiplied  =  values.length;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double  preMultiplied  =  values.length;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double  preMultiplied  =  values.length;	      	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
34	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrixDeterminant  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrixDeterminant  =  this.covarianceMatrixInverse.preVarianceMatrix(centered);	      double[]    covarianceMatrixDeterminant    =    covarianceMatrixInverse.preVarianceMatrix(centered);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
35	[BUG]  [BUGGY]  double[]  covarianceMatrix  =  covarianceMatrix.preMultiply(centered);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }    [BUGGY]  double[]  covarianceMatrix  =  covarianceMatrix.preMultiply(centered);  [BUGGY]    final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	double[]  covarianceMatrix  =  covarianceMatrix.preMultiply(centered);	      double[]    covarianceMatrix    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
