bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  col);  [CE]  cannot  find  symbol  col  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  col);  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  col);	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	non-compiled	[CE]  cannot  find  symbol  col	73	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	add	samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	compilable	  [FE]  AssertionError  	73	2	replace
3	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	compilable	  [FE]  AssertionError  	73	2	replace
4	[BUG]  [BUGGY]    [CE]  variable  samplingMatrix  might  not  have  been  initialized  [FE]        AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	  	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	non-compiled	[CE]  variable  samplingMatrix  might  not  have  been  initialized	73	None	replace
5	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }		non-compiled	[CE]  illegal  start  of  expression	74	None	add
6	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =		non-compiled	[CE]  illegal  start  of  expression	74	None	add
7	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance		non-compiled	[CE]  ')'  expected	74	None	add
8	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for(  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for(  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for(		non-compiled	[CE]  illegal  start  of  expression	74	None	add
9	[BUG]  [BUGGY]    Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.transpose();  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.transpose();  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.transpose();		non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	74	None	add
10	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);		non-compiled	[CE]  illegal  start  of  expression	74	None	add
11	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix)  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix);  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix);	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix)	73	None	replace
12	[BUG]  [BUGGY]    Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row]);		non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	74	None	add
13	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for  [CE]  '('  expected  [FE]      AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  for		non-compiled	[CE]  '('  expected	74	None	add
14	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixDeterminant);  [CE]  cannot  find  symbol  tmpMatrixDeterminant  [FE]    AssertionError  [CONTEXT]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixDeterminant);  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixDeterminant);	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  	non-compiled	[CE]  cannot  find  symbol  tmpMatrixDeterminant	73	None	replace
