bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col);  [CE]  cannot  find  symbol  row  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  row	3	None	replace
2	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  cannot  find  symbol  row  [FE]      AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  row	3	None	replace
3	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col);	      Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.transpose();    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	9	None	replace
4	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors	2	None	add
5	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  samplingMatrix  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  variable  samplingMatrix  might  already  have  been  assigned	2	None	add
6	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	2	None	add
7	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	7	None	replace
8	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	7	None	replace
9	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  [CE]  cannot  find  symbol  row  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  cannot  find  symbol  row	1	None	replace
10	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);  [CE]  cannot  find  symbol  covariance  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  cannot  find  symbol  covariance	1	None	replace
11	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]	      	non-compiled	[CE]  ')'  expected	4	None	replace
12	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	add	samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(tmpMatrixDeterminant);    	compilable	  [FE]  AssertionError  	14	2	replace
14	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(tmpMatrixDeterminant);    	compilable	  [FE]  AssertionError  	14	2	replace
15	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	5	None	replace
20	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
21	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)	11	None	replace
25	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,RealMatrix)  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,RealMatrix)	11	None	replace
26	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrix[row]);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrix[row]);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrix[row]);	      Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	12	None	replace
27	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for(    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for    	non-compiled	[CE]  ')'  expected	13	None	replace
31	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
32	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)	1	None	replace
33	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpose  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpose  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpose	      	non-compiled	[CE]  ';'  expected	4	None	replace
34	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if	      	non-compiled	[CE]  '('  expected	4	None	replace
35	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	2	None	add
36	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  samplingMatrix  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  samplingMatrix  might  not  have  been  initialized	3	None	replace
37	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant);  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixDeterminant);	      Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	12	None	replace
38	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpose  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpose  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpose	      	non-compiled	[CE]  ';'  expected	4	None	replace
39	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply();  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply();  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply();	      Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.transpose();    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	9	None	replace
41	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix,double)  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  covarianceMatrixDeterminant);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix,double)	11	None	replace
42	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    for    	non-compiled	[CE]  ')'  expected	13	None	replace
44	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	      if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	10	None	replace
45	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  factor);  [CE]  cannot  find  symbol  factor  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  factor);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  factor);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  cannot  find  symbol  factor	1	None	replace
46	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v);  [CE]  cannot  find  symbol  v  [FE]          AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  cannot  find  symbol  v	1	None	replace
47	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	2	None	add
48	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  covarianceMatrix  might  not  have  been  initialized  [FE]      AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }	  	non-compiled	[CE]  variable  covarianceMatrix  might  not  have  been  initialized	2	None	add
49	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixInverse);  [CE]  cannot  find  symbol  tmpMatrixInverse  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixInverse);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(tmpMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  tmpMatrixInverse	14	None	replace
50	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	7	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	add	samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  AssertionError  	3	2	replace
52	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  AssertionError  	3	2	replace
53	[BUG]  [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }    [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]    samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	      if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
