bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    double[][]    covariances    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	6	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    double[][]    covariances    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	6	None	replace
3	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    tmpMatrix.multiplyEntry(i,    col,    covariances[i]    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
5	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  }	  RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	18	None	replace
6	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors	13	None	add
7	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  covMatEigenvectors.multiply(covarianceMatrixInverse);  [CE]  variable  samplingMatrix  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    covMatEigenvectors.multiply(covarianceMatrixInverse);	  	non-compiled	[CE]  variable  samplingMatrix  might  already  have  been  assigned	13	None	add
8	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]        AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	13	None	add
9	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  covarianceMatrixInverse);	  Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	37	None	replace
10	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  mean);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  mean);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  mean);	  Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row],    covarianceMatrixDeterminant);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	37	None	replace
11	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col);  [CE]  cannot  find  symbol  col  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col);    	non-compiled	[CE]  cannot  find  symbol  col	1	None	replace
12	[BUG]  [BUGGY]  AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	19	None	replace
13	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	19	None	replace
14	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry();  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry();  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry();	  Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.multiply();    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	40	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  tmpMatrix.multiplyEntry(i,  col,  covariances[i]);  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    tmpMatrix.multiplyEntry(i,    col,    covariances[i]);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
16	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RandomGenerator    rng    =    covMatEigenvectors.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
17	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  vMatEigenvectors.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  vMatEigenvectors.get(i);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  vMatEigenvectors.get(i);  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RandomGenerator    rng    =    covMatEigenvectors.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
18	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  mean);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  mean);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  mean);	  Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.multiplyEntry(row,    col);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
19	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	17	None	replace
21	[BUG]  [BUGGY]  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  covarianceMatrix  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    RealMatrix    covarianceMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  variable  covarianceMatrix  might  not  have  been  initialized	48	None	replace
22	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  covarianceMatrix  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    RealMatrix    covarianceMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  variable  covarianceMatrix  might  not  have  been  initialized	48	None	replace
23	[BUG]  [BUGGY]  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);	  if(covMatEigenvectors!=    null)    {    samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors	36	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	add	samplingMatrix  =  tmpMatrix.multiply(covarianceMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    	compilable	  [FE]  AssertionError  	14	2	replace
25	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrixInverse);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiply(covarianceMatrixInverse);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    	compilable	  [FE]  AssertionError  	14	2	replace
26	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant[row]);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant[row]);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant[row]);	  Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covarianceMatrix[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	26	None	replace
27	[BUG]  [BUGGY]  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    covMatEigenvectors    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatEigenvectors	4	None	replace
28	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
29	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col	  if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	50	None	replace
30	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col	  if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	50	None	replace
31	[BUG]  [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.transpose  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.transpose  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  rng  =  tmpMatEigenvectors.transpose	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.transpose    	non-compiled	[CE]  ';'  expected	38	None	replace
32	[BUG]  [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);	  NeighborRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
33	[BUG]  [BUGGY]  final  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	44	None	replace
34	[BUG]  [BUGGY]  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  samplingMatrix  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	covMatEigenvectors.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  samplingMatrix  might  not  have  been  initialized	5	None	replace
35	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  samplingMatrix  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  covMatEigenvectors.multiply(covarianceMatrix);  }	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  samplingMatrix  might  not  have  been  initialized	5	None	replace
36	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix.multiplyEntry    	non-compiled	[CE]  ')'  expected	43	None	replace
37	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry();	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix.multiplyEntry    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	43	None	replace
38	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
39	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
40	[BUG]  [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  [CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  rng  =  tmpMatEigenvectors.get(i);	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.get(i);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	39	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.get(i);  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.get(i);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
42	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	35	None	replace
43	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  }	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	35	None	replace
44	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpM    	non-compiled	[CE]  ')'  expected	30	None	replace
45	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  >>  samplingMatrix  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  >>  samplingMatrix  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  >>  samplingMatrix  =	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpM    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
46	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  dim,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,int,RealMatrix)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  dim,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  dim,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,int,RealMatrix)	32	None	replace
47	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	32	None	replace
48	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix,  covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,RealMatrix,double)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix,  covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  tmpMatrix,  covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix,    covarianceMatrixDeterminant);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,RealMatrix,double)	41	None	replace
49	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(covarianceMatrix,  tmpMatrixDeterminant);  [CE]  cannot  find  symbol  tmpMatrixDeterminant  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(covarianceMatrix,  tmpMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(covarianceMatrix,  tmpMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  tmpMatrixDeterminant	41	None	replace
50	[BUG]  [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	47	None	replace
51	[BUG]  [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	47	None	replace
52	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(dim);  [CE]  no  suitable  method  found  for  multiply(int)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(dim);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(dim);	  samplingMatrix    =    covMatEigenvectors.multiply(tmpMatrixInverse);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(int)	49	None	replace
53	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	21	None	replace
54	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  covMatEigenvectors);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  covMatEigenvectors);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  covMatEigenvectors);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	24	None	replace
55	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrix);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	24	None	replace
56	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	51	None	add
57	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	51	None	add
58	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  else  {  double[][]  covariances  =  FastMath.sqrt(  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  else  {  double[][]  covariances  =  FastMath.sqrt(  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  else  {  double[][]  covariances  =  FastMath.sqrt(	  	non-compiled	[CE]  ')'  expected	51	None	add
59	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  mean,  tmpMatrix);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  mean,  tmpMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  mean,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(rng,    tmpMatrix);    	non-compiled	[CE]  cannot  find  symbol  mean	25	None	replace
60	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvectors);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvectors);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvectors);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(rng,    tmpMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	25	None	replace
61	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixInverse);  [CE]  cannot  find  symbol  row  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixInverse);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  row	2	None	replace
62	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
63	[BUG]  [BUGGY]  ||  covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  ||  covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	||  covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
64	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
65	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
66	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry	  if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	27	None	replace
67	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry	  if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	27	None	replace
68	[BUG]  [BUGGY]  RealMatrix  rng  =  covMatEigenvectors.transpose  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  rng  =  covMatEigenvectors.transpose  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  rng  =  covMatEigenvectors.transpose	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RealMatrix    rng    =    covMatEigenvectors.transpose    	non-compiled	[CE]  ';'  expected	33	None	replace
69	[BUG]  [BUGGY]  RealMattrix  rng  =  covMatEigenvectors.transpose  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMattrix  rng  =  covMatEigenvectors.transpose  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMattrix  rng  =  covMatEigenvectors.transpose	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RealMatrix    rng    =    covMatEigenvectors.transpose    	non-compiled	[CE]  ';'  expected	33	None	replace
70	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col);  [CE]  cannot  find  symbol  col  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col);	  samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  col	52	None	replace
71	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	8	None	replace
72	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  not  a  statement	8	None	replace
73	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col,  covariance);	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
74	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row,  col	  RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	28	None	replace
75	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covariances.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
76	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
77	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
78	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	51	None	add
79	[BUG]  [BUGGY]  RandomGenerator  rng  =  covMatEigenvectors.get(i);  [CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RandomGenerator  rng  =  covMatEigenvectors.get(i);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RandomGenerator  rng  =  covMatEigenvectors.get(i);	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RandomGenerator    rng    =    covMatEigenvectors.get(i);    if    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	34	None	replace
80	[BUG]  [BUGGY]  RandomGenerator  rng  =  rng.multiplyEntry(row,  col);  [CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                    AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RandomGenerator  rng  =  rng.multiplyEntry(row,  col);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RandomGenerator  rng  =  rng.multiplyEntry(row,  col);	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RandomGenerator    rng    =    covMatEigenvectors.get(i);    if    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	34	None	replace
81	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
83	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covariance);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covariance);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covariance);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
84	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  tmpMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  tmpMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)	24	None	replace
85	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
86	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpos  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpos  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RealMatrix  rng  =  covMatEigenvectors.transpos	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RealMatrix    rng    =    covMatEigenvectors.transpose    	non-compiled	[CE]  ';'  expected	33	None	replace
87	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(covMatEigenvalues,  col,  covarianceMatrix);  [CE]  cannot  find  symbol  col  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(covMatEigenvalues,  col,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(covMatEigenvalues,  col,  covarianceMatrix);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  col	2	None	replace
88	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col,  covarianceMatrix);  [CE]  cannot  find  symbol  col  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(rng,  col,  covarianceMatrix);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  col	2	None	replace
89	[BUG]  [BUGGY]  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
90	[BUG]  [BUGGY]  AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	AssertionError  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	7	None	replace
91	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(row,  col);	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	44	None	replace
92	[BUG]  [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix.multiplyEntry(row	  RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	28	None	replace
93	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	double[][]  covariances  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    double[][]    covariances    =    covMatEigenvectors.multiply(covarianceMatrix);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	6	None	replace
94	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)	32	None	replace
95	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  means,  tmpMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,double[],RealMatrix)  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  means,  tmpMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(rng,  means,  tmpMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(rng,    tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RandomGenerator,double[],RealMatrix)	25	None	replace
96	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
97	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    if(covMatEigenvectors!=  null)  {  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	add
98	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance);  }	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
99	[BUG]  [BUGGY]  RealMattrix  rng  =  tmpMatEigenvectors.get(i);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMattrix  rng  =  tmpMatEigenvectors.get(i);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMattrix  rng  =  tmpMatEigenvectors.get(i);	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.get(i);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
100	[BUG]  [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
101	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiplyEntry(row,  col,  covarianceMatrix);	  Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.multiplyEntry(row,    col);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
102	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	42	None	replace
103	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
104	[BUG]  [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpM    	non-compiled	[CE]  ')'  expected	30	None	replace
105	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpos  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpos  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  ++i)  {  RealMatrix  rng  =  tmpMatEigenvectors.transpos	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.transpose    	non-compiled	[CE]  ';'  expected	38	None	replace
106	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator)  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covariance);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator)	10	None	replace
107	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covarianceMatrix!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covarianceMatrix!=  null)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(covarianceMatrix!=  null)  {	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    RealMatrix    covarianceMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
108	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(matrix,  col);  [CE]  cannot  find  symbol  matrix  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(matrix,  col);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(matrix,  col);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(row,    col);    	non-compiled	[CE]  cannot  find  symbol  matrix	9	None	replace
109	[BUG]  [BUGGY]  RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  tmpMatrix  =  covarianceMatrix.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);	  RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(covMatEigenvalues[row]);	  RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
111	[BUG]  [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	NeighborRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  NeighborRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
112	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(tmpMatrix!=  null)  {  final  RealMatrix  tmpMatrix  =  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(tmpMatrix!=  null)  {  final  RealMatrix  tmpMatrix  =  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  if(tmpMatrix!=  null)  {  final  RealMatrix  tmpMatrix  =	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
113	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  }	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	44	None	replace
114	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  v  =  tmpMatrix.multiply(covarianceMatrix);  [CE]  cannot  find  symbol  v  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  v  =  tmpMatrix.multiply(covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    tmpMatrix.multiply(covarianceMatrix);    v  =  tmpMatrix.multiply(covarianceMatrix);	  	non-compiled	[CE]  cannot  find  symbol  v	51	None	add
115	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim);  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatrix);	  Array2DRowRealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
116	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col,  covarianceMatrix);  [CE]  cannot  find  symbol  col  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(dim,  col,  covarianceMatrix);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  col	2	None	replace
117	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  row  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);	  samplingMatrix    =    tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  row	2	None	replace
118	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  tmpMatEigenvectors.multiply(covarianceMatrix);  }  [CE]  cannot  find  symbol  tmpMatEigenvectors  [FE]          AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  tmpMatEigenvectors.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMatrix  covarianceMatrix  =  tmpMatEigenvectors.multiply(covarianceMatrix);  }	  samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    if(covMatEigenvectors!=    null)    {    RealMatrix    covarianceMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  cannot  find  symbol  tmpMatEigenvectors	48	None	replace
119	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,RealMatrix)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,RealMatrix)	32	None	replace
120	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [CE]  variable  samplingMatrix  might  not  have  been  initialized  [FE]        AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  samplingMatrix  =  tmpMatrix.multiply(covarianceMatrix);  }	  if(covMatEigenvectors!=    null)    {    samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    }    	non-compiled	[CE]  variable  samplingMatrix  might  not  have  been  initialized	36	None	replace
121	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  RealMatrix  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [CE]  variable  samplingMatrix  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  RealMatrix  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    if(covMatEigenvectors!=  null)  {  RealMatrix  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  variable  samplingMatrix  might  already  have  been  assigned	13	None	add
122	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError    [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix    =    covMatEigenvectors.multiply(covarianceMatrixInverse);    if(covMatEigenvectors!=  null)  {  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	add
123	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  factor);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  factor);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(tmpMatrix,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  factor	41	None	replace
124	[BUG]  [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  tmpMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	tmpMatrix  =  covMatEigenvectors.multiply(tmpMatrix);	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	29	None	replace
125	[BUG]  [BUGGY]  if(rng!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(rng!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(rng!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvectors.size();  i++)  {  RandomGenerator  rng  =  covMatEigenvectors.get(i);  if  }	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    i++)    {    RandomGenerator    rng    =    covMatEigenvectors.get(i);    if    	non-compiled	[CE]  '('  expected	34	None	replace
126	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  rng);  [CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix,RandomGenerator)  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  rng);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  rng);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(rng,    tmpMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(RealMatrix,RandomGenerator)	25	None	replace
127	[BUG]  [BUGGY]  samplingMatrix  =  tmpMatEigenvectors.multiplyEntry(rng,  covarianceMatrix);  [CE]  cannot  find  symbol  tmpMatEigenvectors  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  tmpMatEigenvectors.multiplyEntry(rng,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  tmpMatEigenvectors.multiplyEntry(rng,  covarianceMatrix);	  samplingMatrix    =    covMatEigenvectors.multiplyEntry(rng,    tmpMatrix);    	non-compiled	[CE]  cannot  find  symbol  tmpMatEigenvectors	25	None	replace
128	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	19	None	replace
129	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
130	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
131	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatri  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  if(covMatEigenvectors!=  null)  {  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatri  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	if(covMatEigenvectors!=  null)  {  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpMatri	  RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	28	None	replace
132	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  covariance	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    covariance    	non-compiled	[CE]  ')'  expected	8	None	replace
133	[BUG]  [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiply(double)  [FE]            AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	samplingMatrix  =  covMatEigenvectors.multiply(covarianceMatrixDeterminant);	  samplingMatrix    =    covMatEigenvectors.multiply(tmpMatrixInverse);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(double)	49	None	replace
134	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  dim;  row++)  {  FastMath.sqrt(tmpM	  if(covMatEigenvectors!=    null)    {    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    dim;    row++)    {    FastMath.sqrt(tmpM    	non-compiled	[CE]  ')'  expected	30	None	replace
135	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply(covMatEigenvectors);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply(covMatEigenvectors);  [BUGGY]      samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	Array2DRowRealMatrix  tmpMatrix  =  Array2DRowRealMatrix.multiply(covMatEigenvectors);	  Array2DRowRealMatrix    tmpMatrix    =    Array2DRowRealMatrix.multiply();    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	40	None	replace
136	[BUG]  [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.get(0);  [CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }      [BUGGY]  RealMatrix  rng  =  tmpMatEigenvectors.get(0);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	RealMatrix  rng  =  tmpMatEigenvectors.get(0);	  if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvectors.size();    ++i)    {    RealMatrix    rng    =    tmpMatEigenvectors.get(i);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	39	None	replace
