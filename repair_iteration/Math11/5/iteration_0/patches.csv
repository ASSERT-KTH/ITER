bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  	9	1	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  	9	1	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	  	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }		non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
5	[BUG]  [BUGGY]    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    if(values!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }		non-compiled	[CE]  not  a  statement	10	None	add
6	[BUG]  [BUGGY]    centered[0]  =  values[0].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[0]  =  values[0].doubleValue();  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[0]  =  values[0].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	10	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	    centered[0]  =  values[0]  *  getMeans().length;		compilable	  [FE]  AssertionError  	10	1	add
8	[BUG]  [BUGGY]    centered[0]  =  values[0]  *  getMeans().length;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[0]  =  values[0]  *  getMeans().length;		compilable	  [FE]  AssertionError  	10	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[0]  =  values.length;  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	    centered[0]  =  values.length;		compilable	  [FE]  AssertionError  	10	1	add
10	[BUG]  [BUGGY]    centered[0]  =  values.length;  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[0]  =  values.length;  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[0]  =  values.length;		compilable	  [FE]  AssertionError  	10	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	for(int  i  =  0;  i  <  getMeans().length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  	9	1	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  getMeans().length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  	9	1	replace
13	[BUG]  [BUGGY]    double[]  std  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    double[]  std  =  values.toArray(new  double[values.length]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    double[]  std  =  values.toArray(new  double[values.length]);		non-compiled	[CE]  cannot  find  symbol	10	None	add
14	[BUG]  [BUGGY]    double[]  values  =  getMeans();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    double[]  values  =  getMeans();  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    double[]  values  =  getMeans();		non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	10	None	add
15	[BUG]  [BUGGY]    double[]  std  =  values.toArray(new  double[values.size()  ]);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    double[]  std  =  values.toArray(new  double[values.size()  ]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    double[]  std  =  values.toArray(new  double[values.size()  ]);		non-compiled	[CE]  cannot  find  symbol	10	None	add
