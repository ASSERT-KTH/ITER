bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	for(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    getMeans().length;    i++)    {    for(int  i  =  0;  i  <  getMeans().length;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  For(int  i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  For(int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    getMeans().length;    i++)    {    For(int  i  =  0;  i  <  getMeans().length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	11	None	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  int  i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    getMeans().length;    i++)    {    int  i  =  0;  i  <  getMeans().length;  i++)  {	  	non-compiled	[CE]  >  expected	11	None	add
8	[BUG]  [BUGGY]  centered[0]  =  values[1].doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  centered[0]  =  values[1].doubleValue();  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[1].doubleValue();	      centered[0]    =    values[0].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values.length;    centered[0]  =  values.length;	  	compilable	  [FE]  AssertionError  	9	1	add
10	[BUG]  [BUGGY]      centered[0]  =  values.length;  centered[0]  =  values.length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    centered[0]  =  values.length;	  	compilable	  [FE]  AssertionError  	9	1	add
11	[BUG]  [BUGGY]      centered[0]  =  values.length;  int  centered[0]  =  values.length;  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  int  centered[0]  =  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    int  centered[0]  =  values.length;	  	non-compiled	[CE]  ']'  expected	9	None	add
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values.length;    centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
13	[BUG]  [BUGGY]      centered[0]  =  values.length;  centered[1]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
14	[BUG]  [BUGGY]  double[]  values  =  getValues();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  values  =  getValues();  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  values  =  getValues();	      double[]    values    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  centered[0]  =  values.length  -  1;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  centered[0]  =  values.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length  -  1;	      centered[0]    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	7	1	add
17	[BUG]  [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	7	1	add
18	[BUG]  [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMean().length;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
19	[BUG]  [BUGGY]  centered[0]  =  values[1]  *  getMeans().length;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  centered[0]  =  values[1]  *  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[1]  *  getMeans().length;	      centered[0]    =    values[0]    *    getMeans().length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  double[]  preMultiplied  =  getMeans();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  preMultiplied  =  getMeans();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  preMultiplied  =  getMeans();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  std  =  values.length;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  std  =  values.length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	std  =  values.length;	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	      if(values!=    null)    {    final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    for(int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  int  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  >  expected	1	None	add
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  For(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  For(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    For(int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
26	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }	      if(values!=    null)    {    final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    *    centered[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
27	[BUG]  [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  std;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  std;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  std;	      double[]    std    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
29	[BUG]  [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
30	[BUG]  [BUGGY]  double[]  std  =  values.getStd();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  std  =  values.getStd();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values.getStd();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  (int  i  =  0;  i  <  values.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  (int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    (int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
32	[BUG]  [BUGGY]  centered[0]  =  values.length  +  1;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  centered[0]  =  values.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length  +  1;	      centered[0]    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  centered[i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  for(int  i  =  0;  i  <  getMeans().length;  i++)  {  centered[i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    getMeans().length;    i++)    {    centered[i  =  0;  i  <  getMeans().length;  i++)  {	  	non-compiled	[CE]  ']'  expected	11	None	add
34	[BUG]  [BUGGY]  final  double[]  values  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  final  double[]  values  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  values  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }	      if(values!=    null)    {    final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    *    centered[i];    }    	non-compiled	[CE]  not  a  statement	5	None	replace
35	[BUG]  [BUGGY]      centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	9	None	add
36	[BUG]  [BUGGY]      centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }	  	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	9	None	add
37	[BUG]  [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  vals  =  values.toArray(new  double[values.length]);	      double[]    std    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  if(centered!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  if(centered!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	if(centered!=  null)  {  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	      if(values!=    null)    {    final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	4	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
40	[BUG]  [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
42	[BUG]  [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]      centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
43	[BUG]  [BUGGY]  double[]  std  =  getMeans();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  double[]  std  =  getMeans();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  getMeans();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  centered[0]  =  values[0]  /  getMeans().length;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];    [BUGGY]  centered[0]  =  values[0]  /  getMeans().length;  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[0]  /  getMeans().length;	      centered[0]    =    values[0]    *    getMeans().length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
