bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  centered[0]  =  values.length  /  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length  /  1;	  centered[0]    =    values.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
2	[BUG]  [BUGGY]  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;	          centered[0]    =    values[0]    *    getMeans().length;    centered[1]    =    values[0]    *    getMeans().length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
3	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  centered[i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[i  =  0;  i  <  getMeans().length;  i++)  {	  for(int    i    =    0;    i    <    getMeans().length;    i++)    {    centered[i    =    0;    i    <    getMeans().length;    i++)    {    	non-compiled	[CE]  ']'  expected	33	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	For(int  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    (int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	16	1	add
7	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	16	1	add
8	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
9	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  centered[0]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMean().length;  centered[0]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
10	[BUG]  [BUGGY]  double[]  std  =  getStd();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  getStd();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  getStd();	  double[]    std    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
11	[BUG]  [BUGGY]  double[]  std  =  getStdValues();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  getStdValues();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  getStdValues();	  double[]    std    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
12	[BUG]  [BUGGY]  centered[0]  =  values[1]  *  getMeans();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values[1]  *  getMeans();  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[1]  *  getMeans();	  centered[0]    =    values[1]    *    getMeans().length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  int  centered[0]  =  values.length;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  int  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	int  centered[0]  =  values.length;	          centered[0]    =    values.length;    int    centered[0]    =    values.length;    	non-compiled	[CE]  ']'  expected	11	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    2;    i++)    {    for(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  int  i  =  0;  i  <  values.length  -  2;  i++)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    2;    i++)    {    int  i  =  0;  i  <  values.length  -  2;  i++)  {	  	non-compiled	[CE]  >  expected	3	None	add
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  For(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  For(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    2;    i++)    {    For(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
17	[BUG]  [BUGGY]  centered[0]  =  values[i]  *  getMeans()[i];  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values[i]  *  getMeans()[i];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[i]  *  getMeans()[i];	          centered[0]    =    values.length;    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
19	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[2]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[2]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
21	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[2]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[2]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[2]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
23	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
24	[BUG]  [BUGGY]  centered[0]  =  values.length;  centered[1]  =  values[0];  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length;  centered[1]  =  values[0];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length;  centered[1]  =  values[0];	          centered[0]    =    values.length;    centered[1]    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  centered[0]  =  values.length;  centered[1]  =  values[2];  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length;  centered[1]  =  values[2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length;  centered[1]  =  values[2];	          centered[0]    =    values.length;    centered[1]    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  final  int[]  values  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  int[]  values  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  int[]  values  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }	  final    double[]    values    =    new    double[values.length];    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[i]    *    values[i];    }    	non-compiled	[CE]  not  a  statement	34	None	replace
27	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    *    centered[i];    }    	non-compiled	[CE]  not  a  statement	26	None	replace
28	[BUG]  [BUGGY]  centered[0]  =  centered.length;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  centered.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  centered.length;	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    <    values.length;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	39	1	add
30	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	39	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	39	1	add
32	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	39	1	add
33	[BUG]  [BUGGY]  centered[0]  =  values[i]  -  getMeans()[i];  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values[i]  -  getMeans()[i];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[i]  -  getMeans()[i];	          centered[0]    =    values.length;    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  double[]  preMultiplied  =  getPosition();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  preMultiplied  =  getPosition();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  preMultiplied  =  getPosition();	  double[]    preMultiplied    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  AssertionError  	9	1	add
36	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  AssertionError  	9	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
38	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  +  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  +  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
40	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  +  getMeans()[i];  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  +  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  +  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	9	1	add
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	1	None	add
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  For(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  For(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    For(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
44	[BUG]  [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length  -  1]);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  vals  =  values.toArray(new  double[values.length  -  1]);	  double[]    vals    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length  +  1]);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  vals  =  values.toArray(new  double[values.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  vals  =  values.toArray(new  double[values.length  +  1]);	  double[]    vals    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
46	[BUG]  [BUGGY]  std  =  values.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  std  =  values.length  -  1;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	std  =  values.length  -  1;	  std    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  std  =  centered.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  std  =  centered.length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	std  =  centered.length;	  std    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
49	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
50	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[1]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMatEigenvalues().length;  centered[1]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
51	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  centered[1]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMean().length;  centered[1]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMean().length;  centered[1]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
52	[BUG]  [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	int  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  >  expected	24	None	replace
53	[BUG]  [BUGGY]  double[]  std  =  values.getStd(centered);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  values.getStd(centered);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values.getStd(centered);	  double[]    std    =    values.getStd();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
54	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  For(int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	For(int  i  =  0;  i  <  getMeans().length;  i++)  {	  for(int    i    =    0;    i    <    getMeans().length;    i++)    {    For(int    i    =    0;    i    <    getMeans().length;    i++)    {    	non-compiled	[CE]  '.class'  expected	6	None	replace
55	[BUG]  [BUGGY]  centered[0]  =  values.length  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length  -  2;	  centered[0]    =    values.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length  -  1]):  std;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length  -  1]):  std;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values!=  null?  values.toArray(new  double[values.length  -  1]):  std;	  double[]    std    =    values!=    null?    values.toArray(new    double[values.length]):    std;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	41	1	add
58	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	41	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	41	1	add
60	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  AssertionError  	41	1	add
61	[BUG]  [BUGGY]  centered[0]  =  values.length;  for(final  double[]  centered  =  values.length;  i  >=  0;  i++)  {  centered[0]  =  centered[i];  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length;  for(final  double[]  centered  =  values.length;  i  >=  0;  i++)  {  centered[0]  =  centered[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length;  for(final  double[]  centered  =  values.length;  i  >=  0;  i++)  {  centered[0]  =  centered[i];  }	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    >=    0;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  centered[1]  =  values.length;  int  centered[1]  =  values.length;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[1]  =  values.length;  int  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[1]  =  values.length;  int  centered[1]  =  values.length;	          centered[0]    =    values.length;    int    centered[0]    =    values.length;    	non-compiled	[CE]  ']'  expected	11	None	replace
63	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
64	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  *  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
65	[BUG]  [BUGGY]  double[]  preMultiplied  =  getPremultiplied();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  preMultiplied  =  getPremultiplied();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  preMultiplied  =  getPremultiplied();	  double[]    preMultiplied    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
66	[BUG]  [BUGGY]  double[]  std  =  getValues();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  getValues();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  getValues();	  double[]    std    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
67	[BUG]  [BUGGY]  centered[0]  =  values[1]  /  getMeans().length;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values[1]  /  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values[1]  /  getMeans().length;	  centered[0]    =    values[0]    /    getMeans().length;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
69	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[2]  =  values[3]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[2]  =  values[3]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	2	add
71	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[2]  =  values[3]  *  getMeans().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[2]  =  values[3]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[1]  =  values[0]  *  getMeans().length;  centered[2]  =  values[3]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	2	add
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  centered[i  =  0;  i  <  values.length  -  2;  i++)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  centered[i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    2;    i++)    {    centered[i  =  0;  i  <  values.length  -  2;  i++)  {	  	non-compiled	[CE]  ']'  expected	3	None	add
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    (int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  >  expected	31	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	16	1	add
75	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	16	1	add
76	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
77	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  centered[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    *    centered[i];    }    	non-compiled	[CE]  not  a  statement	26	None	replace
78	[BUG]  [BUGGY]  centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  *  getMeans()[i];  }	          centered[0]    =    values.length;    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  centered[i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  centered[i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    centered[i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  ']'  expected	1	None	add
80	[BUG]  [BUGGY]  if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    <    values.length;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	36	None	replace
81	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
83	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
84	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
85	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
86	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[0]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
87	[BUG]  [BUGGY]  centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[1]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }	          centered[0]    =    values.length;    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
88	[BUG]  [BUGGY]  final  double[]  values  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  values  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  values  =  new  double[values.length  -  1];  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[i]  *  values[i];  }	  final    double[]    values    =    new    double[values.length];    for(int    i    =    0;    i    <    values.length;    i++)    {    centered[i]    *    values[i];    }    	non-compiled	[CE]  not  a  statement	34	None	replace
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
90	[BUG]  [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    for(int  i  =  0;  i  <  values.length;  i++)  {  centered[0]  =  values[i]  -  getMeans()[i];  }  centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        for(int    i    =    0;    i    <    values.length;    i++)    {    centered[0]    =    values[i]    -    getMeans()[i];    }    centered[0]  =  values.length;  for(int  i  =  0;  i  <  values.length;  i++)  {  centered[1]  =  values[i]  -  getMeans()[i];  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
91	[BUG]  [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  centered;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  centered;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  centered;	  double[]    std    =    values!=    null?    values.toArray(new    double[values.length]):    std;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
92	[BUG]  [BUGGY]  double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  centered;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  centered;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  centered;	  double[]    std    =    values!=    null?    values.toArray(new    double[values.length]):    std;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
93	[BUG]  [BUGGY]  centered[0]  =  values.length  +  2;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  values.length  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  values.length  +  2;	  centered[0]    =    values.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	if(values!=  null)  {  centered[0]  =  values.length;  for(final  double[]  values  =  centered.length;  i  >=  0;  i++)  {  centered[0]  =  values.length;  }	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    >=    0;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	35	None	replace
95	[BUG]  [BUGGY]  int  i  =  0;  i  <  getMeans().length;  i++)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  int  i  =  0;  i  <  getMeans().length;  i++)  {  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	int  i  =  0;  i  <  getMeans().length;  i++)  {	  for(int    i    =    0;    i    <    getMeans().length;    i++)    {    int    i    =    0;    i    <    getMeans().length;    i++)    {    	non-compiled	[CE]  >  expected	7	None	replace
96	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getStd().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getStd().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getStd().length;  centered[0]  =  values[0]  *  getStd().length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
97	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getMeans().length;  centered[0]  =  values[0]  *  getEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[0]    =    values[0]    *    getMeans().length;    centered[0]  =  values[0]  *  getEigenvalues().length;  centered[0]  =  values[0]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
98	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
99	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[1]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
101	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[0]  =  values.length;  centered[0]  =  values.length;  centered[1]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[0]    =    values.length;    centered[0]  =  values.length;  centered[1]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
102	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	final  double[]  centered  =  new  double[values.length  +  1];  for(int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  *  centered[i];  }	  final    double[]    centered    =    new    double[values.length];    for(int    i    =    0;    i    <    centered.length;    i++)    {    centered[i]    *    centered[i];    }    	non-compiled	[CE]  not  a  statement	26	None	replace
103	[BUG]  [BUGGY]  centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values[i];  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values[i];  }	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    <    values.length;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
104	[BUG]  [BUGGY]  centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  centered.length;  for(final  double[]  values  =  centered.length;  i  <  values.length;  i++)  {  centered[0]  =  values.length;  }	          centered[0]    =    values.length;    for(final    double[]    values    =    centered.length;    i    <    values.length;    i++)    {    centered[0]    =    values.length;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
105	[BUG]  [BUGGY]  double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  std;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  std;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  std  =  values  ==  null?  values.toArray(new  double[values.length]):  std;	  double[]    std    =    values!=    null?    values.toArray(new    double[values.length]):    std;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[1]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[1]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
107	[BUG]  [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[1]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values[0]    *    getMeans().length;    centered[1]  =  values[0]  *  getMeans().length;  centered[0]  =  values[1]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values[0]        *        getMeans().length;        centered[1]    =    values[0]    *    getMeans().length;    centered[0]  =  values[1]  *  getMeans().length;  centered[1]  =  values[1]  *  getMeans().length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	1	add
108	[BUG]  [BUGGY]  centered[0]  =  value.length;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  centered[0]  =  value.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	centered[0]  =  value.length;	          centered[0]    =    values.length;    centered[0]    =    values.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
109	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[3]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[3]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
110	[BUG]  [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[3]  =  values.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]          centered[0]    =    values.length;    centered[1]  =  values.length;  centered[0]  =  values.length;  centered[3]  =  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	                centered[0]        =        values.length;        centered[1]    =    values.length;    centered[0]  =  values.length;  centered[3]  =  values.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	2	add
111	[BUG]  [BUGGY]  double[]  preMultiplied  =  getPremiumMeans();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];      [BUGGY]  double[]  preMultiplied  =  getPremiumMeans();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	double[]  preMultiplied  =  getPremiumMeans();	  double[]    preMultiplied    =    getMeans();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
