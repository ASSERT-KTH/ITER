bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues(i,  dim);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getColumnMatEigenvalues(i,  dim);	  double[][]    covariances    =    rng.getColumnMatEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRowMatEigenvalues(i,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getRowMatEigenvalues(i,  col);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getRowMatEigenvalues(i,  col);	  double[][]    covariances    =    rng.getRowMatEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  col.getEigenvalues(dim,  rng);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  col.getEigenvalues(dim,  rng);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  col.getEigenvalues(dim,  rng);	  double[][]    covariances    =    rng.getEigenvalues(dim,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  col);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(i,  col);	  double[][]    covariances    =    rng.getMatEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]            DimensionMismatchException      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >=  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	add	if(dim  >=  covariances[i].length)  {	  if(dim    ==    covariances[i].length)    {    if(dim    >=    covariances[i].length)    {    	compilable	  [FE]  DimensionMismatchException  	6	5	replace
6	[BUG]  [BUGGY]  if(dim  >=  covariances[i].length)  {  [FE]  DimensionMismatchException  [FE]            DimensionMismatchException      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >=  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim  >=  covariances[i].length)  {	  if(dim    ==    covariances[i].length)    {    if(dim    >=    covariances[i].length)    {    	compilable	  [FE]  DimensionMismatchException  	6	5	replace
7	[BUG]  [BUGGY]  If  (dim  >  covariances[i].length)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  If  (dim  >  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	If  (dim  >  covariances[i].length)  {	  if    (dim    >    covariances[i].length)    {    If    (dim    >    covariances[i].length)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
8	[BUG]  [BUGGY]  double[][]  covariances  =  col.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  col.doubleValue();  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  col.doubleValue();	  double[][]    covariances    =    rng.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim,  covarianceMatrixDeterminant);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim,  covarianceMatrixDeterminant);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim,  covarianceMatrixDeterminant);	  double[][]    covariances    =    rng.getMatteredEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim,  covarianceMatrixDeterminant);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim,  covarianceMatrixDeterminant);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(i,  dim,  covarianceMatrixDeterminant);	  double[][]    covariances    =    rng.getEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  1];  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  new  double[dim.doubleValue()  +  1];	  double[][]    covariances    =    new    double[dim.doubleValue()    ];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  *  2];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  *  2];  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  new  double[dim.doubleValue()  *  2];	  double[][]    covariances    =    new    double[dim.doubleValue()    ];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
14	[BUG]  [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  If(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  If(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    If(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >  covariances[i].length  &&  dim  <  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	add	if(dim  >  covariances[i].length  &&  dim  <  covariances[i].length)  {	  if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	16	1	replace
16	[BUG]  [BUGGY]  if(dim  >  covariances[i].length  &&  dim  <  covariances[i].length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  >  covariances[i].length  &&  dim  <  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim  >  covariances[i].length  &&  dim  <  covariances[i].length)  {	  if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	16	1	replace
17	[BUG]  [BUGGY]  If(dim  ==  covariances[i].length)  {  [CE]  ';'  expected  [FE]        DimensionMismatchException      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  If(dim  ==  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	If(dim  ==  covariances[i].length)  {	  if(dim    ==    covariances[i].length)    {    If(dim    ==    covariances[i].length)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
18	[BUG]  [BUGGY]  if  (dim  >  covariances[i].length  &&(covariances[i].length  <  =  col))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if  (dim  >  covariances[i].length  &&(covariances[i].length  <  =  col))  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if  (dim  >  covariances[i].length  &&(covariances[i].length  <  =  col))  {	  if    (dim    >    covariances[i].length    ||(covariances[i].length    <    =    col))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  if  (dim  >  col  ||(covariances[i].length  <  =  covariances[i].length))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if  (dim  >  col  ||(covariances[i].length  <  =  covariances[i].length))  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if  (dim  >  col  ||(covariances[i].length  <  =  covariances[i].length))  {	  if    (dim    >    covariances[i].length    ||(covariances[i].length    <    =    col))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  col.getEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  col.getEigenvalues(i,  dim);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  col.getEigenvalues(i,  dim);	  double[][]    covariances    =    col.getEigenvalues(i,    rng);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  i];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  i];  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  new  double[dim.doubleValue()  +  i];	  double[][]    covariances    =    new    double[dim.doubleValue()    ];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim  +  1);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(i,  dim  +  1);	  double[][]    covariances    =    rng.getEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  double[][]  covariances  =  dim.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  dim.doubleValue();  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  dim.doubleValue();	  double[][]    covariances    =    rng.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  dim  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  dim  +  1);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(i,  dim  +  1);	  double[][]    covariances    =    rng.getMatEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim  +  1);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim  +  1);	  double[][]    covariances    =    rng.getMatteredEigenvalues(i,    dim);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim,  i);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim,  i);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(dim,  i);	  double[][]    covariances    =    rng.getEigenvalues(dim,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covariance,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covariance,  col);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(covariance,  col);	  double[][]    covariances    =    rng.getEigenvalues(dim,    col);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  <  covariances[i].length  ||  dim  >  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	add	if(dim  <  covariances[i].length  ||  dim  >  covariances[i].length)  {	  if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	16	1	replace
29	[BUG]  [BUGGY]  if(dim  <  covariances[i].length  ||  dim  >  covariances[i].length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim  <  covariances[i].length  ||  dim  >  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim  <  covariances[i].length  ||  dim  >  covariances[i].length)  {	  if(dim    >    covariances[i].length    ||    dim    <    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	16	1	replace
30	[BUG]  [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  dim.doubleValue()  ];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  +  dim.doubleValue()  ];  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  new  double[dim.doubleValue()  +  dim.doubleValue()  ];	  double[][]    covariances    =    new    double[dim.doubleValue()    ];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
31	[BUG]  [BUGGY]  If  (dim  <  covariances[i].length)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  If  (dim  <  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	If  (dim  <  covariances[i].length)  {	  if    (dim    >    covariances[i].length)    {    If    (dim    >    covariances[i].length)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  if  (dim  >  covariances[i].length  ||(covariances[i].length!=  col))  {  [CE]  cannot  find  symbol  col  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if  (dim  >  covariances[i].length  ||(covariances[i].length!=  col))  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if  (dim  >  covariances[i].length  ||(covariances[i].length!=  col))  {	  if    (dim    >    covariances[i].length    ||(covariances[i].length    <    =    col))    {    	non-compiled	[CE]  cannot  find  symbol  col	13	None	replace
33	[BUG]  [BUGGY]  if(dim!=  covariances[i].length)  {  If(dim  ==  covariances[i].length)  {  [CE]  ';'  expected  [FE]        DimensionMismatchException      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  if(dim!=  covariances[i].length)  {  If(dim  ==  covariances[i].length)  {  [BUGGY]      throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim!=  covariances[i].length)  {  If(dim  ==  covariances[i].length)  {	  if(dim    ==    covariances[i].length)    {    If(dim    ==    covariances[i].length)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
34	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covarianceMatrixDeterminant);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covarianceMatrixDeterminant);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(covarianceMatrixDeterminant);	  double[][]    covariances    =    rng.getEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covariance,  i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {      [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(covariance,  i);  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(covariance,  i);	  double[][]    covariances    =    rng.getEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
