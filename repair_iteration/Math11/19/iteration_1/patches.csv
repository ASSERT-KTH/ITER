bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(i,  dim);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(i,  dim);	      double[][]    covariances    =    rng.getMatEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if  (dim  >  covariances[i].length)  {  if  (dim  >  covariances[i].length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if  (dim  >  covariances[i].length)  {  if  (dim  >  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if    (dim    >    covariances[i].length)    {    if  (dim  >  covariances[i].length)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
3	[BUG]  [BUGGY]  if  (dim  >  covariances[i].length)  {  If  (dim  >  covariances[i].length)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if  (dim  >  covariances[i].length)  {  If  (dim  >  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if    (dim    >    covariances[i].length)    {    If  (dim  >  covariances[i].length)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim  ==  covariances[i].length)  {  [CE]  illegal  start  of  expression  [FE]    DimensionMismatchException    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim  ==  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    ==    covariances[i].length)    {    if(dim  ==  covariances[i].length)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
5	[BUG]  [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim!=  covariances[i].length)  {  [CE]  illegal  start  of  expression  [FE]      DimensionMismatchException    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim!=  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    ==    covariances[i].length)    {    if(dim!=  covariances[i].length)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
6	[BUG]  [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim  >=  covariances[i].length)  {  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  ==  covariances[i].length)  {  if(dim  >=  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    ==    covariances[i].length)    {    if(dim  >=  covariances[i].length)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
7	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(i,  dim);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(i,  dim);	      double[][]    covariances    =    rng.getEigenvalues(i,    col);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  double[][]  covariances  =  col.getEigenvalues(i,  rng);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  col.getEigenvalues(i,  rng);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  col.getEigenvalues(i,  rng);	      double[][]    covariances    =    rng.getEigenvalues(i,    col);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRowMatEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getRowMatEigenvalues(i,  dim);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getRowMatEigenvalues(i,  dim);	      double[][]    covariances    =    rng.getRowMatEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(i,  dim);	      double[][]    covariances    =    rng.getMatteredEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  rng.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.doubleValue();  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.doubleValue();	      double[][]    covariances    =    v.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues(i);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues(i);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getColumnMatEigenvalues(i);	      double[][]    covariances    =    rng.getRowMatEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  if  (dim  >  covariances[i].length  ||(covariances[i].length  <  =  col))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if  (dim  >  covariances[i].length  ||(covariances[i].length  <  =  col))  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if  (dim  >  covariances[i].length  ||(covariances[i].length  <  =  col))  {	  if    (dim    >    covariances[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(dim);	      double[][]    covariances    =    rng.getEigenvalues(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	add	if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {	  if    (dim    >    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	9	1	replace
16	[BUG]  [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim  >  covariances[i].length  ||  dim  <  covariances[i].length)  {	  if    (dim    >    covariances[i].length)    {    	compilable	  [FE]  AssertionError  	9	1	replace
17	[BUG]  [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  ];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  new  double[dim.doubleValue()  ];  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  new  double[dim.doubleValue()  ];	      double[][]    covariances    =    v.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  if(dim  ==  covariances[i].length)  {  If(dim  ==  covariances[i].length)  {  [CE]  ';'  expected  [FE]    DimensionMismatchException    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  if(dim  ==  covariances[i].length)  {  If(dim  ==  covariances[i].length)  {  [BUGGY]    throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	if(dim    ==    covariances[i].length)    {    If(dim  ==  covariances[i].length)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
19	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {    [BUGGY]  double[][]  covariances  =  rng.getEigenvalues(dim,  col);  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	double[][]  covariances  =  rng.getEigenvalues(dim,  col);	      double[][]    covariances    =    rng.getEigenvalues(i,    col);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
