projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatDec.getEigenvector(v).toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v).toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141v=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.getRows();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v),covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141v=FastMath.sqrt(covMatEigenvalues[v]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v],covMatDec);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v]/2.0);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[v]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covvariances=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141v=FastMath.sqrt(covMatEigenvalues[v],covMatDec.toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v-1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v].getArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v,dim).toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v].getArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=covMatEigenvectors.toArray(v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=covMatEigenvectors.toArray(dim,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.toArray(v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141v=FastMath.sqrt(covMatEigenvalues[v],dim.toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v-1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[v],dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(dim,v).toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v],dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v),means.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v),mean.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covariances=FastMath.sqrt(covMatEigenvalues[v]*2.0);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covvariances=FastMath.sqrt(covMatEigenvalues[v]/2.0);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]vMatEigenvalues=FastMath.sqrt(covMatEigenvalues[v].toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=FastMath.sqrt(covMatEigenvalues[v],v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[v],v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covvariances=FastMath.sqrt(covMatEigenvalues[v],covMatDec.toArray());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141double[][]covvariances=FastMath.sqrt(covMatEigenvalues[v-1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v),dim.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[]evec=covMatEigenvectors.getEigenvector(v,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covariances=covMatEigenvectors.toArray(dim,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java141finaldouble[][]covMatEigenvalues=FastMath.sqrt(covMatEigenvalues[dim]);
