bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  }	  if(evec!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	36	None	replace
2	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri	  if(evec!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	36	None	replace
3	[BUG]  [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatri	  if(evec    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	35	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  final  double  dim  =  covariances.length  -  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  double  dim  =  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  covariances.length  -  1;	  final    int    dim    =    covariances.length    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	12	None	replace
6	[BUG]  [BUGGY]  final  double  dim  =  covariances.length  -  col;  [CE]  cannot  find  symbol  col  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  double  dim  =  covariances.length  -  col;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  covariances.length  -  col;	  final    double    dim    =    covariances.length;    	non-compiled	[CE]  cannot  find  symbol  col	10	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.getValue();  }	  for(int    i    =    0;    i    <    mean.length;    i++)    {    covariances[i]    =    rng.getValue();    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  dim);  }  [CE]  cannot  find  symbol  dim  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  dim);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  dim);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  dim	13	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  row);  }  [CE]  cannot  find  symbol  row  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  row);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  row);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  row	13	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant[i].    	non-compiled	[CE]  <identifier>  expected	29	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]    ==    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	2	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]    ==    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	24	None	replace
14	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  dim  =  covariances.length  -  1;  [CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  dim  =  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length    -    1;    final  int  dim  =  covariances.length  -  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	11	None	add
16	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  1;  int  dim  =  covariances.length  -  1;  [CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  1;  int  dim  =  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length    -    1;    int  dim  =  covariances.length  -  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	11	None	add
17	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  covariances.length  -  1;  [CE]  ';'  expected  [FE]        DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length    -    1;    final  int  covariances.length  -  1;	  	non-compiled	[CE]  ';'  expected	11	None	add
18	[BUG]  [BUGGY]  double  dim  =  covariances.length  -  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  double  dim  =  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	double  dim  =  covariances.length  -  1;	  double    dim    =    covariances.length;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	34	None	replace
19	[BUG]  [BUGGY]  double  dim  =  covariances.length  -  col;  [CE]  cannot  find  symbol  col  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  double  dim  =  covariances.length  -  col;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	double  dim  =  covariances.length  -  col;	  double    dim    =    covariances.length;    	non-compiled	[CE]  cannot  find  symbol  col	34	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i],  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i],  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
22	[BUG]  [BUGGY]  final  int  covariances.length  =  covariances.length;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  covariances.length  =  covariances.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  int  covariances.length  =  covariances.length;	  final    int    dim    =    covariances.length;    final    int    covariances.length    =    covariances.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [CE]  cannot  find  symbol  col  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }	  for(int    i    =    0;    i    <    mean.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  col	14	None	replace
24	[BUG]  [BUGGY]  final  double  dim  =  mean.length;  [CE]  cannot  find  symbol  mean  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  double  dim  =  mean.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  mean.length;	  final    double    dim    =    evec.length;    	non-compiled	[CE]  cannot  find  symbol  mean	23	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	1	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  final  double  covariances  =  covariances.length;  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  double  covariances  =  covariances.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  covariances  =  covariances.length;	  final    int    dim    =    covariances.length;    final    int    covariances    =    covariances.length;    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	6	None	replace
28	[BUG]  [BUGGY]  final  int  covariances  =  covariances.length;  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  covariances  =  covariances.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  int  covariances  =  covariances.length;	  final    int    dim    =    covariances.length;    final    int    covariances    =    covariances.length;    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	6	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant[i    	non-compiled	[CE]  ']'  expected	25	None	replace
30	[BUG]  [BUGGY]  final  double  dim  =  means.length  -  2;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  double  dim  =  means.length  -  2;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  means.length  -  2;	  final    double    dim    =    means.length    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	31	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  mean);  }  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  mean);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  mean);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  mean	13	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }	  final    int    dim    =    covariances.length;    final    int    covariances.length    =    covariances.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
34	[BUG]  [BUGGY]  if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  else  {  throw  new  DimensionMismatchException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  else  {  throw  new  DimensionMismatchException( " ");  }  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(dim  >  0)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  else  {  throw  new  DimensionMismatchException( " ");  }	  final    int    dim    =    covariances.length;    final    int    covariances.length    =    covariances.length;    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]    ==    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	2	None	replace
36	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  covariances.length  =  covariances.length  -  1;  [CE]  ';'  expected  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  1;  final  int  covariances.length  =  covariances.length  -  1;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length    -    1;    final  int  covariances.length  =  covariances.length  -  1;	  	non-compiled	[CE]  ';'  expected	11	None	add
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	1	None	replace
38	[BUG]  [BUGGY]  if(covariances!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covariances!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covariances!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
39	[BUG]  [BUGGY]  rng  =  mean.getRandomMatrix();  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  rng  =  mean.getRandomMatrix();  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  mean.getRandomMatrix();	  rng    =    means.getRandomMatrix();    	non-compiled	[CE]  cannot  find  symbol  mean	22	None	replace
40	[BUG]  [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant	  if(evec    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	35	None	replace
41	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  2;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	add	final  int  dim  =  covariances.length  -  2;	  final    int    dim    =    covariances.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	12	5	replace
42	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  2;  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  final  int  dim  =  covariances.length  -  2;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  int  dim  =  covariances.length  -  2;	  final    int    dim    =    covariances.length    -    1;    	compilable	  [FE]  DimensionMismatchException  	12	5	replace
43	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant	  if(evec!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	36	None	replace
44	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariance  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariance  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariance	  if(evec!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant    	non-compiled	[CE]  ')'  expected	36	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  int  dim  =  covariances.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	add	int  dim  =  covariances.length;	  final    int    dim    =    covariances.length;    final    int    dim    =    covariances.length;    	compilable	  [FE]  AssertionError  	5	1	replace
46	[BUG]  [BUGGY]  int  dim  =  covariances.length;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  int  dim  =  covariances.length;  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	int  dim  =  covariances.length;	  final    int    dim    =    covariances.length;    final    int    dim    =    covariances.length;    	compilable	  [FE]  AssertionError  	5	1	replace
47	[BUG]  [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDetermin  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDetermin  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDetermin	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covarianceMatrixDeterminant[i].    	non-compiled	[CE]  ')'  expected	29	None	replace
48	[BUG]  [BUGGY]  if(covariances!=  null)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(covariances!=  null)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covariances!=  null)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }	  final    int    dim    =    covariances.length;    final    int    covariances.length    =    covariances.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
49	[BUG]  [BUGGY]  if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  }	  final    int    dim    =    covariances.length;    final    int    covariances.length    =    covariances.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
50	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  factor);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  factor);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  factor);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]    ==    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances  =  covariances.length;  }  [CE]  cannot  find  symbol  dim  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances  =  covariances.length;  }  [BUGGY]        if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(dim!=  covariances.length)  {  final  int  dim  =  covariances.length;  final  int  covariances  =  covariances.length;  }	  final    int    dim    =    covariances.length;    final    int    covariances    =    covariances.length;    	non-compiled	[CE]  cannot  find  symbol  dim	6	None	replace
53	[BUG]  [BUGGY]  if(dim!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  if(dim!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(dim!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }	  if(factor!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariances[i],  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariances[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covariances[i],  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i].  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i].  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i].	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  if(dim!=  covariances[i][i])  {  throw  new  DimensionMismatchException(covariances[i],  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	1	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].length);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);      [BUGGY]  for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].length);  }  [BUGGY]      final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  factor.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].length);  }	  for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
