bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    rng  =  rng.getRawMatEigenvalues();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    rng  =  rng.getRawMatEigenvalues();  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    rng  =  rng.getRawMatEigenvalues();		non-compiled	[CE]  cannot  find  symbol	32	None	add
2	[BUG]  [BUGGY]    rng  =  rng.getRandomMatDecimal();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    rng  =  rng.getRandomMatDecimal();  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    rng  =  rng.getRandomMatDecimal();		non-compiled	[CE]  cannot  find  symbol	32	None	add
3	[BUG]  [BUGGY]    rng  =  rng.getRandomMatrix();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    rng  =  rng.getRandomMatrix();  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    rng  =  rng.getRandomMatrix();		non-compiled	[CE]  cannot  find  symbol	32	None	add
4	[BUG]  [BUGGY]  final  double  dim  =  means.length;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]    AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]  final  double  dim  =  means.length;  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  means.length;	final  int  dim  =  means.length;  	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	31	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]  final  int  dim  =  covariances.length;  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	add	final  int  dim  =  covariances.length;	final  int  dim  =  means.length;  	compilable	  [FE]  AssertionError  	31	1	replace
6	[BUG]  [BUGGY]  final  int  dim  =  covariances.length;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]  final  int  dim  =  covariances.length;  [BUGGY]    if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  int  dim  =  covariances.length;	final  int  dim  =  means.length;  	compilable	  [FE]  AssertionError  	31	1	replace
7	[BUG]  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].		non-compiled	[CE]  <identifier>  expected	32	None	add
8	[BUG]  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],		non-compiled	[CE]  illegal  start  of  expression	32	None	add
9	[BUG]  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]        AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i		non-compiled	[CE]  ']'  expected	32	None	add
10	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }		non-compiled	[CE]  illegal  start  of  expression	32	None	add
11	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }		non-compiled	[CE]  illegal  start  of  expression	32	None	add
12	[BUG]  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  [BUGGY]    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [BUGGY]  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	    if(covMatEigenvectors!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }		non-compiled	[CE]  illegal  start  of  expression	32	None	add
