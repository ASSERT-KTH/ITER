bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]  ==  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.getValue();    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [CE]  cannot  find  symbol  mean  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getValue();  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.getValue();    }    	non-compiled	[CE]  cannot  find  symbol  mean	10	None	replace
5	[BUG]  [BUGGY]  final  int  dim  =  covariances.length;  final  int  dim  =  covariances.length;  [CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  int  dim  =  covariances.length;  final  int  dim  =  covariances.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length;    final  int  dim  =  covariances.length;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	5	None	add
6	[BUG]  [BUGGY]  final  int  dim  =  covariances.length;  final  int  covariances  =  covariances.length;  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  int  dim  =  covariances.length;  final  int  covariances  =  covariances.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length;    final  int  covariances  =  covariances.length;	  	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	5	None	add
7	[BUG]  [BUGGY]  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  int  dim  =  covariances.length;  final  int  covariances.length  =  covariances.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final    int    dim    =    covariances.length;    final  int  covariances.length  =  covariances.length;	  	non-compiled	[CE]  ';'  expected	5	None	add
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  final  double  dim  =  covariances.length;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  double  dim  =  covariances.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  covariances.length;	  final    int    dim    =    covariances.length;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	6	None	replace
11	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  int  dim  =  covariances.length  -  1;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	add	final  int  dim  =  covariances.length  -  1;	  final    int    dim    =    covariances.length;    	compilable	  [FE]  DimensionMismatchException  	6	5	replace
12	[BUG]  [BUGGY]  final  int  dim  =  covariances.length  -  1;  [FE]  DimensionMismatchException  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  int  dim  =  covariances.length  -  1;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  int  dim  =  covariances.length  -  1;	  final    int    dim    =    covariances.length;    	compilable	  [FE]  DimensionMismatchException  	6	5	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [CE]  cannot  find  symbol  col  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  col	12	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [CE]  cannot  find  symbol  mean  [FE]              AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.evaluate(null,  col);  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.evaluate(null,    col);    }    	non-compiled	[CE]  cannot  find  symbol  mean	12	None	replace
15	[BUG]  [BUGGY]  rng  =  means.getRandomMatDecimal();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  rng  =  means.getRandomMatDecimal();  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  means.getRandomMatDecimal();	      rng    =    rng.getRandomMatDecimal();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
16	[BUG]  [BUGGY]  rng  =  means.getRawMatEigenvalues();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  rng  =  means.getRawMatEigenvalues();  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  means.getRawMatEigenvalues();	      rng    =    rng.getRawMatEigenvalues();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  final  double  dim  =  rng.length;  [CE]  cannot  find  symbol  length  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  double  dim  =  rng.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  rng.length;	  final    double    dim    =    means.length;    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.getDecomposition();    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [CE]  cannot  find  symbol  mean  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	for(int  i  =  0;  i  <  mean.length;  i++)  {  covariances[i]  =  rng.getDecomposition();  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.getDecomposition();    }    	non-compiled	[CE]  cannot  find  symbol  mean	11	None	replace
22	[BUG]  [BUGGY]  rng  =  means.getRandomMatrix();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  rng  =  means.getRandomMatrix();  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  means.getRandomMatrix();	      rng    =    rng.getRandomMatrix();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
23	[BUG]  [BUGGY]  final  double  dim  =  evec.length;  [CE]  cannot  find  symbol  evec  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  double  dim  =  evec.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  evec.length;	  final    double    dim    =    means.length;    	non-compiled	[CE]  cannot  find  symbol  evec	4	None	replace
24	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
25	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
26	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i],  }	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(covMatEigenvectors  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  covariances[i]  =  rng.getValue();  }	      if(covMatEigenvectors!=    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    covariances[i]    =    rng.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factor!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant[i].	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  rng  =  mean.getRandomMatDecimal();  [CE]  cannot  find  symbol  mean  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  rng  =  mean.getRandomMatDecimal();  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  mean.getRandomMatDecimal();	      rng    =    rng.getRandomMatDecimal();    	non-compiled	[CE]  cannot  find  symbol  mean	2	None	replace
31	[BUG]  [BUGGY]  final  double  dim  =  means.length  -  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  final  double  dim  =  means.length  -  1;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	final  double  dim  =  means.length  -  1;	  final    double    dim    =    means.length;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	4	None	replace
32	[BUG]  [BUGGY]  if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
33	[BUG]  [BUGGY]  if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i    	non-compiled	[CE]  ']'  expected	9	None	replace
34	[BUG]  [BUGGY]  double  dim  =  covariances.length;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  double  dim  =  covariances.length;  [BUGGY]      if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	double  dim  =  covariances.length;	  final    int    dim    =    covariances.length;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	6	None	replace
35	[BUG]  [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(evec  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  ')'  expected	8	None	replace
36	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covarianceMatrixDeterminant	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i],    	non-compiled	[CE]  ')'  expected	8	None	replace
37	[BUG]  [BUGGY]  if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factory!=  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	if(factory  ==  null)  {  for(int  i  =  0;  i  <  means.length;  i++)  {  if(covMatEigenvectors[i][i]!=  factor)  {  throw  new  DimensionMismatchException(covMatEigenvectors[i].	      if(covMatEigenvectors    ==    null)    {    for(int    i    =    0;    i    <    means.length;    i++)    {    if(covMatEigenvectors[i][i]!=    factor)    {    throw    new    DimensionMismatchException(covMatEigenvectors[i].    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  rng  =  mean.getRawMatEigenvalues();  [CE]  cannot  find  symbol  mean  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);    [BUGGY]  rng  =  mean.getRawMatEigenvalues();  [BUGGY]    final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	rng  =  mean.getRawMatEigenvalues();	      rng    =    rng.getRawMatEigenvalues();    	non-compiled	[CE]  cannot  find  symbol  mean	1	None	replace
