bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  means,  v);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  means,  v);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  means,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    means);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	add	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  AssertionError  	21	2	replace
3	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrixInverse);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  AssertionError  	21	2	replace
4	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.multiply(covMatEigenvectors);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.multiply(covMatEigenvectors);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.multiply(covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.multiply(covMatEigenvectors);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	24	None	replace
5	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix,  means);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,double[])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix,  means);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrix,  means);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,double[])	10	None	replace
6	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix)	10	None	replace
7	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <	  for(int    dim    =    0;    dim    <    dim;    v++)    {    double[][]    covariances    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	for(int  dim  =  0;  dim  <  covariances.length;  v++)  {  final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <	  for(int    dim    =    0;    dim    <    dim;    v++)    {    double[][]    covariances    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiply(int,RealMatrix)  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(dim);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(int,RealMatrix)	2	None	replace
10	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  mean);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  mean);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  mean);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(dim);    	non-compiled	[CE]  cannot  find  symbol  mean	2	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  mean,  v);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  mean,  v);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  mean,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(dim,  v,  covMatEigenvectors);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(dim,  v,  covMatEigenvectors);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  mean.multiplyEntry(dim,  v,  covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
13	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(dim);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(dim);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiply(dim);	  double[][]    covariances    =    covMatEigenvectors.multiply();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	18	None	replace
14	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixDeterminant,  means);  [CE]  no  suitable  method  found  for  multiplyEntry(int,double,double[])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixDeterminant,  means);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixDeterminant,  means);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,double,double[])	19	None	replace
15	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,double)  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RealMatrix,double)	19	None	replace
16	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(dim,  means);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(dim,  means);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	16	None	replace
17	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  samplingMatrix);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  samplingMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  samplingMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    samplingMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	6	None	replace
18	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  samplingMatrix);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  samplingMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  samplingMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    samplingMatrix);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
19	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(v,    dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.getRows();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                  AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.getRows();  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.getRows();	  double[][]    covariances    =    covMatEigenvectors.getColumns();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	14	None	replace
21	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(evec);  [CE]  cannot  find  symbol  evec  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(evec);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(evec);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(sampleMatrix);    	non-compiled	[CE]  cannot  find  symbol  evec	4	None	replace
22	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  mean);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  mean);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  mean);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covMatDec);    	non-compiled	[CE]  cannot  find  symbol  mean	22	None	replace
23	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  means);  [CE]  no  suitable  method  found  for  multiply(EigenDecomposition,double[])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  means);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  means);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covMatDec);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(EigenDecomposition,double[])	22	None	replace
24	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);  [CE]  cannot  find  symbol  covariance  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  covariance);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    v);    	non-compiled	[CE]  cannot  find  symbol  covariance	1	None	replace
25	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  mean);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  mean);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  mean);	  final    double[][]    covariances    =    covMatEigenvectors.transpose(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
26	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  means);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.transpose(dim,  means);	  final    double[][]    covariances    =    covMatEigenvectors.transpose(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  rng);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  rng);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  rng);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	17	None	replace
28	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec);  [CE]  cannot  find  symbol  evec  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    mean);    	non-compiled	[CE]  cannot  find  symbol  evec	11	None	replace
29	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	20	None	add
30	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  Final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  Final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    Final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  ';'  expected	20	None	add
31	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  means);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  means);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrix,  means);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrix);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
32	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrix);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
33	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  col,  means);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
34	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  covarianceMatrixInverse,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	25	None	replace
35	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  samplingMatrix,  covarianceMatrixDeterminant);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  samplingMatrix,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  samplingMatrix,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	25	None	replace
36	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  v);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  v);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    mean);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
37	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.transpose();  for(int  row  =  0;  row  <	  for(int    dim    =    0;    dim    <    dim;    v++)    {    double[][]    covariances    =    covMatEigenvectors.transpose();    for(int    row    =    0;    row    <    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(rng,  col);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(rng,  col);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(rng,  col);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
39	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrixDeterminant);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	25	None	replace
40	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  v  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  v	25	None	replace
41	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covMatDec);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiply(covMatDec);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiply(covMatDec);	  double[][]    covariances    =    covMatEigenvectors.multiply(covMatEigenvectors);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	24	None	replace
42	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiply(EigenDecomposition,RealMatrix)  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covMatDec,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covMatDec);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(EigenDecomposition,RealMatrix)	22	None	replace
43	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(null);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	add	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(null);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  NullPointerException  	21	5	replace
44	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(null);  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(null);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(null);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    	compilable	  [FE]  NullPointerException  	21	5	replace
45	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrix);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrix);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
46	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrix);  [CE]  cannot  find  symbol  v  [FE]                  AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	7	None	replace
47	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  final  RealMatrix  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [CE]  variable  covMatEigenvectors  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(covarianceMatrix);  final  RealMatrix  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(covarianceMatrix);    final  RealMatrix  covMatEigenvectors  =  covMatEigenvectors.multiply(covarianceMatrix);	  	non-compiled	[CE]  variable  covMatEigenvectors  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	20	None	add
48	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,double)  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,double)	19	None	replace
49	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  v	19	None	replace
50	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(rng);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.transpose(rng);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  double[][]  covariances  =  covMatEigenvectors.transpose(rng);	  final    double[][]    covariances    =    covMatEigenvectors.transpose(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
51	[BUG]  [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMattrix  tmpMatrix  =  covMatEigenvectors.transpose(dim);	  final    RealMattrix    tmpMatrix    =    covMatEigenvectors.transpose();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);  [CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  rng,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,RandomGenerator,RealMatrix)	10	None	replace
53	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  v,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	10	None	replace
54	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  samplingMatrix);  [CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  samplingMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  rng,  samplingMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    samplingMatrix);    	non-compiled	[CE]  method  transpose  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
55	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(covariance);	  double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	16	None	replace
56	[BUG]  [BUGGY]  double[][]  covvariances  =  covMatEigenvectors.multiplyEntry(dim,  v);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covvariances  =  covMatEigenvectors.multiplyEntry(dim,  v);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covvariances  =  covMatEigenvectors.multiplyEntry(dim,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(v,    dim);    	non-compiled	[CE]  cannot  find  symbol  v	23	None	replace
57	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrix);  [CE]  cannot  find  symbol  evec  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrix);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrix);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  evec	10	None	replace
58	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  0,  means);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  0,  means);  [BUGGY]      final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  0,  means);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    means);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
59	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  dim);  [CE]  no  suitable  method  found  for  multiplyEntry(int,int)  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  dim);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  dim);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry();    	non-compiled	[CE]  no  suitable  method  found  for  multiplyEntry(int,int)	26	None	replace
60	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v);  [CE]  cannot  find  symbol  v  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose(dim,  v);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.transpose(dim,    samplingMatrix);    	non-compiled	[CE]  cannot  find  symbol  v	6	None	replace
61	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  evec  [FE]            AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiplyEntry(dim,  evec,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiplyEntry(dim,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  evec	19	None	replace
62	[BUG]  [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  multiply(int,double)  [FE]              AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrixDeterminant);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	final  RealMatrix  tmpMatrix  =  covMatEigenvectors.multiply(dim,  covarianceMatrixDeterminant);	  final    RealMatrix    tmpMatrix    =    covMatEigenvectors.multiply(dim);    	non-compiled	[CE]  no  suitable  method  found  for  multiply(int,double)	2	None	replace
63	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.multiplyEntry(dim,  col);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }      [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.multiplyEntry(dim,  col);  [BUGGY]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	double[][]  covariances  =  tmpMatEigenvectors.multiplyEntry(dim,  col);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    col);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
