bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  }	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrix    	non-compiled	[CE]  '('  or  '['  expected	27	None	replace
4	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
5	[BUG]  [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
6	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatDec.getEigenvector(v).toArray()    <    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	24	None	replace
7	[BUG]  [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonP	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatDec.getEigenvector(v).toArray()    <    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	24	None	replace
8	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  covariances);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  covariances);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(evec,  v,  covariances);	  covMatEigenvectors.setColumn(evec,    v,    means);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
9	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  covariances,  means);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  covariances,  means);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(evec,  v,  covariances,  means);	  covMatEigenvectors.setColumn(evec,    v,    means);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
10	[BUG]  [BUGGY]  covMatEigenvectors.setRange(dim,  evec);  [CE]  cannot  find  symbol  [FE]            OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRange(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRange(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRange(dim,    evec);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
11	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  dim);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  dim);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec,  dim);	  covMatEigenvectors.setColumn(v,    dim);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	2	None	replace
12	[BUG]  [BUGGY]  covMatEigenvectors.setLine(dim,  evec);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setLine(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setLine(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setLine(dim,    evec);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
13	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  dim,  evec);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  dim,  evec);	  covMatEigenvectors.setColumn(dim,    v,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  means);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  means);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  v,  evec,  means);	  covMatEigenvectors.setColumn(dim,    v,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	3	5	add
16	[BUG]  [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	3	5	add
17	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	3	5	add
18	[BUG]  [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	3	5	add
19	[BUG]  [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setLine(dim,  evec);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setLine(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setLine(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
20	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	12	5	add
21	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	12	5	add
22	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	12	5	add
23	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	12	5	add
24	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setLine(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setLine(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setLine(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
25	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  covariance);  [CE]  cannot  find  symbol  covariance  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  covariance);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  evec,  v,  covariance);	  covMatEigenvectors.setColumn(dim,    evec,    v);    	non-compiled	[CE]  cannot  find  symbol  covariance	25	None	replace
26	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  evec,  means);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  evec,  means);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec,  evec,  means);	  covMatEigenvectors.setColumn(v,    evec,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
27	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  evec);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(evec,  v,  evec);	  covMatEigenvectors.setColumn(v,    evec,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(v,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	covMatEigenvectors.setRow(v,  evec);	  covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  AssertionError  	4	2	replace
29	[BUG]  [BUGGY]  covMatEigenvectors.setRow(v,  evec);  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(v,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRow(v,  evec);	  covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  AssertionError  	4	2	replace
30	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  covarianceMatrix);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  covarianceMatrix);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec,  covarianceMatrix);	  covMatEigenvectors.setColumn(evec,    v,    covarianceMatrix);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	19	None	replace
31	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  means,  covarianceMatrix);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(evec,  v,  means,  covarianceMatrix);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(evec,  v,  means,  covarianceMatrix);	  covMatEigenvectors.setColumn(evec,    v,    covarianceMatrix);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	19	None	replace
32	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
33	[BUG]  [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  ==  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
34	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
35	[BUG]  [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
36	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setDouble(dim,  evec);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]        OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setDouble(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setDouble(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setDouble(dim,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	20	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	for(int  i  =  0;  i  <  evec.length;  i++)  {  if(	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.length;  i++)  {  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvectors.length;  i++)  {  if(  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	for(int  i  =  0;  i  <  covMatEigenvectors.length;  i++)  {  if(	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	10	5	add
40	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	10	5	add
41	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRange(dim,  evec);  covMatEigenvectors.setRange(dim,  evec);  [CE]  cannot  find  symbol  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRange(dim,  evec);  covMatEigenvectors.setRange(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRange(dim,  evec);  covMatEigenvectors.setRange(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
42	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	10	5	add
43	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	compilable	  [FE]  OutOfRangeException  	10	5	add
44	[BUG]  [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  means);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  means);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  means);	  v    =    FastMath.sqrt(covMatEigenvalues[v],    evec);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
45	[BUG]  [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  mean);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  mean);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  mean);	  v    =    FastMath.sqrt(covMatEigenvalues[v],    evec);    	non-compiled	[CE]  cannot  find  symbol  mean	16	None	replace
46	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
47	[BUG]  [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
48	[BUG]  [BUGGY]  if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	13	None	replace
49	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  covarianceMatrix);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  covarianceMatrix);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  evec,  v,  covarianceMatrix);	  covMatEigenvectors.setColumn(evec,    v,    covarianceMatrix);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	19	None	replace
50	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setRange(dim,  evec);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setRange(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  v);  covMatEigenvectors.setRange(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRange(dim,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	14	None	replace
51	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  [CE]  cannot  find  symbol  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
52	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  mean);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  mean);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  v,  evec,  mean);	  covMatEigenvectors.setColumn(dim,    v,    evec);    	non-compiled	[CE]  cannot  find  symbol  mean	1	None	replace
53	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  means);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  means);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec,  means);	  covMatEigenvectors.setColumn(evec,    v,    means);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
54	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [CE]  cannot  find  symbol  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setDouble(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
55	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  v);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec,  v);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec,  v);	  covMatEigenvectors.setColumn(v,    evec,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
56	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  v);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  v,  evec,  v);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  v,  evec,  v);	  covMatEigenvectors.setColumn(v,    evec,    evec);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	7	None	replace
57	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setLine(dim,  evec);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setLine(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setLine(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setLine(dim,    evec);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
58	[BUG]  [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  v);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  v);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  v);	  v    =    FastMath.sqrt(covMatEigenvalues[v],    evec);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
59	[BUG]  [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRemove(dim,  evec);  [CE]  cannot  find  symbol  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setRow(dim,  evec);  covMatEigenvectors.setRemove(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setRow(dim,    evec);    covMatEigenvectors.setRemove(dim,  evec);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
60	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  evec.length;  i++)  {  if(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  For(int  i  =  0;  i  <  evec.length;  i++)  {  if(  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	For(int  i  =  0;  i  <  evec.length;  i++)  {  if(	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(    	non-compiled	[CE]  '.class'  expected	22	None	replace
61	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
62	[BUG]  [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  >  0)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	11	5	replace
63	[BUG]  [BUGGY]  if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(v  >  evec)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setColumn(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,    evec);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	11	None	replace
64	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
65	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],	  if(evec    ==    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatri    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  covMatEigenvectors.setDouble(dim,  evec);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setDouble(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setDouble(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setDouble(dim,    evec);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
67	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
68	[BUG]  [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
69	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
70	[BUG]  [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  evec);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,    evec);    	compilable	  [FE]  OutOfRangeException  	13	5	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	for(int  i  =  0;  i  <  evec.length;  i++)  {  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if    	non-compiled	[CE]  '('  expected	23	None	replace
72	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  evec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  if(evec    ==    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
73	[BUG]  [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrix    	non-compiled	[CE]  '('  or  '['  expected	27	None	replace
74	[BUG]  [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec  ==  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMat    	non-compiled	[CE]  ')'  expected	28	None	replace
75	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setRange(dim,  evec);  [CE]  cannot  find  symbol  [FE]            OutOfRangeException      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setRange(dim,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(v,  evec);  covMatEigenvectors.setRange(dim,  evec);	          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRange(dim,    evec);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
76	[BUG]  [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  evec);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  evec);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	v  =  FastMath.sqrt(covMatEigenvalues[v],  evec,  evec);	  v    =    FastMath.sqrt(covMatEigenvalues[v],    evec);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
77	[BUG]  [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  means);  [CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  covMatEigenvectors.setColumn(dim,  evec,  v,  means);  [BUGGY]      }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	covMatEigenvectors.setColumn(dim,  evec,  v,  means);	  covMatEigenvectors.setColumn(evec,    v,    means);    	non-compiled	[CE]  method  setColumn  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	6	None	replace
78	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatDec.length;  i++)  {  if(	  for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
79	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  v.length;  i++)  {  if(covMatDec.getEigenvector(v).toArray()  <  0)  {  throw  new  NonPositiveDef	  if(evec    ==    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatDec.getEigenvector(v).toArray()    <    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	21	None	replace
80	[BUG]  [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  v);  covMatEigenvectors.setRow(dim,  v);  [CE]  method  setRow  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;  [FE]    OutOfRangeException    [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]          covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setColumn(dim,  evec);  covMatEigenvectors.setRow(dim,  v);  covMatEigenvectors.setRow(dim,  v);  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	                covMatEigenvectors.setColumn(dim,        evec);        covMatEigenvectors.setColumn(dim,    evec);    covMatEigenvectors.setRow(dim,  v);  covMatEigenvectors.setRow(dim,  v);	  	non-compiled	[CE]  method  setRow  in  class  AbstractRealMatrix  cannot  be  applied  to  given  types;	10	None	add
81	[BUG]  [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();      [BUGGY]  if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix  [BUGGY]      covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	if(evec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrix	  if(evec!=    null)    {    for(int    i    =    0;    i    <    covMatDec.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	17	None	replace
