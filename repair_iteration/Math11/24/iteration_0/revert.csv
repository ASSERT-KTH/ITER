projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=covMatDec.getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=covMatDec.getSolver().getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.reset();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().reset();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covMatDec.getSolver().getInverse());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covMatDec.getSolver().getInverse());covarianceMatrixInverse=covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteMatri
