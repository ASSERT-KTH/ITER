projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=covMatDec.getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=covMatDec.getSolver().getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.reset();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().reset();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covMatDec.getSolver().getInverse());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covMatDec.getSolver().getInverse());covarianceMatrixInverse=covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteMatri
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().inverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().setInverse(false);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=covarianceMatDec.getSolver().getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127((RealMatrix)covMatDec).getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127((RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefi
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();covMatDec.getSolver().getRealEigenvectors();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();covarianceMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatEigenvalues.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixInverse=covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatrixInverse.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatrixInverse.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefi
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().setInverse(covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127doublefactor=factor.doubleValue();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127doublefactor=factor.evaluate(rng);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covarianceMatrixDeterminant=factor.getSolver().getDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();covMatDec.getSolver().getOutverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covarianceMatrix.getSolver().getInverse());covarianceMatrixInverse=covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.set();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec!=null){for(inti=0;i<covarianceMatrixInverse.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covarianceMatrixInverse.getSolver().getInverse());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec.getSolver().getInverse();covMatDec.getSolver().getRealMatrix();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec==null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec==null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127if(covMatDec==null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]==0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127double[][]covariances=factor.getRealMatEigenvectors();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127doublefactor=factor.computeValue(covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java127covMatDec=newEigenDecomposition(covarianceMatDec.getSolver().getInverse());
