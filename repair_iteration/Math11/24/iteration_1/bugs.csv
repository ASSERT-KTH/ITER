bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getSolver().getDeterminant();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getSolver().getDeterminant();  [BUGGY]    final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixDeterminant  =  covMatDec.getSolver().getDeterminant();	covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  	non-compiled	[CE]  cannot  find  symbol	47	None	replace
2	[BUG]  [BUGGY]    [CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized  [FE]      AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    [BUGGY]    final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	  	covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  	non-compiled	[CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized	47	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec.getSolver().getInverse();  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	add	    covMatDec.getSolver().getInverse();		compilable	  [FE]  AssertionError  	48	1	add
4	[BUG]  [BUGGY]    covMatDec.getSolver().getInverse();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec.getSolver().getInverse();  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    covMatDec.getSolver().getInverse();		compilable	  [FE]  AssertionError  	48	1	add
5	[BUG]  [BUGGY]    covMatDec.reset();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec.reset();  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    covMatDec.reset();		non-compiled	[CE]  cannot  find  symbol	48	None	add
6	[BUG]  [BUGGY]    covMatDec.getSolver().reset();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec.getSolver().reset();  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    covMatDec.getSolver().reset();		non-compiled	[CE]  cannot  find  symbol	48	None	add
7	[BUG]  [BUGGY]    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  [CE]  cannot  assign  a  value  to  final  variable  covMatDec  [FE]    AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatDec	48	None	add
8	[BUG]  [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]      AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteM		non-compiled	[CE]  '('  or  '['  expected	48	None	add
9	[BUG]  [BUGGY]    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [CE]  cannot  assign  a  value  to  final  variable  covMatDec  [FE]        AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    covMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covMatDec	48	None	add
10	[BUG]  [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]    AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM		non-compiled	[CE]  '('  or  '['  expected	48	None	add
11	[BUG]  [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]      AssertionError  [CONTEXT]  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();    [BUGGY]    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatri  [BUGGY]  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	    if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatri		non-compiled	[CE]  '('  or  '['  expected	48	None	add
