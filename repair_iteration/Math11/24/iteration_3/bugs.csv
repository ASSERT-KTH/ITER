bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  RealMatrix)covMatDec).getSolver(),  covarianceMatrixInverse.getInverse();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  ((  RealMatrix)covMatDec).getSolver(),  covarianceMatrixInverse.getInverse();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	((  RealMatrix)covMatDec).getSolver(),  covarianceMatrixInverse.getInverse();	  ((    RealMatrix)covMatDec).getSolver().getInverse();    	non-compiled	[CE]  ';'  expected	4	None	replace
2	[BUG]  [BUGGY]  double  factor  =  covarianceMatrixInverse.computeValue(factor);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covarianceMatrixInverse.computeValue(factor);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covarianceMatrixInverse.computeValue(factor);	  double    factor    =    factor.computeValue(covarianceMatrixInverse);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
3	[BUG]  [BUGGY]  double  factor  =  covarianceMatrix.computeValue(factor);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covarianceMatrix.computeValue(factor);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covarianceMatrix.computeValue(factor);	  double    factor    =    factor.computeValue(covarianceMatrixInverse);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
4	[BUG]  [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef	  if(covMatDec    ==    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
5	[BUG]  [BUGGY]  covarianceMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]            AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatDec.getSolver().getInverse();	          covMatDec.getSolver().getInverse();    covarianceMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	11	None	replace
6	[BUG]  [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized	9	None	replace
7	[BUG]  [BUGGY]  covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
8	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covarianceMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covarianceMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covarianceMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefi    	non-compiled	[CE]  '('  or  '['  expected	7	None	replace
9	[BUG]  [BUGGY]  covMatDec.getSolver().setInverse(true);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covMatDec.getSolver().setInverse(true);  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covMatDec.getSolver().setInverse(true);	  covMatDec.getSolver().setInverse(false);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
10	[BUG]  [BUGGY]  double  factor  =  covarianceMatrixInverse.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covarianceMatrixInverse.doubleValue();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covarianceMatrixInverse.doubleValue();	  double    factor    =    factor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
11	[BUG]  [BUGGY]  double  factor  =  covarianceMatrix.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covarianceMatrix.doubleValue();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covarianceMatrix.doubleValue();	  double    factor    =    factor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
12	[BUG]  [BUGGY]  covarianceMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatDec  =  new  EigenDecomposition(covMatDec.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();	  covMatDec    =    new    EigenDecomposition(covarianceMatrix.getSolver().getInverse());    covarianceMatrixInverse    =    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	23	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	add	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	compilable	  [FE]  AssertionError  	8	1	add
14	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	compilable	  [FE]  AssertionError  	8	1	add
15	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]      AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	8	None	add
16	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  ')'  expected	8	None	add
17	[BUG]  [BUGGY]  double  factor  =  rng.evaluate(factor);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  rng.evaluate(factor);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  rng.evaluate(factor);	  double    factor    =    factor.evaluate(rng);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
18	[BUG]  [BUGGY]  double  factor  =  rng.evaluate(factory);  [CE]  cannot  find  symbol  factory  [FE]                  AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  rng.evaluate(factory);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  rng.evaluate(factory);	  double    factor    =    factor.evaluate(rng);    	non-compiled	[CE]  cannot  find  symbol  factory	20	None	replace
19	[BUG]  [BUGGY]  covarianceMatrixInverse  =  this.covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covMatDec  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatrixInverse  =  this.covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixInverse  =  this.covMatDec.getSolver().getInverse();	  covarianceMatrixInverse    =    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  covMatDec	15	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  covMatDec.getRealMatEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double[][]  covariances  =  covMatDec.getRealMatEigenvectors();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double[][]  covariances  =  covMatDec.getRealMatEigenvectors();	  double[][]    covariances    =    factor.getRealMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	31	None	replace
21	[BUG]  [BUGGY]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.getSolver().getDeterminant();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.getSolver().getDeterminant();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixDeterminant  =  covarianceMatrixInverse.getSolver().getDeterminant();	  covarianceMatrixDeterminant    =    factor.getSolver().getDeterminant();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
22	[BUG]  [BUGGY]  covarianceMatDeterminant  =  covMatDec.getSolver().getDeterminant();  [CE]  cannot  find  symbol  covarianceMatDeterminant  [FE]            AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatDeterminant  =  covMatDec.getSolver().getDeterminant();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatDeterminant  =  covMatDec.getSolver().getDeterminant();	  covarianceMatrixDeterminant    =    covarianceMatDec.getSolver().getDeterminant();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDeterminant	3	None	replace
23	[BUG]  [BUGGY]  ((  RealMatrix)covMatDec).getSamples().add(covarianceMatEigenvalues[i]);  [CE]  cannot  find  symbol  covarianceMatEigenvalues  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  ((  RealMatrix)covMatDec).getSamples().add(covarianceMatEigenvalues[i]);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	((  RealMatrix)covMatDec).getSamples().add(covarianceMatEigenvalues[i]);	  ((    RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i]);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatEigenvalues	5	None	replace
24	[BUG]  [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
25	[BUG]  [BUGGY]  if(covarianceMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covarianceMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covarianceMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
26	[BUG]  [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatrixInverse.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefi    	non-compiled	[CE]  '('  or  '['  expected	17	None	replace
27	[BUG]  [BUGGY]  double  factor  =  covMatDec.computeValue(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covMatDec.computeValue(covarianceMatrixInverse);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covMatDec.computeValue(covarianceMatrixInverse);	  double    factor    =    factor.computeValue(covarianceMatrixInverse);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
28	[BUG]  [BUGGY]  covarianceMatrixInverse  =  covMatDec.getSolver().getRealMatrix();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatrixInverse  =  covMatDec.getSolver().getRealMatrix();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixInverse  =  covMatDec.getSolver().getRealMatrix();	  covarianceMatrixInverse    =    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  double[][]  covariances  =  factor.getRealEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double[][]  covariances  =  factor.getRealEigenvectors();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double[][]  covariances  =  factor.getRealEigenvectors();	  double[][]    covariances    =    factor.getRealMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	31	None	replace
30	[BUG]  [BUGGY]  covMatDec.add(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covMatDec.add(covarianceMatrixInverse);  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covMatDec.add(covarianceMatrixInverse);	  covMatDec.set();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
31	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositive  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositive  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec!=  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositive	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatrixInverse.length;    i++)    {    if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	25	None	replace
32	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized	9	None	replace
33	[BUG]  [BUGGY]  ((  RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i],  covarianceMatrixInverse);  [CE]  cannot  find  symbol  covMatEigenvalues  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  ((  RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i],  covarianceMatrixInverse);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	((  RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i],  covarianceMatrixInverse);	  ((    RealMatrix)covMatDec).getSamples().add(covMatEigenvalues[i]);    	non-compiled	[CE]  cannot  find  symbol  covMatEigenvalues	5	None	replace
34	[BUG]  [BUGGY]  covarianceMatrixDeterminant  =  rng.getSolver().getDeterminant();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatrixDeterminant  =  rng.getSolver().getDeterminant();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixDeterminant  =  rng.getSolver().getDeterminant();	  covarianceMatrixDeterminant    =    factor.getSolver().getDeterminant();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
35	[BUG]  [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covarianceMatrixInverse.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatrixInverse.length;    i++)    {    if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	25	None	replace
36	[BUG]  [BUGGY]  if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec  ==  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec  ==  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec  ==  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
37	[BUG]  [BUGGY]  covarianceMatrixInverse  =  covMatDec.getSolver().inverse();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatrixInverse  =  covMatDec.getSolver().inverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatrixInverse  =  covMatDec.getSolver().inverse();	  covarianceMatrixInverse    =    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
38	[BUG]  [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covMatDec  ==  null)  {  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	14	None	replace
39	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
40	[BUG]  [BUGGY]  double[][]  covariances  =  factor.getRalMatEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double[][]  covariances  =  factor.getRalMatEigenvectors();  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double[][]  covariances  =  factor.getRalMatEigenvectors();	  double[][]    covariances    =    factor.getRealMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	31	None	replace
41	[BUG]  [BUGGY]  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrix.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrix.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covarianceMatDec  =  new  EigenDecomposition(covarianceMatrix.getSolver().getInverse());  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();	  covMatDec    =    new    EigenDecomposition(covarianceMatrix.getSolver().getInverse());    covarianceMatrixInverse    =    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	23	None	replace
42	[BUG]  [BUGGY]  covMatDec.add(covMatDec);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  covMatDec.add(covMatDec);  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	covMatDec.add(covMatDec);	  covMatDec.set();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
43	[BUG]  [BUGGY]  if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec[i]  <  0)  {  throw  new  NonPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec[i]  <  0)  {  throw  new  NonPositiveDef  [BUGGY]      covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	if(covarianceMatrixInverse!=  null)  {  for(int  i  =  0;  i  <  covarianceMatEigenvalues.length;  i++)  {  if(covMatDec[i]  <  0)  {  throw  new  NonPositiveDef	  if(covMatDec!=    null)    {    for(int    i    =    0;    i    <    covarianceMatEigenvalues.length;    i++)    {    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
44	[BUG]  [BUGGY]  double  factor  =  covarianceMatrixInverse.computeValue(factory);  [CE]  cannot  find  symbol  factory  [FE]                AssertionError      [CONTEXT]      this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();        [BUGGY]  double  factor  =  covarianceMatrixInverse.computeValue(factory);  [BUGGY]        final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	double  factor  =  covarianceMatrixInverse.computeValue(factory);	  double    factor    =    factor.computeValue(covarianceMatrixInverse);    	non-compiled	[CE]  cannot  find  symbol  factory	32	None	replace
