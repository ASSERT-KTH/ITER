bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int dim = getDimension(); [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { [BUGGY] final int dim = getDimension(); [BUGGY] if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { [BUGGY] [BUGGY] final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	
3	[BUG] [BUGGY] if (vals.length != dim) { [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); [BUGGY] if (vals.length != dim) { [BUGGY] throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); [BUGGY] [BUGGY] if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	
5	[BUG] [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) *  getExponentTerm(vals); [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) *   FastMath.pow(covarianceMatrixDeterminant, -0.5) *      getExponentTerm(vals); [BUGGY] FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } [BUGGY] [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) *   FastMath.pow(covarianceMatrixDeterminant, -0.5) *      getExponentTerm(vals); FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	
7	[BUG] [BUGGY] final double[] centered = new double[values.length]; [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { [BUGGY] final double[] centered = new double[values.length]; [BUGGY] for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { [BUGGY] [BUGGY] final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	
9	[BUG] [BUGGY] for (int i = 0; i < centered.length; i++) { [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; [BUGGY] for (int i = 0; i < centered.length; i++) { [BUGGY] centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; [BUGGY] [BUGGY] for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	
11	[BUG] [BUGGY] centered[i] = values[i] - getMeans()[i]; [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { [BUGGY] centered[i] = values[i] - getMeans()[i]; [BUGGY] } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { [BUGGY] [BUGGY] centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	
13	[BUG] [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } [BUGGY] [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] double sum = 0; [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	
17	[BUG] [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	
19	[BUG] [BUGGY] sum += preMultiplied[i] * centered[i]; [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] sum += preMultiplied[i] * centered[i]; [BUGGY] } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] [BUGGY] sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	
21	[BUG] [BUGGY] return FastMath.exp(-0.5 * sum); [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } [BUGGY] return FastMath.exp(-0.5 * sum); [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } [BUGGY] [BUGGY] return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	
23	[BUG] [BUGGY] return MathArrays.copyOf(means); [FE] AssertionError [CONTEXT] public double[] getMeans() { [BUGGY] return MathArrays.copyOf(means); [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] getMeans [RETURN_TYPE] double[]  [VARIABLES] boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.5773502691896258	164	164	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double[] getMeans() { [BUGGY] [BUGGY] return MathArrays.copyOf(means); } [CLASS] MultivariateNormalDistribution [METHOD] getMeans [RETURN_TYPE] double[]  [VARIABLES] boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.5773502691896258	164	164	1	add	
25	[BUG] [BUGGY] this(new Well19937c(), means, covariances); [FE] AssertionError [CONTEXT] public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { [BUGGY] this(new Well19937c(), means, covariances); [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] MultivariateNormalDistribution(double[],double[][])  final double[] means final double[][] covariances [VARIABLES] double[][] covariances boolean double[] means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix double covarianceMatrixDeterminant  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	76	76	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { [BUGGY] [BUGGY] this(new Well19937c(), means, covariances); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] MultivariateNormalDistribution(double[],double[][])  final double[] means final double[][] covariances [VARIABLES] double[][] covariances boolean double[] means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix double covarianceMatrixDeterminant  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	76	76	1	add	
27	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { this(new Well19937c(), means, covariances); [BUGGY] } [BUGGY]  [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] MultivariateNormalDistribution(double[],double[][])  final double[] means final double[][] covariances [VARIABLES] double[][] covariances boolean double[] means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix double covarianceMatrixDeterminant  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	77	77	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public MultivariateNormalDistribution(final double[] means, final double[][] covariances) throws SingularMatrixException, DimensionMismatchException, NonPositiveDefiniteMatrixException { this(new Well19937c(), means, covariances); [BUGGY] [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] MultivariateNormalDistribution(double[],double[][])  final double[] means final double[][] covariances [VARIABLES] double[][] covariances boolean double[] means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix double covarianceMatrixDeterminant  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	77	77	1	add	
29	[BUG] [BUGGY] super(rng, means.length); [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { [BUGGY] super(rng, means.length); [BUGGY]  final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	103	103	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { [BUGGY] [BUGGY] super(rng, means.length); final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	103	103	1	add	
31	[BUG] [BUGGY] final int dim = means.length; [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); [BUGGY] final int dim = means.length; [BUGGY]  if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); [BUGGY] [BUGGY] final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	105	105	1	add	
33	[BUG] [BUGGY] if (covariances.length != dim) { [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; [BUGGY] if (covariances.length != dim) { [BUGGY] throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; [BUGGY] [BUGGY] if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	107	107	1	add	
35	[BUG] [BUGGY] for (int i = 0; i < dim; i++) { [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } [BUGGY] for (int i = 0; i < dim; i++) { [BUGGY] if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);   [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } [BUGGY] [BUGGY] for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);   [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	add	
37	[BUG] [BUGGY] if (dim != covariances[i].length) { [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { [BUGGY] if (dim != covariances[i].length) { [BUGGY] throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] NonPositiveDefiniteMatrixException { super(rng, means.length); final int dim = means.length; if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { [BUGGY] [BUGGY] if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	112	112	1	add	
39	[BUG] [BUGGY] this.means = MathArrays.copyOf(means); [FE] AssertionError [CONTEXT] if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [BUGGY] this.means = MathArrays.copyOf(means); [BUGGY]  covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant(); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	117	117	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [BUGGY] [BUGGY] this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant(); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	117	117	1	add	
41	[BUG] [BUGGY] covarianceMatrix = new Array2DRowRealMatrix(covariances); [FE] AssertionError [CONTEXT] } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); [BUGGY] covarianceMatrix = new Array2DRowRealMatrix(covariances); [BUGGY]   final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();   [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); [BUGGY] [BUGGY] covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();   [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	add	
43	[BUG] [BUGGY] final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix); [FE] AssertionError [CONTEXT] if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  [BUGGY] final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix); [BUGGY]   covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  [BUGGY] [BUGGY] final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	add	
45	[BUG] [BUGGY] covarianceMatrixInverse = covMatDec.getSolver().getInverse(); [FE] AssertionError [CONTEXT] } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  [BUGGY] covarianceMatrixInverse = covMatDec.getSolver().getInverse(); [BUGGY]  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  [BUGGY] [BUGGY] covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	add	
47	[BUG] [BUGGY] covarianceMatrixDeterminant = covMatDec.getDeterminant(); [FE] AssertionError [CONTEXT] this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  [BUGGY] covarianceMatrixDeterminant = covMatDec.getDeterminant(); [BUGGY]   final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  [BUGGY] [BUGGY] covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	127	127	1	add	
49	[BUG] [BUGGY] final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); [FE] AssertionError [CONTEXT]  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  [BUGGY] final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); [BUGGY]  for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	130	130	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  [BUGGY] [BUGGY] final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	130	130	1	add	
51	[BUG] [BUGGY] for (int i = 0; i < covMatEigenvalues.length; i++) { [FE] AssertionError [CONTEXT] final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); [BUGGY] for (int i = 0; i < covMatEigenvalues.length; i++) { [BUGGY] if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	132	132	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); [BUGGY] [BUGGY] for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	132	132	1	add	
53	[BUG] [BUGGY] if (covMatEigenvalues[i] < 0) { [FE] AssertionError [CONTEXT]  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { [BUGGY] if (covMatEigenvalues[i] < 0) { [BUGGY] throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant();  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { [BUGGY] [BUGGY] if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	
55	[BUG] [BUGGY] final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); [FE] AssertionError [CONTEXT]  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  [BUGGY] final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); [BUGGY] for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	139	139	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  [BUGGY] [BUGGY] final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	139	139	1	add	
57	[BUG] [BUGGY] for (int v = 0; v < dim; v++) { [FE] AssertionError [CONTEXT] final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); [BUGGY] for (int v = 0; v < dim; v++) { [BUGGY] final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	140	140	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] covMatEigenvalues = covMatDec.getRealEigenvalues(); for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); [BUGGY] [BUGGY] for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	140	140	1	add	
59	[BUG] [BUGGY] final double[] evec = covMatDec.getEigenvector(v).toArray(); [FE] AssertionError [CONTEXT] for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { [BUGGY] final double[] evec = covMatDec.getEigenvector(v).toArray(); [BUGGY] covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	141	141	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { [BUGGY] [BUGGY] final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	141	141	1	add	
61	[BUG] [BUGGY] covMatEigenvectors.setColumn(v, evec); [FE] AssertionError [CONTEXT] for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); [BUGGY] covMatEigenvectors.setColumn(v, evec); [BUGGY] } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < covMatEigenvalues.length; i++) { if (covMatEigenvalues[i] < 0) { throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0); } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); [BUGGY] [BUGGY] covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	142	142	1	add	
63	[BUG] [BUGGY] final RealMatrix tmpMatrix = covMatEigenvectors.transpose(); [FE] AssertionError [CONTEXT] } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } [BUGGY] final RealMatrix tmpMatrix = covMatEigenvectors.transpose(); [BUGGY]   for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } [BUGGY] [BUGGY] final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	145	145	1	add	
65	[BUG] [BUGGY] for (int row = 0; row < dim; row++) { [FE] AssertionError [CONTEXT]  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  [BUGGY] for (int row = 0; row < dim; row++) { [BUGGY] final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  [BUGGY] [BUGGY] for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	add	
67	[BUG] [BUGGY] final double factor = FastMath.sqrt(covMatEigenvalues[row]); [FE] AssertionError [CONTEXT] final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { [BUGGY] final double factor = FastMath.sqrt(covMatEigenvalues[row]); [BUGGY] for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim); for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { [BUGGY] [BUGGY] final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	149	149	1	add	
69	[BUG] [BUGGY] for (int col = 0; col < dim; col++) { [FE] AssertionError [CONTEXT] for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); [BUGGY] for (int col = 0; col < dim; col++) { [BUGGY] tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	150	150	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int v = 0; v < dim; v++) { final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); [BUGGY] [BUGGY] for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	150	150	1	add	
71	[BUG] [BUGGY] tmpMatrix.multiplyEntry(row, col, factor); [FE] AssertionError [CONTEXT] final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { [BUGGY] tmpMatrix.multiplyEntry(row, col, factor); [BUGGY] } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] evec = covMatDec.getEigenvector(v).toArray(); covMatEigenvectors.setColumn(v, evec); } final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { [BUGGY] [BUGGY] tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	add	
73	[BUG] [BUGGY] samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [FE] AssertionError [CONTEXT] final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } [BUGGY] samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RealMatrix tmpMatrix = covMatEigenvectors.transpose();  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } [BUGGY] [BUGGY] samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	155	155	1	add	
75	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT]  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [BUGGY] } [BUGGY]  [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int row = 0; row < dim; row++) { final double factor = FastMath.sqrt(covMatEigenvalues[row]); for (int col = 0; col < dim; col++) { tmpMatrix.multiplyEntry(row, col, factor); } } samplingMatrix = covMatEigenvectors.multiply(tmpMatrix); [BUGGY] [BUGGY] } [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	add	
