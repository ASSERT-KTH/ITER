bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();	  int    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminant();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
2	[BUG]  [BUGGY]  int  dest  =  getDimension();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  int  dest  =  getDimension();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	int  dest  =  getDimension();	          double    dest    =    getDimension();    int    dest    =    getDimension();    	non-compiled	[CE]  missing  return  statement	10	None	replace
3	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentMatrixInverse();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentMatrixInverse();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getExponentMatrixInverse();	  double[]    covarianceMatrixDeterminant    =    getExponentMatrix();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
4	[BUG]  [BUGGY]  Double  dest  =  getDimension();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  Double  dest  =  getDimension();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	Double  dest  =  getDimension();	          double    dest    =    getDimension();    Double    dest    =    getDimension();    	non-compiled	[CE]  incompatible  types	9	None	replace
5	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  dim);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  dim);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  dim);	  double    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminant(vals);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
6	[BUG]  [BUGGY]  double  dim  =  getDimension()  *  vals.length;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  *  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  *  vals.length;	  double    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	23	None	replace
7	[BUG]  [BUGGY]  double  dim  =  getDimension()  /  vals.length;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  /  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  /  vals.length;	  double    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	23	None	replace
8	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);  [CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);	  double    covarianceMatrixDeterminant    =    getExponentTerm(vals);    	non-compiled	[CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	26	None	replace
9	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension(vals);  [CE]  method  getDimension  in  class  AbstractMultivariateRealDistribution  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getDimension(vals);	  double    covarianceMatrixDeterminant    =    getExponentTerm(vals);    	non-compiled	[CE]  method  getDimension  in  class  AbstractMultivariateRealDistribution  cannot  be  applied  to  given  types;	26	None	replace
10	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  *  2;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  *  2;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension()  *  2;	  double[]    covarianceMatrixValues    =    getDimension()    /    2;    	non-compiled	[CE]  incompatible  types	22	None	replace
11	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension().doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension().doubleValue();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getDimension().doubleValue();	  double[]    covarianceMatrixDeterminant    =    getDimension()    /    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
12	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);  [CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  dim);	  double[]    covarianceMatrixDeterminant    =    getExponentTerm(vals);    	non-compiled	[CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	33	None	replace
13	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  vals.length);  [CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  vals.length);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals,  vals.length);	  double[]    covarianceMatrixDeterminant    =    getExponentTerm(vals);    	non-compiled	[CE]  method  getExponentTerm  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	33	None	replace
14	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  /  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  /  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension()  /  1;	  double[]    covarianceMatrixValues    =    getDimension()    -    1;    	non-compiled	[CE]  incompatible  types	34	None	replace
15	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals.doubleValue();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals.doubleValue();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension(),  vals.doubleValue();	  double[]    covarianceMatrixValues    =    getDimension().doubleValue();    	non-compiled	[CE]  ';'  expected	30	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(dim,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(dim,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
17	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(dim,  -0.5)*  getExponentTerm(vals);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(dim,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(dim,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
18	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    Double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
19	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double[]  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double[]  vals  =  getDimension();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double[]  vals  =  getDimension();	  	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	4	None	add
20	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    Double  covarianceMatrixDeterminant  =  getExponentTerm(vals);	  	non-compiled	[CE]  unreachable  statement	4	None	add
21	[BUG]  [BUGGY]  double[]  vals  =  getDimension()  *  dim;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  vals  =  getDimension()  *  dim;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  vals  =  getDimension()  *  dim;	  double[]    vals    =    getDimension()    +    dim;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	1	None	replace
22	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension()  /  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension()  /  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getDimension()  /  1;	  double[]    covarianceMatrixDeterminant    =    getDimension()    +    1;    	non-compiled	[CE]  incompatible  types	17	None	replace
23	[BUG]  [BUGGY]  double  dim  =  getDimension()  *  2;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  *  2;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  *  2;	  double    dim    =    getDimension()    /    2;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	7	None	replace
24	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(vals);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  Math.abs(vals);	  double    covarianceMatrixDeterminant    =    Math.abs(dimension);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	27	None	replace
25	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(dim);  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(dim);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  Math.abs(dim);	  double    covarianceMatrixDeterminant    =    Math.abs(dimension);    	non-compiled	[CE]  missing  return  statement	27	None	replace
26	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(vals,  0,  dim)*  getExponentTerm(vals);  [CE]  no  suitable  method  found  for  pow(double[],int,int)  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(vals,  0,  dim)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(vals,  0,  dim)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],int,int)	3	None	replace
27	[BUG]  [BUGGY]  double  dest  =  getDimension()  /  dim;  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dest  =  getDimension()  /  dim;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dest  =  getDimension()  /  dim;	  double    dest    =    getDimension()    -    dim;    	non-compiled	[CE]  missing  return  statement	20	None	replace
28	[BUG]  [BUGGY]  double  dest  =  getDimension()  *  dim;  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dest  =  getDimension()  *  dim;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dest  =  getDimension()  *  dim;	  double    dest    =    getDimension()    -    dim;    	non-compiled	[CE]  missing  return  statement	20	None	replace
29	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();	  double    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminant();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
30	[BUG]  [BUGGY]  double  dim  =  getDimension()  /  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  /  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  /  1;	  double    dim    =    getDimension()    +    1;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	6	None	replace
31	[BUG]  [BUGGY]  double[]  dim  =  getDimension()  /  vals.length;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  dim  =  getDimension()  /  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  dim  =  getDimension()  /  vals.length;	  double[]    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	16	None	replace
32	[BUG]  [BUGGY]  double[]  dim  =  getDimension()  *  vals.length;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  dim  =  getDimension()  *  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  dim  =  getDimension()  *  vals.length;	  double[]    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	16	None	replace
33	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals,  dim);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals,  dim);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension(),  vals,  dim);	  double[]    covarianceMatrixValues    =    getDimension(),    vals);    	non-compiled	[CE]  ';'  expected	21	None	replace
34	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals.length);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals.length);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension(),  vals.length);	  double[]    covarianceMatrixValues    =    getDimension(),    vals);    	non-compiled	[CE]  ';'  expected	21	None	replace
35	[BUG]  [BUGGY]  double[]  di  =  getDimension()  +  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  di  =  getDimension()  +  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  di  =  getDimension()  +  1;	  double[]    di    =    getDimension();    	non-compiled	[CE]  incompatible  types	31	None	replace
36	[BUG]  [BUGGY]  double[]  di  =  getDimension()  /  2;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  di  =  getDimension()  /  2;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  di  =  getDimension()  /  2;	  double[]    di    =    getDimension();    	non-compiled	[CE]  incompatible  types	31	None	replace
37	[BUG]  [BUGGY]  double  dest  =  getDimension()  /  1;  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dest  =  getDimension()  /  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dest  =  getDimension()  /  1;	  double    dest    =    getDimension()    +    1;    	non-compiled	[CE]  missing  return  statement	19	None	replace
38	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);  [CE]  no  suitable  method  found  for  pow(double[],double)  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    -dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],double)	2	None	replace
39	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminants  =  getDimension();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminants  =  getDimension();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminants  =  getDimension();	  return    FastMath.pow(1    *    FastMath.PI,    -dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double[]    covarianceMatrixDeterminants    =    getDimension();    	non-compiled	[CE]  incompatible  types	12	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(0,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(0,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	3	2	replace
41	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(0,  -0.5)*  getExponentTerm(vals);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(0,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(0,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	3	2	replace
42	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double  covarianceMatrixDeterminant  =  getExponentTerm(vals);	  	non-compiled	[CE]  unreachable  statement	4	None	add
43	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  covarianceMatrixDeterminant  =  vals.doubleValue();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  covarianceMatrixDeterminant  =  vals.doubleValue();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double  covarianceMatrixDeterminant  =  vals.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
44	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  factor  =  getExponentTerm(vals);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double  factor  =  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double  factor  =  getExponentTerm(vals);	  	non-compiled	[CE]  unreachable  statement	4	None	add
45	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension()  *  2;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getDimension()  *  2;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getDimension()  *  2;	  double[]    covarianceMatrixDeterminant    =    getDimension()    /    2;    	non-compiled	[CE]  incompatible  types	18	None	replace
46	[BUG]  [BUGGY]  double  di  =  getDimension();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  di  =  getDimension();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  di  =  getDimension();	  double    dim    =    getDimension()    -    1;    	non-compiled	[CE]  missing  return  statement	35	None	replace
47	[BUG]  [BUGGY]  Double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  Double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	Double[]  covarianceMatrixDeterminant  =  getExponentTerm(vals);	  double[]    covarianceMatrixDeterminant    =    getExponentTerm();    	non-compiled	[CE]  incompatible  types	24	None	replace
48	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixDeterminant);  [CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixDeterminant);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixDeterminant);	  double    covarianceMatrixDeterminant    =    Math.abs(dimension);    	non-compiled	[CE]  variable  covarianceMatrixDeterminant  might  not  have  been  initialized	27	None	replace
49	[BUG]  [BUGGY]  Double  dim  =  getDimension();  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  Double  dim  =  getDimension();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	Double  dim  =  getDimension();	  double    dim    =    getDimension()    +    1;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	6	None	replace
50	[BUG]  [BUGGY]  null  dest  =  getDimension();  double  dest  =  getDimension();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  null  dest  =  getDimension();  double  dest  =  getDimension();  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	null  dest  =  getDimension();  double  dest  =  getDimension();	          double    dest    =    getDimension();    double    dest    =    getDimension();    	non-compiled	[CE]  not  a  statement	8	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(-0.5,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(-0.5,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
52	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(-0.5,  -0.5)*  getExponentTerm(vals);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(-0.5,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(-0.5,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
53	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixDeterminant  =  getExponentMatrix(vals);	  double[]    covarianceMatrixDeterminant    =    getExponentMatrix();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
54	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  *  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension()  *  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension()  *  1;	  double[]    covarianceMatrixValues    =    getDimension()    -    1;    	non-compiled	[CE]  incompatible  types	34	None	replace
55	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getExponentMatrix(vals);	  double    covarianceMatrixDeterminant    =    getExponentTerm(vals);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
56	[BUG]  [BUGGY]  double[]  di  =  getDimension()  +  vals.length;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  di  =  getDimension()  +  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  di  =  getDimension()  +  vals.length;	  double[]    di    =    getDimension();    	non-compiled	[CE]  incompatible  types	31	None	replace
57	[BUG]  [BUGGY]  double[]  di  =  getDimension()  +  dim;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  di  =  getDimension()  +  dim;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  di  =  getDimension()  +  dim;	  double[]    di    =    getDimension();    	non-compiled	[CE]  incompatible  types	31	None	replace
58	[BUG]  [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals,  vals.length);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  covarianceMatrixValues  =  getDimension(),  vals,  vals.length);  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  covarianceMatrixValues  =  getDimension(),  vals,  vals.length);	  double[]    covarianceMatrixValues    =    getDimension(),    vals);    	non-compiled	[CE]  ';'  expected	21	None	replace
59	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double[]  covarianceMatrixValues  =  getDimension();  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  double[]  covarianceMatrixValues  =  getDimension();  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    double[]  covarianceMatrixValues  =  getDimension();	  	non-compiled	[CE]  incompatible  types	4	None	add
60	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Math.PI  /  2)*  getExponentTerm(vals);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  Math.PI  /  2)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    Math.PI  /  2)*  getExponentTerm(vals);	  	non-compiled	[CE]  not  a  statement	4	None	add
61	[BUG]  [BUGGY]  double[]  vals  =  getDimension()  /  dim;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  vals  =  getDimension()  /  dim;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  vals  =  getDimension()  /  dim;	  double[]    vals    =    getDimension()    +    dim;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	1	None	replace
62	[BUG]  [BUGGY]  double  dim  =  getDimension()  /  2  +  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  /  2  +  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  /  2  +  1;	  double    dim    =    getDimension()    /    2;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	7	None	replace
63	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(covariance);  [CE]  cannot  find  symbol  covariance  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  Math.abs(covariance);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  Math.abs(covariance);	  double    covarianceMatrixDeterminant    =    Math.abs(dimension);    	non-compiled	[CE]  cannot  find  symbol  covariance	27	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(10,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(10,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	3	2	replace
65	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(10,  -0.5)*  getExponentTerm(vals);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(10,  -0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(10,  -0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(vals,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	3	2	replace
66	[BUG]  [BUGGY]  double  dim  =  getDimension()  +  vals.length  -  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dim  =  getDimension()  +  vals.length  -  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dim  =  getDimension()  +  vals.length  -  1;	  double    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	23	None	replace
67	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  factor);  [CE]  cannot  find  symbol  factor  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  factor);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  factor);	  double    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminant(vals);    	non-compiled	[CE]  cannot  find  symbol  factor	15	None	replace
68	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                    AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  coefficient);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(vals,  coefficient);	  double    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminant(vals);    	non-compiled	[CE]  cannot  find  symbol  coefficient	15	None	replace
69	[BUG]  [BUGGY]  double  dest  =  getDimension()  -  dim  +  1;  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double  dest  =  getDimension()  -  dim  +  1;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double  dest  =  getDimension()  -  dim  +  1;	  double    dest    =    getDimension()    -    dim;    	non-compiled	[CE]  missing  return  statement	20	None	replace
70	[BUG]  [BUGGY]  double[]  vals  =  getDimension()  +  vals.length;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  double[]  vals  =  getDimension()  +  vals.length;  [BUGGY]      return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	double[]  vals  =  getDimension()  +  vals.length;	  double[]    dim    =    getDimension()    +    vals.length;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	16	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
72	[BUG]  [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  0.5)*  getExponentTerm(vals);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }      [BUGGY]  return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  0.5)*  getExponentTerm(vals);  [BUGGY]      FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(1  *  FastMath.PI,  dim  /  2)*  FastMath.pow(covarianceMatrixDeterminant,  0.5)*  getExponentTerm(vals);	  return    FastMath.pow(1    *    FastMath.PI,    dim    /    2)*    FastMath.pow(covarianceMatrixDeterminant,    -0.5)*    getExponentTerm(vals);    	compilable	  [FE]  AssertionError  	5	2	replace
