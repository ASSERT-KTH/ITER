bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  this.dim.getEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  double[][]  covariances  =  this.dim.getEigenvalues();  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	double[][]  covariances  =  this.dim.getEigenvalues();	  double[][]    covariances    =    dim.getEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	21	None	replace
4	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  dim);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  dim);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  dim);	  covarianceMatrix    =    new    Array2DRowRealMatrix(dim,    this.mean);    	non-compiled	[CE]  cannot  find  symbol  mean	8	None	replace
5	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  this.mean);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  this.mean);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  this.mean);	  covarianceMatrix    =    new    Array2DRowRealMatrix(dim,    this.mean);    	non-compiled	[CE]  cannot  find  symbol  mean	8	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
9	[BUG]  [BUGGY]  int  col  =  this.samples.length  -  2;  [CE]  cannot  find  symbol  samples  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  int  col  =  this.samples.length  -  2;  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	int  col  =  this.samples.length  -  2;	  int    col    =    this.samples.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  samples	12	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    this.means.size();    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covarianceMatrix);  [CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int,RealMatrix)  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covarianceMatrix);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covarianceMatrix);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covarianceMatrix);    	non-compiled	[CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int,RealMatrix)	17	None	replace
14	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
17	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  this.rng.getVariants();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  double[][]  covariances  =  this.rng.getVariants();  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	double[][]  covariances  =  this.rng.getVariants();	  double[][]    covariances    =    rng.getVariants();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	16	None	replace
21	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);  [CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int,double[][])  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covariances,    dim);    	non-compiled	[CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int,double[][])	3	None	replace
22	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.dim);  [CE]  cannot  find  symbol  dim  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.dim);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.dim);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covariances,    dim);    	non-compiled	[CE]  cannot  find  symbol  dim	3	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.means.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  this.rng.getColumnMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  double[][]  covariances  =  this.rng.getColumnMatEigenvalues();  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	double[][]  covariances  =  this.rng.getColumnMatEigenvalues();	  double[][]    covariances    =    rng.getColumnMatEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	1	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  this.dim.getVariances();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  double[][]  covariances  =  this.dim.getVariances();  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	double[][]  covariances  =  this.dim.getVariances();	  double[][]    covariances    =    dim.getVariances();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	22	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  this.dim.getMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  double[][]  covariances  =  this.dim.getMatEigenvalues();  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	double[][]  covariances  =  this.dim.getMatEigenvalues();	  double[][]    covariances    =    dim.getMatEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	20	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.samples.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  Array2DRowRealMatrix  =  new  Array2DRowRealMatrix(covariances);  [CE]  cannot  find  symbol  Array2DRowRealMatrix  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  Array2DRowRealMatrix  =  new  Array2DRowRealMatrix(covariances);  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	Array2DRowRealMatrix  =  new  Array2DRowRealMatrix(covariances);	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  cannot  find  symbol  Array2DRowRealMatrix	23	None	replace
31	[BUG]  [BUGGY]  Array2DRowRealMatrix(covariances);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  Array2DRowRealMatrix(covariances);  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	Array2DRowRealMatrix(covariances);	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
32	[BUG]  [BUGGY]  if(covariances  ==  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  if(covariances  ==  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	if(covariances  ==  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException	  if(covariances!=    null)    {    if(dim!=    covariances[i].length)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException    	non-compiled	[CE]  '('  or  '['  expected	15	None	replace
33	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
34	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
35	[BUG]  [BUGGY]  CovarianceMatrix  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  CovarianceMatrix  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	CovarianceMatrix  covarianceMatrix  =  new  Array2DRowRealMatrix(dim,  covariances);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covariances,    dim);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  for(int  dim  =  0;  dim  <  this.meanvalues.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  dim  <  this.meanvalues.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  dim  <  this.meanvalues.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    this.means.size();    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
40	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  factor);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrix,  factor);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  factor	17	None	replace
41	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrixInverse);  [CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(RealMatrix)  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrixInverse);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covarianceMatrixInverse);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covarianceMatrix);    	non-compiled	[CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(RealMatrix)	17	None	replace
42	[BUG]  [BUGGY]  Array2DRowRealMatrix  <  RealMatrix>  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  [CE]  type  Array2DRowRealMatrix  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  Array2DRowRealMatrix  <  RealMatrix>  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	Array2DRowRealMatrix  <  RealMatrix>  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  type  Array2DRowRealMatrix  does  not  take  parameters	24	None	replace
43	[BUG]  [BUGGY]  Array2DRowRealMatrix  <  double[]>  covariances  =  new  Array2DRowRealMatrix(covariances);  [CE]  type  Array2DRowRealMatrix  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  Array2DRowRealMatrix  <  double[]>  covariances  =  new  Array2DRowRealMatrix(covariances);  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	Array2DRowRealMatrix  <  double[]>  covariances  =  new  Array2DRowRealMatrix(covariances);	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  type  Array2DRowRealMatrix  does  not  take  parameters	24	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.row;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.column;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  covarianceMatrix);  [CE]  cannot  find  symbol  mean  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  covarianceMatrix);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  covarianceMatrix);	  covarianceMatrix    =    new    Array2DRowRealMatrix(dim,    this.mean);    	non-compiled	[CE]  cannot  find  symbol  mean	8	None	replace
47	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  this.covariances);  [CE]  cannot  find  symbol  mean  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  this.covariances);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(this.mean,  this.covariances);	  covarianceMatrix    =    new    Array2DRowRealMatrix(this.mean,    covariances);    	non-compiled	[CE]  cannot  find  symbol  mean	9	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  dim  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  dim  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  dim  <  this.means.size();  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    this.means.size();    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
51	[BUG]  [BUGGY]  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  }	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
52	[BUG]  [BUGGY]  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  if(covariances!=    null)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
53	[BUG]  [BUGGY]  if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException	  if(covariances!=    null)    {    if(dim!=    covariances[i].length)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException    	non-compiled	[CE]  '('  or  '['  expected	15	None	replace
54	[BUG]  [BUGGY]  if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(co  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(co  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	if(covarianceMatrix!=  null)  {  if(dim!=  covariances[i].length)  {  for(int  dim  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(co	  if(covariances!=    null)    {    if(dim!=    covariances[i].length)    {    for(int    dim    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException    	non-compiled	[CE]  ')'  expected	15	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  dim,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  dim,  factor);  [BUGGY]        final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  dim,  factor);	  covarianceMatrix    =    new    Array2DRowRealMatrix(covariances,    dim);    	non-compiled	[CE]  cannot  find  symbol  factor	3	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  i  <  this.col;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,	  for(int    i    =    0;    i    <    dim;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);      [BUGGY]  for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]      covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	for(int  i  =  0;  dim  <  covariances.length;  i++)  {  if(dim  >=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }	  for(int    dim    =    0;    dim    <    covariances.length;    i++)    {    if(dim    >=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
