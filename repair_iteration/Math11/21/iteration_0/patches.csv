bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double[][]  covariances  =  rng.getMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    double[][]  covariances  =  rng.getMatEigenvalues();  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    double[][]  covariances  =  rng.getMatEigenvalues();		non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	42	None	add
2	[BUG]  [BUGGY]    double[][]  covariances  =  rng.getRowMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    double[][]  covariances  =  rng.getRowMatEigenvalues();  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    double[][]  covariances  =  rng.getRowMatEigenvalues();		non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	42	None	add
3	[BUG]  [BUGGY]    int  col  =  this.samples.length;  [CE]  cannot  find  symbol  samples  [FE]        AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    int  col  =  this.samples.length;  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    int  col  =  this.samples.length;		non-compiled	[CE]  cannot  find  symbol  samples	42	None	add
4	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim);  [CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int)  [FE]    AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(dim);  [BUGGY]    final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(dim);	covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  	non-compiled	[CE]  no  suitable  constructor  found  for  Array2DRowRealMatrix(int)	41	None	replace
5	[BUG]  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.mean);  [CE]  cannot  find  symbol  mean  [FE]      AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.mean);  [BUGGY]    final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	covarianceMatrix  =  new  Array2DRowRealMatrix(covariances,  this.mean);	covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  	non-compiled	[CE]  cannot  find  symbol  mean	41	None	replace
6	[BUG]  [BUGGY]    double[][]  covariances  =  rng.getEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    double[][]  covariances  =  rng.getEigenvalues();  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    double[][]  covariances  =  rng.getEigenvalues();		non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	42	None	add
7	[BUG]  [BUGGY]    double[][]  covariances  =  rng.getVariances();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]      AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    double[][]  covariances  =  rng.getVariances();  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    double[][]  covariances  =  rng.getVariances();		non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	42	None	add
8	[BUG]  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,		non-compiled	[CE]  ')'  expected	42	None	add
9	[BUG]  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
10	[BUG]  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  }  for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  [BUGGY]    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }  [BUGGY]  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	119	119	1	replace	    if(dim!=  covariances[i].length)  {  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  col);  }		non-compiled	[CE]  illegal  start  of  expression	42	None	add
