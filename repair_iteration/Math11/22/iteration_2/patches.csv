bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  this.rng.getRandomMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  this.rng.getRandomMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  this.rng.getRandomMatrix();	  double[][]    covariances    =    rng.getRandomMatrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
2	[BUG]  [BUGGY]  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);  [CE]  cannot  find  symbol  covMatDec  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);	  if(covMatDec!=    null)    {    final    EigenDecomposition    covarianceMatDec    =    new    EigenDecomposition(covarianceMatrix);    }    	non-compiled	[CE]  cannot  find  symbol  covMatDec	18	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumnMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  rng.getColumnMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  rng.getColumnMatrix();	  double[][]    covariances    =    rng.getRowMatrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	1	None	replace
4	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrixDeterminant.getInverse();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrixDeterminant.getInverse();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrixDeterminant.getInverse();	  ((    RealMatrix)covarianceMatrix).getSolver(),    covarianceMatrixInverse.getInverse();    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrix.getInverse();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrix.getInverse();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  covarianceMatrix.getInverse();	  ((    RealMatrix)covarianceMatrix).getSolver(),    covarianceMatrixInverse.getInverse();    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  dim;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  dim;  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  dim;	  ((    RealMatrix)covarianceMatrix).getSolver(),    this.inverse;    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  evec);  [CE]  cannot  find  symbol  evec  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  evec);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  evec);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    mean);    	non-compiled	[CE]  cannot  find  symbol  evec	10	None	replace
8	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvalues);  [CE]  cannot  find  symbol  covarianceMatEigenvalues  [FE]                  AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvalues);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvalues);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    mean);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatEigenvalues	10	None	replace
9	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrix,  factor);  [CE]  cannot  find  symbol  factor  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrix,  factor);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrix,  factor);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  factor	9	None	replace
10	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  factor,  covarianceMatrix);  [CE]  cannot  find  symbol  factor  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  factor,  covarianceMatrix);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  factor,  covarianceMatrix);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  factor	9	None	replace
11	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  factor.getInverse(),  dim);  covarianceMatEigenvectors  =(Double[][])covariances.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  factor.getInverse(),  dim);  covarianceMatEigenvectors  =(Double[][])covariances.clone();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  factor.getInverse(),  dim);  covarianceMatEigenvectors  =(Double[][])covariances.clone();	  ((    RealMatrix)covarianceMatrix).getSolver(),    factor.getInverse();    covarianceMatEigenvectors    =(Double[][])covariances.clone();    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrix);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(int,RealMatrix)  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrix);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrix);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(dim);    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(int,RealMatrix)	7	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  dim);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	add	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  dim);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(dim);    	compilable	  [FE]  AssertionError  	7	1	replace
14	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  dim);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  dim);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  dim);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(dim);    	compilable	  [FE]  AssertionError  	7	1	replace
15	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvectors);  [CE]  cannot  find  symbol  covarianceMatEigenvectors  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvectors);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatEigenvectors);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    factor);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatEigenvectors	19	None	replace
16	[BUG]  [BUGGY]  double[][]  covariances  =  this.rng.getRandomMattrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  this.rng.getRandomMattrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  this.rng.getRandomMattrix();	  double[][]    covariances    =    rng.getRandomMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	16	None	replace
17	[BUG]  [BUGGY]  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(dim);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(int)  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(dim);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(dim);	  final    EigenDecomposition    covarianceMatDec    =    new    EigenDecomposition(covarianceMatrix);    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(int)	11	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatEigenvalues();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covarianceMatrix.getRealMatEigenvalues();	  double[][]    covariances    =    dim.getRealMatEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	17	None	replace
19	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  covarianceMatrix);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(DecompositionSolver,RealMatrix)  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  covarianceMatrix);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  covarianceMatrix);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec.getSolver());    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(DecompositionSolver,RealMatrix)	25	None	replace
20	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  dim);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(DecompositionSolver,int)  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  dim);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec.getSolver(),  dim);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec.getSolver());    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(DecompositionSolver,int)	25	None	replace
21	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMattrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMattrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covarianceMatrix.getRealMattrix();	  double[][]    covariances    =    dim.getRealMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	26	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  covariance.getRealMattrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covariance.getRealMattrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covariance.getRealMattrix();	  double[][]    covariances    =    dim.getRealMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	26	None	replace
23	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrixDeterminant);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(int,double)  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrixDeterminant);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  covarianceMatrixDeterminant);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covarianceMatrixDeterminant);    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(int,double)	14	None	replace
24	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixInverse,  factor);  [CE]  cannot  find  symbol  factor  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixInverse,  factor);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixInverse,  factor);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  factor	14	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatEigenvectors();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covarianceMatrix.getRealMatEigenvectors();	  double[][]    covariances    =    dim.getRealMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	21	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  factor.getRangeEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  factor.getRangeEigenvectors();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  factor.getRangeEigenvectors();	  double[][]    covariances    =    factor.getRealEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	22	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covarianceMatrix.getRealMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covarianceMatrix.getRealMatrix();	  double[][]    covariances    =    dim.getRealMatrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
28	[BUG]  [BUGGY]  double[][]  covariances  =  covariance.getRealMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covariance.getRealMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covariance.getRealMatrix();	  double[][]    covariances    =    dim.getRealMatrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	23	None	replace
29	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeMattrix(dim);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  rng.getRangeMattrix(dim);  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  rng.getRangeMattrix(dim);	  double[][]    covariances    =    rng.getRangeMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
30	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  rng.getRangeEigenvalues();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  rng.getRangeEigenvalues();	  double[][]    covariances    =    rng.getRealEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	2	None	replace
31	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRandomMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getRandomMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getRandomMatrix();	  double[][]    covariances    =    rng.getRandomMatrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	15	None	replace
32	[BUG]  [BUGGY]  double[][]  covariances  =  factor.getDeterminant();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  factor.getDeterminant();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  factor.getDeterminant();	  double[][]    covariances    =    factor.getRealEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	22	None	replace
33	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  factor.getDeterminant();  covarianceMatEigenvectors  =(Double[][])covariances.clone();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  factor.getDeterminant();  covarianceMatEigenvectors  =(Double[][])covariances.clone();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  factor.getDeterminant();  covarianceMatEigenvectors  =(Double[][])covariances.clone();	  ((    RealMatrix)covarianceMatrix).getSolver(),    factor.getInverse();    covarianceMatEigenvectors    =(Double[][])covariances.clone();    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  factor);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix,  factor);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  factor	14	None	replace
35	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  rng.getRangeEigenvectors();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  rng.getRangeEigenvectors();	  double[][]    covariances    =    rng.getRangeMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
36	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeMatrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  rng.getRangeMatrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  rng.getRangeMatrix();	  double[][]    covariances    =    rng.getRangeMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
37	[BUG]  [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  this.tmpMatrix;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  ((  RealMatrix)covarianceMatrix).getSolver(),  this.tmpMatrix;  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	((  RealMatrix)covarianceMatrix).getSolver(),  this.tmpMatrix;	  ((    RealMatrix)covarianceMatrix).getSolver(),    this.inverse;    	non-compiled	[CE]  ';'  expected	12	None	replace
38	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRealEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getRealEigenvalues();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getRealEigenvalues();	  double[][]    covariances    =    rng.getRealEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	2	None	replace
39	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRandomMattrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getRandomMattrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getRandomMattrix();	  double[][]    covariances    =    rng.getRandomMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	16	None	replace
40	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixDeterminant);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(EigenDecomposition,double)  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixDeterminant);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixDeterminant);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    factor);    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(EigenDecomposition,double)	19	None	replace
41	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatDec);  [CE]  cannot  find  symbol  covarianceMatDec  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatDec);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatDec);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(sample);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	8	None	replace
42	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixDeterminant,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixDeterminant,  factor);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrixDeterminant,  factor);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  factor	14	None	replace
43	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  factor);  [CE]  cannot  find  symbol  factor  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  factor);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(dim,  factor);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(dim);    	non-compiled	[CE]  cannot  find  symbol  factor	7	None	replace
44	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  samplingMatrix,  covarianceMatrix);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(EigenDecomposition,RealMatrix,RealMatrix)  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  samplingMatrix,  covarianceMatrix);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  samplingMatrix,  covarianceMatrix);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    covarianceMatrix);    	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(EigenDecomposition,RealMatrix,RealMatrix)	9	None	replace
45	[BUG]  [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixInverse,  covarianceMatEigenvectors);  [CE]  cannot  find  symbol  covarianceMatEigenvectors  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixInverse,  covarianceMatEigenvectors);  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covMatDec,  covarianceMatrixInverse,  covarianceMatEigenvectors);	  final    EigenDecomposition    covMatDec    =    new    EigenDecomposition(covMatDec,    covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatEigenvectors	9	None	replace
46	[BUG]  [BUGGY]  double[][]  covariances  =  covariance.getRealMatEigenvalues();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  covariance.getRealMatEigenvalues();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  covariance.getRealMatEigenvalues();	  double[][]    covariances    =    dim.getRealMatEigenvalues();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	17	None	replace
47	[BUG]  [BUGGY]  double[][]  covariances  =  factor.getRalEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  factor.getRalEigenvectors();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  factor.getRalEigenvectors();	  double[][]    covariances    =    factor.getRealEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	22	None	replace
48	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRangeMattrix();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getRangeMattrix();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getRangeMattrix();	  double[][]    covariances    =    rng.getRangeMattrix();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	13	None	replace
49	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getRangeMatEigenvectors();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getRangeMatEigenvectors();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getRangeMatEigenvectors();	  double[][]    covariances    =    rng.getRangeMatEigenvectors();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	3	None	replace
50	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);  }  [CE]  cannot  find  symbol  covMatDec  [FE]            AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  if(covMatDec!=  null)  {  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);  }  [BUGGY]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	if(covMatDec!=  null)  {  final  EigenDecomposition  covarianceMatDec  =  new  EigenDecomposition(covarianceMatrixInverse);  }	  if(covMatDec!=    null)    {    final    EigenDecomposition    covarianceMatDec    =    new    EigenDecomposition(covarianceMatrix);    }    	non-compiled	[CE]  cannot  find  symbol  covMatDec	18	None	replace
51	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getColumnMatches();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]                AssertionError      [CONTEXT]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);        [BUGGY]  double[][]  covariances  =  dim.getColumnMatches();  [BUGGY]      final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	122	122	1	replace	double[][]  covariances  =  dim.getColumnMatches();	  double[][]    covariances    =    rng.getColumnMatches();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	4	None	replace
