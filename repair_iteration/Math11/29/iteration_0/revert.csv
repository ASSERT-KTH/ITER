projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140for(intv=0;v<dim;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140for(intv=0;v<dim.length;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[dim]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.transpose();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.getColumns();
