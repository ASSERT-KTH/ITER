projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140for(intv=0;v<dim;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140for(intv=0;v<dim.length;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[dim]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.transpose();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.getRows();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[row]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.transpose();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRealVariances();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRows();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.transpose(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,rng);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140For(intv=0;v<dim.length;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[dim],covMatEigenvalues[dim]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRealCharacters();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,evec);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray(dim,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getRangeCharacters();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.getVariances();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,mean,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(dim,mean,covariance);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.transpose(dim,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.transpose(dim,means);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.transpose(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[dim],mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[0],covMatEigenvalues[1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setColumn(v,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray(dim,mean);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140doubledim=FastMath.sqrt(covMatEigenvalues[dim],covMatEigenvalues[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140For(intv=0;v<dim.length+1;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray(covMatEigenvalues);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray(covMatEigenvalues);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140covMatEigenvectors.setRow(dim,rng);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140For(intv=0;v<dim.length-1;v++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140double[][]covariances=covMatEigenvectors.toArray(dim,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java140finaldouble[][]covariances=covMatEigenvectors.toArray(dim,dim);
