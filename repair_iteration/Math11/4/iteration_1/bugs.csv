bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  +  1];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	2	replace
2	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  +  1];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	2	replace
3	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  -  1];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  DimensionMismatchException  	7	2	replace
4	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  [FE]  DimensionMismatchException  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  -  1];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  DimensionMismatchException  	7	2	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  centered  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	  	final  double[]  centered  =  new  double[values.length];  	non-compiled	[CE]  cannot  find  symbol  centered	7	None	replace
6	[BUG]  [BUGGY]    final  double[]  values  =  getMeans();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  double[]  values  =  getMeans();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  double[]  values  =  getMeans();		non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
7	[BUG]  [BUGGY]    final  double[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  double[]  values  =  getValues();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  double[]  values  =  getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
8	[BUG]  [BUGGY]    double[]  values  =  getMeans();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    double[]  values  =  getMeans();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    double[]  values  =  getMeans();		non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
9	[BUG]  [BUGGY]    Double[]  values  =  getMeans();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    Double[]  values  =  getMeans();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    Double[]  values  =  getMeans();		non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
10	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  *  2];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	2	replace
11	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  *  2];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	2	replace
