bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  std  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  std  =  values.toArray(new  double[values.length]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  std  =  values.toArray(new  double[values.length]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  final  double[]  std  =  values.toArray(new  double[size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  std  =  values.toArray(new  double[size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  std  =  values.toArray(new  double[size()  ]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  final  double[]  centered  =  new  double[values.length  -  1];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    DimensionMismatchException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    -    1];    final  double[]  centered  =  new  double[values.length  -  1];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	3	None	add
4	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  Final  double[]  centered  =  new  double[values.length  -  1];  [CE]  not  a  statement  [FE]      DimensionMismatchException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  Final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    -    1];    Final  double[]  centered  =  new  double[values.length  -  1];	  	non-compiled	[CE]  not  a  statement	3	None	add
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  *  2  +  1];	  final    double[]    centered    =    new    double[values.length    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	replace
6	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  *  2  +  1];	  final    double[]    centered    =    new    double[values.length    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	2	replace
7	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  -  2];	  final    double[]    centered    =    new    double[values.length    -    1];    	compilable	  [FE]  DimensionMismatchException  	4	2	replace
8	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  [FE]  DimensionMismatchException  [FE]    DimensionMismatchException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  -  2];	  final    double[]    centered    =    new    double[values.length    -    1];    	compilable	  [FE]  DimensionMismatchException  	4	2	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  +  2];	  final    double[]    centered    =    new    double[values.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	replace
10	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  +  2];	  final    double[]    centered    =    new    double[values.length    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	2	replace
11	[BUG]  [BUGGY]  double[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  double[]  values  =  getValues();  [BUGGY]    final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  values  =  getValues();	      double[]    values    =    getMeans();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	8	None	replace
12	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  final  double[]  centered  =  new  double[values.length  *  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  final  double[]  centered  =  new  double[values.length  *  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    2];    final  double[]  centered  =  new  double[values.length  *  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	10	None	add
13	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  Final  double[]  centered  =  new  double[values.length  *  2];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  Final  double[]  centered  =  new  double[values.length  *  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    2];    Final  double[]  centered  =  new  double[values.length  *  2];	  	non-compiled	[CE]  not  a  statement	10	None	add
14	[BUG]  [BUGGY]  Double[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  Double[]  values  =  getValues();  [BUGGY]    final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	Double[]  values  =  getValues();	      Double[]    values    =    getMeans();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	9	None	replace
15	[BUG]  [BUGGY]  Double[]  values  =  getExponentValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  Double[]  values  =  getExponentValues();  [BUGGY]    final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	Double[]  values  =  getExponentValues();	      Double[]    values    =    getMeans();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	9	None	replace
16	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  final  double[]  centered  =  new  double[values.length  +  1];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  final  double[]  centered  =  new  double[values.length  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    +    1];    final  double[]  centered  =  new  double[values.length  +  1];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
17	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  Final  double[]  centered  =  new  double[values.length  +  1];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  Final  double[]  centered  =  new  double[values.length  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    +    1];    Final  double[]  centered  =  new  double[values.length  +  1];	  	non-compiled	[CE]  not  a  statement	1	None	add
18	[BUG]  [BUGGY]  final  double[]  values  =  getExponentValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  values  =  getExponentValues();  [BUGGY]    final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  values  =  getExponentValues();	      final    double[]    values    =    getMeans();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  *  1];	  final    double[]    centered    =    new    double[values.length    +    1];    	compilable	  [FE]  AssertionError  	2	1	replace
20	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  *  1];	  final    double[]    centered    =    new    double[values.length    +    1];    	compilable	  [FE]  AssertionError  	2	1	replace
21	[BUG]  [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values.toArray(new  double[values.length]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
22	[BUG]  [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values.toArray(new  double[values.size()  ]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
23	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  final  double[]  occupied  =  new  double[values.length  *  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2];  final  double[]  occupied  =  new  double[values.length  *  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    2];    final  double[]  occupied  =  new  double[values.length  *  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	10	None	add
24	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  final  double[]  centered  =  new  double[values.length  -  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    DimensionMismatchException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  -  1];  final  double[]  centered  =  new  double[values.length  -  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    -    1];    final  double[]  centered  =  new  double[values.length  -  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	3	None	add
25	[BUG]  [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values.toArray(new  double[values.length]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
26	[BUG]  [BUGGY]  double[]  centered  =  values.toArray(new  double[values.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  double[]  centered  =  values.toArray(new  double[values.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values.toArray(new  double[values.size()  ]);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
27	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  final  double[]  centered  =  new  double[values.length  +  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {    [BUGGY]  final  double[]  centered  =  new  double[values.length  +  1];  final  double[]  centered  =  new  double[values.length  +  2];  [BUGGY]    for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    +    1];    final  double[]  centered  =  new  double[values.length  +  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
