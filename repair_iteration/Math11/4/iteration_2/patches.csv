bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  final  double[]  centered  =  new  double[values.length  +  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  final  double[]  centered  =  new  double[values.length  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    +    2];    final  double[]  centered  =  new  double[values.length  +  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	9	None	add
2	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  Final  double[]  centered  =  new  double[values.length  +  2];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  +  2];  Final  double[]  centered  =  new  double[values.length  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    +    2];    Final  double[]  centered  =  new  double[values.length  +  2];	  	non-compiled	[CE]  not  a  statement	9	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  /  1];	  final    double[]    centered    =    new    double[values.length    *    1];    	compilable	  [FE]  AssertionError  	20	1	replace
4	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  /  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  /  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  /  1];	  final    double[]    centered    =    new    double[values.length    *    1];    	compilable	  [FE]  AssertionError  	20	1	replace
5	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  int  valsLength  =  values.length  -  1;  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  int  valsLength  =  values.length  -  1;  final  double[]  centered  =  new  double[values.length  -  1];	  final    double[]    centered    =    new    double[values.length    -    1];    final    double[]    centered    =    new    double[values.length    -    1];    	compilable	  [FE]  DimensionMismatchException  	3	2	replace
6	[BUG]  [BUGGY]  final  int  valsLength  =  values.length  -  1;  final  double[]  centered  =  new  double[values.length  -  1];  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  int  valsLength  =  values.length  -  1;  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  int  valsLength  =  values.length  -  1;  final  double[]  centered  =  new  double[values.length  -  1];	  final    double[]    centered    =    new    double[values.length    -    1];    final    double[]    centered    =    new    double[values.length    -    1];    	compilable	  [FE]  DimensionMismatchException  	3	2	replace
7	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  final  double[]  centered  =  new  double[values.length  -  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    DimensionMismatchException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  final  double[]  centered  =  new  double[values.length  -  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    -    2];    final  double[]  centered  =  new  double[values.length  -  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	7	None	add
8	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  Final  double[]  centered  =  new  double[values.length  -  2];  [CE]  not  a  statement  [FE]      DimensionMismatchException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  -  2];  Final  double[]  centered  =  new  double[values.length  -  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    -    2];    Final  double[]  centered  =  new  double[values.length  -  2];	  	non-compiled	[CE]  not  a  statement	7	None	add
9	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  final  double[]  centered  =  new  double[values.length  *  2  +  1];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  final  double[]  centered  =  new  double[values.length  *  2  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    2    +    1];    final  double[]  centered  =  new  double[values.length  *  2  +  1];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	5	None	add
10	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  Final  double[]  centered  =  new  double[values.length  *  2  +  1];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  2  +  1];  Final  double[]  centered  =  new  double[values.length  *  2  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    2    +    1];    Final  double[]  centered  =  new  double[values.length  *  2  +  1];	  	non-compiled	[CE]  not  a  statement	5	None	add
11	[BUG]  [BUGGY]  final  Double[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  Double[]  values  =  getValues();  [BUGGY]      final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  Double[]  values  =  getValues();	  Double[]    values    =    getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	14	None	replace
12	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  final  double[]  centered  =  new  double[values.length  *  1];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  final  double[]  centered  =  new  double[values.length  *  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    1];    final  double[]  centered  =  new  double[values.length  *  1];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	19	None	add
13	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  final  double[]  centered  =  new  double[values.length  *  2];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  1];  final  double[]  centered  =  new  double[values.length  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final    double[]    centered    =    new    double[values.length    *    1];    final  double[]  centered  =  new  double[values.length  *  2];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	19	None	add
14	[BUG]  [BUGGY]  final  Double[]  values  =  getExponentValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  Double[]  values  =  getExponentValues();  [BUGGY]      final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  Double[]  values  =  getExponentValues();	  Double[]    values    =    getExponentValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
15	[BUG]  [BUGGY]  double[]  centered  =  values.toArray(new  double[values.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  double[]  centered  =  values.toArray(new  double[values.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values.toArray(new  double[values.size()  +  1]);	  double[]    centered    =    values.toArray(new    double[values.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
16	[BUG]  [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length  +  1]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values.toArray(new  double[values.length  +  1]);	  final    double[]    centered    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
17	[BUG]  [BUGGY]  final  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  null;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  null;  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  std  =  values!=  null?  values.toArray(new  double[values.length]):  null;	  final    double[]    std    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
18	[BUG]  [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values.toArray(new  double[values.size()  +  1]);	  final    double[]    centered    =    values.toArray(new    double[values.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
19	[BUG]  [BUGGY]  final  double[]  occupied  =  new  double[values.length  *  2];  [CE]  cannot  find  symbol  centered  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  occupied  =  new  double[values.length  *  2];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  occupied  =  new  double[values.length  *  2];	  final    double[]    centered    =    new    double[values.length    *    2];    final    double[]    occupied    =    new    double[values.length    *    2];    	non-compiled	[CE]  cannot  find  symbol  centered	23	None	replace
20	[BUG]  [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length  +  1]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values.toArray(new  double[values.length  +  1]);	  double[]    centered    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  4];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[values.length  *  4];	  final    double[]    centered    =    new    double[values.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	2	replace
22	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  *  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  new  double[values.length  *  4];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  *  4];	  final    double[]    centered    =    new    double[values.length    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	2	replace
23	[BUG]  [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  values.toArray(new  double[values.length()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values.toArray(new  double[values.length()  ]);	  final    double[]    centered    =    values.toArray(new    double[values.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
24	[BUG]  [BUGGY]  final  double[]  vals  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  vals  =  values.toArray(new  double[values.length]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  vals  =  values.toArray(new  double[values.length]);	  final    double[]    std    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
25	[BUG]  [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  double[]  centered  =  values.toArray(new  double[values.length()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values.toArray(new  double[values.length()  ]);	  double[]    centered    =    values.toArray(new    double[values.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
26	[BUG]  [BUGGY]  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  vMatEigenvalues.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  vMatEigenvalues.toArray(new  double[values.length]);  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  vMatEigenvalues.toArray(new  double[values.length]);	  double[]    centered    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
27	[BUG]  [BUGGY]  final  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  final  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];	  final    double[]    centered    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	double[]  centered  =  values!=  null?  values.toArray(new  double[values.length]):  new  double[values.length];	  double[]    centered    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
29	[BUG]  [BUGGY]  static  final  double[]  centered  =  new  double[values.length  -  1];  [CE]  illegal  start  of  expression  [FE]        DimensionMismatchException      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {      [BUGGY]  static  final  double[]  centered  =  new  double[values.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	static  final  double[]  centered  =  new  double[values.length  -  1];	  final    double[]    centered    =    new    double[values.length    -    1];    final    double[]    centered    =    new    double[values.length    -    1];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
