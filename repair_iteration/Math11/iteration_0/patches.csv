bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action5	[BUG]  [BUGGY]    final  double  covarianceMatrixDeterminant  =  vals.get(dim);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  double  covarianceMatrixDeterminant  =  vals.get(dim);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  double  covarianceMatrixDeterminant  =  vals.get(dim);		non-compiled	[CE]  cannot  find  symbol	6	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	9	1
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	9	1	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.centered.length;  i++)  {  [CE]  cannot  find  symbol  centered  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  this.centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  this.centered.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  centered	9	None	replace
15	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	  	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]    sum  +=  values[i]  -  getMeans();  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  values[i]  -  getMeans();  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  values[i]  -  getMeans();		non-compiled	[CE]  cannot  find  symbol  i	18	None	add
22	[BUG]  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  preMultiplied[i]  *  centered[i];		non-compiled	[CE]  cannot  find  symbol  i	18	None	add
23	[BUG]  [BUGGY]    sum  +=  values[i]  -  getMeans()  [i];  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  values[i]  -  getMeans()  [i];  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  values[i]  -  getMeans()  [i];		non-compiled	[CE]  cannot  find  symbol  i	18	None	add
25	[BUG]  [BUGGY]    sum  +=  values[i]  -  getMeans());  [CE]  ';'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  values[i]  -  getMeans());  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  values[i]  -  getMeans());		non-compiled	[CE]  ';'  expected	18	None	add
31	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i]);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i]);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i]);		non-compiled	[CE]  cannot  find  symbol  i	14	None	add
32	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.compareTo(centered);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.compareTo(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.compareTo(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
33	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i],  centered);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i],  centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values[i],  centered);		non-compiled	[CE]  cannot  find  symbol  i	14	None	add
34	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.get(centered);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.get(centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.get(centered);		non-compiled	[CE]  cannot  find  symbol	14	None	add
35	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  covarianceMatrixInverse.multiply(values);		non-compiled	[CE]  cannot  find  symbol	14	None	add
43	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  tmpMatrix.preMultiply(centered);  [CE]  cannot  find  symbol  tmpMatrix  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  tmpMatrix.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  tmpMatrix.preMultiply(centered);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  cannot  find  symbol  tmpMatrix	13	None	replace
44	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(centered);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(centered);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	13	None	replace
51	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixInverse);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixInverse);		non-compiled	[CE]  cannot  find  symbol	2	None	add
52	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getCovarianceMatrix(vals);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	2	None	add
53	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	2	None	add
54	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixEigenvalues);  [CE]  cannot  find  symbol  covarianceMatrixEigenvalues  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixEigenvalues);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  vals.get(covarianceMatrixEigenvalues);		non-compiled	[CE]  cannot  find  symbol  covarianceMatrixEigenvalues	2	None	add
55	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getDimension();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse().getDimension();		non-compiled	[CE]  cannot  find  symbol	2	None	add
65	[BUG]  [BUGGY]    sum  +=  preMultiplied[i]  -  getMeans();  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  -  getMeans();  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  preMultiplied[i]  -  getMeans();		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  centered[i]  *  preMultiplied[i];	sum  +=  preMultiplied[i]  *  centered[i];  	compilable	  [FE]  AssertionError  testUnivariateDistribution	19	1
72	[BUG]  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  centered[i]  *  preMultiplied[i];	sum  +=  preMultiplied[i]  *  centered[i];  	compilable	  [FE]  AssertionError  testUnivariateDistribution	19	1	replace
81	[BUG]  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.preMultiply(values[i]);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.preMultiply(values[i]);  }  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.preMultiply(values[i]);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
82	[BUG]  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.evaluate(values);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.evaluate(values);  }  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.evaluate(values);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
83	[BUG]  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values[i]);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values[i]);  }  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values[i]);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
84	[BUG]  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values);  }  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  covarianceMatrixInverse.apply(values);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
85	[BUG]  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  return  FastMath.exp(-0.5  *  values.length);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  return  FastMath.exp(-0.5  *  values.length);  }  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    if(values.length!=  values.length)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  return  FastMath.exp(-0.5  *  values.length);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
95	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  sum  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	  	double  sum  =  0;  	non-compiled	[CE]  cannot  find  symbol  sum	15	None	replace
101	[BUG]  [BUGGY]    centered[]  =  values[values.length]  -  getMeans();  [CE]  not  a  statement  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[]  =  values[values.length]  -  getMeans();  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[]  =  values[values.length]  -  getMeans();		non-compiled	[CE]  not  a  statement	10	None	add
102	[BUG]  [BUGGY]    covarianceMatrixInverse.apply(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.apply(values);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.apply(values);		non-compiled	[CE]  cannot  find  symbol	10	None	add
103	[BUG]  [BUGGY]    centered[]  =  covarianceMatrixInverse.multiply(values[values.length]);  [CE]  not  a  statement  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[]  =  covarianceMatrixInverse.multiply(values[values.length]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[]  =  covarianceMatrixInverse.multiply(values[values.length]);		non-compiled	[CE]  not  a  statement	10	None	add
104	[BUG]  [BUGGY]    covarianceMatrixInverse.evaluate(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.evaluate(values);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.evaluate(values);		non-compiled	[CE]  cannot  find  symbol	10	None	add
105	[BUG]  [BUGGY]    centered[]  =  covarianceMatrixInverse.multiply(values);  [CE]  not  a  statement  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    centered[]  =  covarianceMatrixInverse.multiply(values);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    centered[]  =  covarianceMatrixInverse.multiply(values);		non-compiled	[CE]  not  a  statement	10	None	add
113	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  [2];  [CE]  ']'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  [2];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  [2];	final  double[]  centered  =  new  double[values.length];  	non-compiled	[CE]  ']'  expected	7	None	replace
114	[BUG]  [BUGGY]  static  final  double[]  centered  =  new  double[values.length];  [CE]  illegal  start  of  expression  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  static  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	static  final  double[]  centered  =  new  double[values.length];	final  double[]  centered  =  new  double[values.length];  	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]  for(int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	for(int  i  =  0;  i  <  centered.length;  i++)  {	for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	17	1
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  centered.length;  i++)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]  for(int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  centered.length;  i++)  {	for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	17	1	replace
133	[BUG]  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  [CE]  cannot  find  symbol  varianceMatrixDeterminant  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);  [BUGGY]  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceMatrixDeterminant,  -0.5)*  getExponentTerm(vals);	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *    getExponentTerm(vals);  	non-compiled	[CE]  cannot  find  symbol  varianceMatrixDeterminant	5	None	replace
141	[BUG]  [BUGGY]    centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    centered[i]  =  covarianceMatrixInverse.preMultiply(centered);		non-compiled	[CE]  cannot  find  symbol  i	16	None	add
142	[BUG]  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()  [i];  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()  [i];  }  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()  [i];  }		non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
143	[BUG]  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
144	[BUG]  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(centered);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    centered[i]  =  covarianceMatrixInverse.multiply(centered);		non-compiled	[CE]  cannot  find  symbol  i	16	None	add
145	[BUG]  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  *  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  *  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    if(preMultiplied!=  null)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  centered[i]  *  centered[i]  =  covarianceMatrixInverse.preMultiply(centered);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
152	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  2.0;  [CE]  possible  loss  of  precision  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  /  2.0;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  /  2.0;	final  int  dim  =  getDimension();  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim!=  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim!=  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
162	[BUG]  [BUGGY]  if(dim!=  vals.length)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim!=  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim!=  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
163	[BUG]  [BUGGY]  if(dim  <  vals.length)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim!=  vals.length  ||  vals.length!=  dim)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim!=  vals.length  ||  vals.length!=  dim)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
164	[BUG]  [BUGGY]  if(dim!=  vals.length  ||  vals.length!=  dim)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim!=  vals.length  ||  vals.length!=  dim)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim!=  vals.length  ||  vals.length!=  dim)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
165	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	  	if  (vals.length  !=  dim)  {  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
171	[BUG]  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(values[i]);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(values[i]);  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  covarianceMatrixInverse.multiply(values[i]);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	12	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()  [i];  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	    centered[i]  =  values[i]  -  getMeans()  [i];		compilable	  [FE]  AssertionError  testUnivariateDistribution	12	1
173	[BUG]  [BUGGY]    centered[i]  =  values[i]  -  getMeans()  [i];  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans()  [i];  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i]  -  getMeans()  [i];		compilable	  [FE]  AssertionError  testUnivariateDistribution	12	1	add
173	[BUG]  [BUGGY]    covarianceMatrixInverse.exp(values[i]  -  getMeans());  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    covarianceMatrixInverse.exp(values[i]  -  getMeans());  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    covarianceMatrixInverse.exp(values[i]  -  getMeans());		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	add
175	[BUG]  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(values[i],  i);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  covarianceMatrixInverse.multiply(values[i],  i);  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  covarianceMatrixInverse.multiply(values[i],  i);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	12	None	add
181	[BUG]  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  throw  new  DimensionMismatchException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  throw  new  DimensionMismatchException( " ");  }  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    if(dim  >  0)  {  if(dim  >  vals.length)  {  throw  new  DimensionMismatchException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
182	[BUG]  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2;  }  [CE]  ';'  expected  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2;  }  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2;  }		non-compiled	[CE]  ';'  expected	4	None	add
183	[BUG]  [BUGGY]    if(dim  >  0)  {  if(dim  >  0)  {  throw  new  DimensionMismatchException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    if(dim  >  0)  {  if(dim  >  0)  {  throw  new  DimensionMismatchException( " ");  }  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    if(dim  >  0)  {  if(dim  >  0)  {  throw  new  DimensionMismatchException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
184	[BUG]  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2  *  getExpponentTerm(vals);  }  [CE]  ';'  expected  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2  *  getExpponentTerm(vals);  }  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    if(dim  >  0)  {  if(dim  >  vals.length)  {  return  FastMath.PI,  dim  /  2  *  getExpponentTerm(vals);  }		non-compiled	[CE]  ';'  expected	4	None	add
185	[BUG]  [BUGGY]    if(dim  >  0)  {  int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  if(dim  >  0)  {  return  dim;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    if(dim  >  0)  {  int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  if(dim  >  0)  {  return  dim;  }  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    if(dim  >  0)  {  int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  if(dim  >  0)  {  return  dim;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
191	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues()  [i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getValues()  [i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues()  [i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
194	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean()  [i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMean()  [i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean()  [i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	4	None	add
2	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	4	None	add
3	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix(vals);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix().getDimension();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix().getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix().getDimension();		non-compiled	[CE]  cannot  find  symbol	4	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  0)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
22	[BUG]  [BUGGY]  if(dim  <  0)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  0)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0  ||  vals.length!=  dim)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  0  ||  vals.length!=  dim)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
23	[BUG]  [BUGGY]  if(dim  <  0  ||  vals.length!=  dim)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0  ||  vals.length!=  dim)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  0  ||  vals.length!=  dim)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0  ||  dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  0  ||  dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
25	[BUG]  [BUGGY]  if(dim  <  0  ||  dim  <  vals.length)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  0  ||  dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  0  ||  dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
42	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	2	None	add
43	[BUG]  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	2	None	add
44	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  getCovarianceMatrix();		non-compiled	[CE]  cannot  find  symbol	2	None	add
45	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse);  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse);		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	2	None	add
61	[BUG]  [BUGGY]    centered[i]  =  values[i]  -  getMeans();  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMeans();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i]  -  getMeans();		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	add
62	[BUG]  [BUGGY]    centered[i]  =  values[i]  -  getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getStandardDeviation();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i]  -  getStandardDeviation();		non-compiled	[CE]  cannot  find  symbol	12	None	add
63	[BUG]  [BUGGY]    centered[i]  =  values[i]  -  getSlope();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getSlope();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i]  -  getSlope();		non-compiled	[CE]  cannot  find  symbol	12	None	add
64	[BUG]  [BUGGY]    centered[i]  =  values[i]  -  getMean();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i]  -  getMean();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i]  -  getMean();		non-compiled	[CE]  cannot  find  symbol	12	None	add
65	[BUG]  [BUGGY]    centered[i]  =  values[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    centered[i]  =  values[i].doubleValue();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    centered[i]  =  values[i].doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
83	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMean()  [i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  /  getMean()  [i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getMean()  [i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
84	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean()  /  values[i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMean()  /  values[i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean()  /  values[i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
101	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();		non-compiled	[CE]  cannot  find  symbol	14	None	add
102	[BUG]  [BUGGY]    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixDeterminant();		non-compiled	[CE]  cannot  find  symbol	14	None	add
103	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse.multiply(values);  [CE]  cannot  find  symbol  getCovarianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse.multiply(values);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse.multiply(values);		non-compiled	[CE]  cannot  find  symbol  getCovarianceMatrixInverse	14	None	add
104	[BUG]  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse();  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  double[]  covarianceMatrixInverse  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	14	None	add
105	[BUG]  [BUGGY]    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixInverse();  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    final  Double  covarianceMatrixInverse  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	14	None	add
123	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  getMean();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  *  getMean();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  *  getMean();	final  int  dim  =  getDimension();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[2];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	final  double[]  centered  =  new  double[2];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testUnivariateDistribution	7	1
144	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[2];  [FE]  ArrayIndexOutOfBoundsException  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[2];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[2];	final  double[]  centered  =  new  double[values.length];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testUnivariateDistribution	7	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    System.arraycopy(values,  0,  centered,  0,  values.length);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	    System.arraycopy(values,  0,  centered,  0,  values.length);		compilable	  [FE]  AssertionError  testUnivariateDistribution	10	1
162	[BUG]  [BUGGY]    System.arraycopy(values,  0,  centered,  0,  values.length);  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    System.arraycopy(values,  0,  centered,  0,  values.length);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    System.arraycopy(values,  0,  centered,  0,  values.length);		compilable	  [FE]  AssertionError  testUnivariateDistribution	10	1	add
162	[BUG]  [BUGGY]    covarianceMatrixInverse.incrementValues(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.incrementValues(values);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.incrementValues(values);		non-compiled	[CE]  cannot  find  symbol	10	None	add
163	[BUG]  [BUGGY]    covarianceMatrixInverse.incrementValues();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.incrementValues();  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.incrementValues();		non-compiled	[CE]  cannot  find  symbol	10	None	add
164	[BUG]  [BUGGY]    covarianceMatrixInverse.validate(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.validate(values);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.validate(values);		non-compiled	[CE]  cannot  find  symbol	10	None	add
165	[BUG]  [BUGGY]    covarianceMatrixInverse.converge(values,  center);  [CE]  cannot  find  symbol  center  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.converge(values,  center);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.converge(values,  center);		non-compiled	[CE]  cannot  find  symbol  center	10	None	add
183	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =  0.0;	double  sum  =  0;  	compilable	  [FE]  AssertionError  testUnivariateDistribution	15	1
184	[BUG]  [BUGGY]  double  sum  =  0.0;  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0.0;  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  0.0;	double  sum  =  0;  	compilable	  [FE]  AssertionError  testUnivariateDistribution	15	1	replace
201	[BUG]  [BUGGY]    covarianceMatrixInverse.multiply(centered);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    covarianceMatrixInverse.multiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    covarianceMatrixInverse.multiply(centered);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	add
202	[BUG]  [BUGGY]    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.multiply(centered);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.multiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.multiply(centered);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preMultiply(centered);		compilable	  [FE]  AssertionError  testUnivariateDistribution	16	1
204	[BUG]  [BUGGY]    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preMultiply(centered);  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    final  double[]  covarianceMatrixDeterminant  =  covarianceMatrixInverse.preMultiply(centered);		compilable	  [FE]  AssertionError  testUnivariateDistribution	16	1	add
204	[BUG]  [BUGGY]    final  double[]  covMatEigenvalues  =  covarianceMatrixInverse.multiply(values);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    final  double[]  covMatEigenvalues  =  covarianceMatrixInverse.multiply(values);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    final  double[]  covMatEigenvalues  =  covarianceMatrixInverse.multiply(values);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	add
205	[BUG]  [BUGGY]    covarianceMatrixInverse.multiply(values);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    covarianceMatrixInverse.multiply(values);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    covarianceMatrixInverse.multiply(values);		non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	add
242	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [CE]  no  suitable  method  found  for  preMultiply(double[],int)  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double[],int)	13	None	replace
244	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(values);  [CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(values);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.multiply(values);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	non-compiled	[CE]  method  multiply  in  interface  RealMatrix  cannot  be  applied  to  given  types;	13	None	replace
281	[BUG]  [BUGGY]    final  int  i  =  values.length;  [CE]  variable  i  is  already  defined  in  method  getExponentTerm(double[])  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  int  i  =  values.length;  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  int  i  =  values.length;		non-compiled	[CE]  variable  i  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
282	[BUG]  [BUGGY]    test(values,  0,  values.length);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    test(values,  0,  values.length);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    test(values,  0,  values.length);		non-compiled	[CE]  cannot  find  symbol	8	None	add
283	[BUG]  [BUGGY]    final  int  i  =  values.length  -  1;  [CE]  variable  i  is  already  defined  in  method  getExponentTerm(double[])  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  int  i  =  values.length  -  1;  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  int  i  =  values.length  -  1;		non-compiled	[CE]  variable  i  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
284	[BUG]  [BUGGY]    final  double[]  sum  =  getMeans();  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  double[]  sum  =  getMeans();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  double[]  sum  =  getMeans();		non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	8	None	add
285	[BUG]  [BUGGY]    final  int  sum  =  getMeans();  [CE]  incompatible  types  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    final  int  sum  =  getMeans();  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    final  int  sum  =  getMeans();		non-compiled	[CE]  incompatible  types	8	None	add
303	[BUG]  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(dimension,  -0.5)*  getExponentTerm(vals);  [CE]  dimension  has  private  access  in  AbstractMultivariateRealDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(dimension,  -0.5)*  getExponentTerm(vals);  [BUGGY]  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(dimension,  -0.5)*  getExponentTerm(vals);	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *    getExponentTerm(vals);  	non-compiled	[CE]  dimension  has  private  access  in  AbstractMultivariateRealDistribution	5	None	replace
304	[BUG]  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceDeterminant,  -0.5)*  getExponentTerm(vals);  [CE]  cannot  find  symbol  varianceDeterminant  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceDeterminant,  -0.5)*  getExponentTerm(vals);  [BUGGY]  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(varianceDeterminant,  -0.5)*  getExponentTerm(vals);	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *    getExponentTerm(vals);  	non-compiled	[CE]  cannot  find  symbol  varianceDeterminant	5	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  centers.length;  i++)  {  [CE]  cannot  find  symbol  centers  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]  for(int  i  =  0;  i  <  centers.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	for(int  i  =  0;  i  <  centers.length;  i++)  {	for  (int  i  =  0;  i  <  centered.length;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  centers	9	None	replace
341	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	18	None	add
342	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	18	None	add
343	[BUG]  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.getSquareResult());  [CE]  cannot  find  symbol  CovarianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.getSquareResult());  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(CovarianceMatrixInverse.getSquareResult());		non-compiled	[CE]  cannot  find  symbol  CovarianceMatrixInverse	18	None	add
344	[BUG]  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.multiply(values));  [CE]  cannot  find  symbol  CovarianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.multiply(values));  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(CovarianceMatrixInverse.multiply(values));		non-compiled	[CE]  cannot  find  symbol  CovarianceMatrixInverse	18	None	add
345	[BUG]  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.getResult());  [CE]  cannot  find  symbol  CovarianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(CovarianceMatrixInverse.getResult());  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(CovarianceMatrixInverse.getResult());		non-compiled	[CE]  cannot  find  symbol  CovarianceMatrixInverse	18	None	add
361	[BUG]  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	6	None	add
362	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals);		non-compiled	[CE]  cannot  find  symbol	6	None	add
363	[BUG]  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  double  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);		non-compiled	[CE]  cannot  find  symbol	6	None	add
364	[BUG]  [BUGGY]    final  Double  covarianceMatrix  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  Double  covarianceMatrix  =  getCovarianceMatrixInverse();  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  Double  covarianceMatrix  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	6	None	add
365	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  calculateCovarianceMatrix(vals,  dim);		non-compiled	[CE]  cannot  find  symbol	6	None	add
381	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i]));  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i]));  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i]));		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
382	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult());		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
383	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values[i]));  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values[i]));  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values[i]));		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
384	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getResult());		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
385	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i],  i));  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i],  i));  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i],  i));		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
1	[BUG]  [BUGGY]    covarianceMatrixInverse.add(values[0],  values[1]);  [CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.add(values[0],  values[1]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.add(values[0],  values[1]);		non-compiled	[CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	add
2	[BUG]  [BUGGY]    covarianceMatrixInverse.set(values,  centered);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.set(values,  centered);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.set(values,  centered);		non-compiled	[CE]  cannot  find  symbol	10	None	add
3	[BUG]  [BUGGY]    covarianceMatrixInverse.add(values[0],  values[1],  values[2],  values[3]);  [CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    covarianceMatrixInverse.add(values[0],  values[1],  values[2],  values[3]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    covarianceMatrixInverse.add(values[0],  values[1],  values[2],  values[3]);		non-compiled	[CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	add
4	[BUG]  [BUGGY]    CovarianceMatrixInverse  covariance  =  Math.abs(centered);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    CovarianceMatrixInverse  covariance  =  Math.abs(centered);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    CovarianceMatrixInverse  covariance  =  Math.abs(centered);		non-compiled	[CE]  cannot  find  symbol	10	None	add
5	[BUG]  [BUGGY]    CovarianceMatrixInverse  covariance  =  Math.exp(-values[0],  values[1]);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  [BUGGY]    CovarianceMatrixInverse  covariance  =  Math.exp(-values[0],  values[1]);  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	    CovarianceMatrixInverse  covariance  =  Math.exp(-values[0],  values[1]);		non-compiled	[CE]  cannot  find  symbol	10	None	add
31	[BUG]  [BUGGY]    covarianceMatrixInverse.put(values[i]  -  centered]);  [CE]  ')'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    covarianceMatrixInverse.put(values[i]  -  centered]);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    covarianceMatrixInverse.put(values[i]  -  centered]);		non-compiled	[CE]  ')'  expected	14	None	add
32	[BUG]  [BUGGY]    covarianceMatrixInverse.add(center,  values[i]);  [CE]  cannot  find  symbol  center  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    covarianceMatrixInverse.add(center,  values[i]);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    covarianceMatrixInverse.add(center,  values[i]);		non-compiled	[CE]  cannot  find  symbol  center	14	None	add
33	[BUG]  [BUGGY]    covarianceMatrixInverse.add(i,  values[i]);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    covarianceMatrixInverse.add(i,  values[i]);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    covarianceMatrixInverse.add(i,  values[i]);		non-compiled	[CE]  cannot  find  symbol  i	14	None	add
34	[BUG]  [BUGGY]    covarianceMatrixInverse  =  Math.exp(-centered,  values[i]);  [CE]  cannot  assign  a  value  to  final  variable  covarianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    covarianceMatrixInverse  =  Math.exp(-centered,  values[i]);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    covarianceMatrixInverse  =  Math.exp(-centered,  values[i]);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  covarianceMatrixInverse	14	None	add
35	[BUG]  [BUGGY]    covarianceMatrixInverse.set(values[i]  -  centered);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]    covarianceMatrixInverse.set(values[i]  -  centered);  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	    covarianceMatrixInverse.set(values[i]  -  centered);		non-compiled	[CE]  cannot  find  symbol  i	14	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(sum  /  values.length);  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	    sum  +=  Math.sqrt(sum  /  values.length);		compilable	  [FE]  AssertionError  testUnivariateDistribution	18	1
93	[BUG]  [BUGGY]    sum  +=  Math.sqrt(sum  /  values.length);  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(sum  /  values.length);  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(sum  /  values.length);		compilable	  [FE]  AssertionError  testUnivariateDistribution	18	1	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(sum);  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	    sum  +=  Math.sqrt(sum);		compilable	  [FE]  AssertionError  testUnivariateDistribution	18	1
94	[BUG]  [BUGGY]    sum  +=  Math.sqrt(sum);  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(sum);  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(sum);		compilable	  [FE]  AssertionError  testUnivariateDistribution	18	1	add
94	[BUG]  [BUGGY]    sum  +=  Math.exp(-sum  /  values[i]);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.exp(-sum  /  values[i]);  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.exp(-sum  /  values[i]);		non-compiled	[CE]  cannot  find  symbol  i	18	None	add
95	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values)));  [CE]  ';'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values)));  [BUGGY]  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.multiply(values)));		non-compiled	[CE]  ';'  expected	18	None	add
151	[BUG]  [BUGGY]    setCovarianceMatrixDeterminant(covarianceMatrixInverse,  dim);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    setCovarianceMatrixDeterminant(covarianceMatrixInverse,  dim);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    setCovarianceMatrixDeterminant(covarianceMatrixInverse,  dim);		non-compiled	[CE]  cannot  find  symbol	4	None	add
152	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();		non-compiled	[CE]  cannot  find  symbol	4	None	add
153	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  dim);  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  dim);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  dim);		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	add
154	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  dim  +=  vals.length  *  dim;  [CE]  cannot  find  symbol  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  dim  +=  vals.length  *  dim;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  dim  +=  vals.length  *  dim;		non-compiled	[CE]  cannot  find  symbol	4	None	add
155	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  Math.abs(vals[0],  dim);  [CE]  no  suitable  method  found  for  abs(double,int)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  Math.abs(vals[0],  dim);  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  Math.abs(vals[0],  dim);		non-compiled	[CE]  no  suitable  method  found  for  abs(double,int)	4	None	add
183	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  this.covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	add	final  double[]  preMultiplied  =  this.covarianceMatrixInverse.preMultiply(centered);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	compilable	  [FE]  AssertionError  testUnivariateDistribution	13	1
184	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  this.covarianceMatrixInverse.preMultiply(centered);  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  [BUGGY]  final  double[]  preMultiplied  =  this.covarianceMatrixInverse.preMultiply(centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	final  double[]  preMultiplied  =  this.covarianceMatrixInverse.preMultiply(centered);	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  	compilable	  [FE]  AssertionError  testUnivariateDistribution	13	1	replace
211	[BUG]  [BUGGY]    covarianceMatrixInverse.set(values,  0,  values.length);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    covarianceMatrixInverse.set(values,  0,  values.length);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    covarianceMatrixInverse.set(values,  0,  values.length);		non-compiled	[CE]  cannot  find  symbol	8	None	add
212	[BUG]  [BUGGY]    covarianceMatrixInverse.add(values);  [CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    covarianceMatrixInverse.add(values);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    covarianceMatrixInverse.add(values);		non-compiled	[CE]  method  add  in  interface  RealMatrix  cannot  be  applied  to  given  types;	8	None	add
213	[BUG]  [BUGGY]    covarianceMatrixInverse.invert(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    covarianceMatrixInverse.invert(values);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    covarianceMatrixInverse.invert(values);		non-compiled	[CE]  cannot  find  symbol	8	None	add
214	[BUG]  [BUGGY]    covarianceMatrixInverse.validate(values);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    covarianceMatrixInverse.validate(values);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    covarianceMatrixInverse.validate(values);		non-compiled	[CE]  cannot  find  symbol	8	None	add
215	[BUG]  [BUGGY]    covarianceMatrixInverse.validate(values,  0,  values.length);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]    covarianceMatrixInverse.validate(values,  0,  values.length);  [BUGGY]  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	    covarianceMatrixInverse.validate(values,  0,  values.length);		non-compiled	[CE]  cannot  find  symbol	8	None	add
241	[BUG]  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getMeans();  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getMeans();  }  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getMeans();  }		non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
242	[BUG]  [BUGGY]    i  =  getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    i  =  getStandardDeviation();  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    i  =  getStandardDeviation();		non-compiled	[CE]  cannot  find  symbol	12	None	add
243	[BUG]  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getSums();  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getSums();  }  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    if(i  <  values.length)  {  if(i  >  0)  {  sum  +=  values[i]  -  getSums();  }		non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
244	[BUG]  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]    if(i  <  values.length)  {  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	    if(i  <  values.length)  {  if(i  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
272	[BUG]  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  pow(double[],double)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(covarianceMatrixDeterminant);  [BUGGY]  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(covarianceMatrixDeterminant);	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *    getExponentTerm(vals);  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],double)	5	None	replace
274	[BUG]  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);  [CE]  no  suitable  method  found  for  pow(double[],double)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);  [BUGGY]  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)*  FastMath.pow(vals,  -0.5)*  getExponentTerm(vals);	return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *    getExponentTerm(vals);  	non-compiled	[CE]  no  suitable  method  found  for  pow(double[],double)	5	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  vals.length  ||  dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  vals.length  ||  dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1
305	[BUG]  [BUGGY]  if(dim  <  vals.length  ||  dim  <  vals.length)  {  [FE]  AssertionError  testUnivariateDistribution  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if(dim  <  vals.length  ||  dim  <  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  vals.length  ||  dim  <  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  testUnivariateDistribution	3	1	replace
331	[BUG]  [BUGGY]    sum  +=  values[i]  -  getMeans();  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  values[i]  -  getMeans();  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  values[i]  -  getMeans();		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	add
332	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareValue(values[i]));  [CE]  cannot  find  symbol  varianceMatrixInverse  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareValue(values[i]));  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareValue(values[i]));		non-compiled	[CE]  cannot  find  symbol  varianceMatrixInverse	20	None	add
334	[BUG]  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult(i),  values[i]));  [CE]  ';'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult(i),  values[i]));  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  Math.sqrt(varianceMatrixInverse.getSquareResult(i),  values[i]));		non-compiled	[CE]  ';'  expected	20	None	add
335	[BUG]  [BUGGY]    sum  +=  values[i]  -  getStandardDeviation();  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  [BUGGY]    sum  +=  values[i]  -  getStandardDeviation();  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	    sum  +=  values[i]  -  getStandardDeviation();		non-compiled	[CE]  cannot  find  symbol	20	None	add
361	[BUG]  [BUGGY]    setResult(centered,  preMultiplied);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    setResult(centered,  preMultiplied);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    setResult(centered,  preMultiplied);		non-compiled	[CE]  cannot  find  symbol	16	None	add
362	[BUG]  [BUGGY]    centered[i]  =(double)getStandardDeviation();  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    centered[i]  =(double)getStandardDeviation();  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    centered[i]  =(double)getStandardDeviation();		non-compiled	[CE]  cannot  find  symbol  i	16	None	add
363	[BUG]  [BUGGY]    centered[i]  =  Math.round(preMultiplied);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    centered[i]  =  Math.round(preMultiplied);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    centered[i]  =  Math.round(preMultiplied);		non-compiled	[CE]  cannot  find  symbol  i	16	None	add
364	[BUG]  [BUGGY]    setValues(values,  centered);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    setValues(values,  centered);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    setValues(values,  centered);		non-compiled	[CE]  cannot  find  symbol	16	None	add
365	[BUG]  [BUGGY]    setValues(values,  preMultiplied);  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  [BUGGY]    setValues(values,  preMultiplied);  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	    setValues(values,  preMultiplied);		non-compiled	[CE]  cannot  find  symbol	16	None	add
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied[i++])  {  [CE]  ';'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied[i++])  {  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  preMultiplied[i++])  {	for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  	non-compiled	[CE]  ';'  expected	17	None	replace
422	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	2	None	add
423	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  /  vals.length);  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  /  vals.length);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  /  vals.length);		non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	2	None	add
425	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  vals.length);  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  vals.length);  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  vals.length);		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	add
453	[BUG]  [BUGGY]  final  double[]  centered  =  new  double[values.length  [0];  [CE]  ']'  expected  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  [BUGGY]  final  double[]  centered  =  new  double[values.length  [0];  [BUGGY]  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	final  double[]  centered  =  new  double[values.length  [0];	final  double[]  centered  =  new  double[values.length];  	non-compiled	[CE]  ']'  expected	7	None	replace
511	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getStandardDeviation()  [i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getStandardDeviation()  [i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getStandardDeviation()  [i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
513	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getNeighborEquals()  [i];  [CE]  cannot  find  symbol  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getNeighborEquals()  [i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getNeighborEquals()  [i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
514	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeans()  *  values[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [CONTEXT]  private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  [BUGGY]  centered[i]  =  values[i]  -  getMeans()  *  values[i];  [BUGGY]  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeans()  *  values[i];	centered[i]  =  values[i]  -  getMeans()[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	11	None	replace
543	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  VALS.length;  [CE]  cannot  find  symbol  VALS  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  *  VALS.length;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  *  VALS.length;	final  int  dim  =  getDimension();  	non-compiled	[CE]  cannot  find  symbol  VALS	1	None	replace
571	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	6	None	add
572	[BUG]  [BUGGY]    double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    double  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).doubleValue();		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	6	None	add
573	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  covarianceMatrixDeterminant);  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  covarianceMatrixDeterminant);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse  -  covarianceMatrixDeterminant);		non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	6	None	add
574	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixDeterminant);  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixDeterminant);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixDeterminant);		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	6	None	add
575	[BUG]  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixInverse);  [CE]  no  suitable  method  found  for  abs(RealMatrix)  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  [BUGGY]    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixInverse);  [BUGGY]  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *    FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *      getExponentTerm(vals);  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	    final  int  covarianceMatrixDeterminant  =  Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixInverse);		non-compiled	[CE]  no  suitable  method  found  for  abs(RealMatrix)	6	None	add
