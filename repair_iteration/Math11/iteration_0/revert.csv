projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183doublecovarianceMatrixDeterminant=Math.random();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finaldoublecovarianceMatrixDeterminant=Math.exp(-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183doublecovarianceMatrixDeterminant=Math.exp(-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183doublecovarianceMatrixDeterminant=Math.exp(-dim/2.0);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finaldoublecovarianceMatrixDeterminant=vals.get(dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230for(inti=0;i<centered.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230for(inti=0;i<values.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230for(inti=0;i<this.centered.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=values[i]-getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=preMultiplied[i]*centered[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=values[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=values[preMultiplied.length];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=values[i]-getMeans());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=covarianceMatrixInverse.multiply(values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=covarianceMatrixInverse.compareTo(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=covarianceMatrixInverse.multiply(values[i],centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=covarianceMatrixInverse.get(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=covarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=covarianceMatrixInverse.preMultiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=covarianceMatrixInverse.preMultiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=tmpMatrix.preMultiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=covarianceMatrixInverse.multiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=vals.get(covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=getCovarianceMatrixInverse().getCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=vals.get(covarianceMatrixEigenvalues);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=getCovarianceMatrixInverse().getDimension();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=preMultiplied[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=values[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=preMultiplied[i]-getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=preMultiplied[i]*centered[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=centered[i]*preMultiplied[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=values[i]*centered[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=values[i]*preMultiplied[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229if(values.length!=values.length){for(inti=0;i<values.length;i++){covarianceMatrixInverse.preMultiply(values[i]);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229if(values.length!=values.length){for(inti=0;i<values.length;i++){covarianceMatrixInverse.evaluate(values);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229if(values.length!=values.length){for(inti=0;i<values.length;i++){covarianceMatrixInverse.apply(values[i]);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229if(values.length!=values.length){for(inti=0;i<values.length;i++){covarianceMatrixInverse.apply(values);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229if(values.length!=values.length){for(inti=0;i<values.length;i++){returnFastMath.exp(-0.5*values.length);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=0;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=1;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=2;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=0.5;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230centered[]=values[values.length]-getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.apply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230centered[]=covarianceMatrixInverse.multiply(values[values.length]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.evaluate(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230centered[]=covarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[values.length];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[values.length+1];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[values.length[2];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229staticfinaldouble[]centered=newdouble[values.length];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235for(inti=0;i<preMultiplied.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235for(inti=0;i<centered.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235for(inti=1;i<preMultiplied.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(covarianceMatrixDeterminant,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,dim/2)*FastMath.pow(covarianceMatrixDeterminant,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(varianceMatrixDeterminant,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(covarianceMatrixDeterminant,0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234centered[i]=covarianceMatrixInverse.preMultiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234if(preMultiplied!=null){for(inti=0;i<preMultiplied.length;i++){centered[i]=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234if(preMultiplied!=null){for(inti=0;i<preMultiplied.length;i++){centered[i]=covarianceMatrixInverse.preMultiply(centered);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234centered[i]=covarianceMatrixInverse.multiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234if(preMultiplied!=null){for(inti=0;i<preMultiplied.length;i++){centered[i]*centered[i]=covarianceMatrixInverse.preMultiply(centered);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()/2.0;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()*2;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()-1;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(vals.length!=dim){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim!=vals.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<vals.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim!=vals.length||vals.length!=dim){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<=vals.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=covarianceMatrixInverse.multiply(values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231covarianceMatrixInverse.exp(values[i]-getMeans());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=covarianceMatrixInverse.multiply(values[i],i);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim>0){if(dim>vals.length){thrownewDimensionMismatchException("");}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim>0){if(dim>vals.length){returnFastMath.PI,dim/2;}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim>0){if(dim>0){thrownewDimensionMismatchException("");}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim>0){if(dim>vals.length){returnFastMath.PI,dim/2*getExpponentTerm(vals);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim>0){intcovarianceMatrixDeterminant=getCovarianceMatrixDeterminant();if(dim>0){returndim;}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getValues()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]/getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMean()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179finalintcovarianceMatrixDeterminant=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179finalintcovarianceMatrixDeterminant=calculateCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179finalintcovarianceMatrixDeterminant=getCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179finalintcovarianceMatrixDeterminant=calculateCovarianceMatrix(vals,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179finalintcovarianceMatrixDeterminant=getCovarianceMatrix().getDimension();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<0){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<0||vals.length!=dim){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<0||dim<vals.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=calculateCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finaldoublecovarianceMatrixDeterminant=calculateCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=getCovarianceMatrix();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getStandardDeviation();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getSlope();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMean();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i].doubleValue();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]*getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]/getMean()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMean()/values[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=getCovarianceMatrixDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finalDoublecovarianceMatrixInverse=getCovarianceMatrixDeterminant();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=getCovarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]covarianceMatrixInverse=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finalDoublecovarianceMatrixInverse=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()/2;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()*getMean();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[2];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[0];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230System.arraycopy(values,0,centered,0,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.incrementValues(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.incrementValues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.validate(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.converge(values,center);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=0.0;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234doublesum=1.0;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234covarianceMatrixInverse.multiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234finaldouble[]covarianceMatrixDeterminant=covarianceMatrixInverse.multiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234finaldouble[]covarianceMatrixDeterminant=covarianceMatrixInverse.preMultiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234finaldouble[]covMatEigenvalues=covarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234covarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=covarianceMatrixInverse.preMultiply(centered,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=covarianceMatrixInverse.multiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=preMultiplied[i]*values[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finalinti=values.length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229test(values,0,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finalinti=values.length-1;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]sum=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finalintsum=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(dimension,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(varianceDeterminant,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230for(inti=0;i<centered.length-1;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230for(inti=0;i<centers.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(varianceMatrixInverse.getResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(varianceMatrixInverse.getSquareResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(CovarianceMatrixInverse.getSquareResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(CovarianceMatrixInverse.multiply(values));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(CovarianceMatrixInverse.getResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finaldoublecovarianceMatrixDeterminant=calculateCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=calculateCovarianceMatrix(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finaldoublecovarianceMatrixDeterminant=calculateCovarianceMatrix(vals,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalDoublecovarianceMatrix=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=calculateCovarianceMatrix(vals,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i]));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getSquareResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.multiply(values[i]));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getResult());
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getExponentTerm(values[i],i));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.add(values[0],values[1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.set(values,centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230covarianceMatrixInverse.add(values[0],values[1],values[2],values[3]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230CovarianceMatrixInversecovariance=Math.abs(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java230CovarianceMatrixInversecovariance=Math.exp(-values[0],values[1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233covarianceMatrixInverse.put(values[i]-centered]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233covarianceMatrixInverse.add(center,values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233covarianceMatrixInverse.add(i,values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233covarianceMatrixInverse=Math.exp(-centered,values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233covarianceMatrixInverse.set(values[i]-centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.exp(-sum/values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(sum/values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.exp(-sum/values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235sum+=Math.sqrt(varianceMatrixInverse.multiply(values)));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179setCovarianceMatrixDeterminant(covarianceMatrixInverse,dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179intcovarianceMatrixDeterminant=getCovarianceMatrixInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179intcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse-dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179intcovarianceMatrixDeterminant=getCovarianceMatrixInverse();dim+=vals.length*dim;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179intcovarianceMatrixDeterminant=Math.abs(vals[0],dim);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java233finaldouble[]preMultiplied=this.covarianceMatrixInverse.preMultiply(centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229covarianceMatrixInverse.set(values,0,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229covarianceMatrixInverse.add(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229covarianceMatrixInverse.invert(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229covarianceMatrixInverse.validate(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229covarianceMatrixInverse.validate(values,0,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231if(i<values.length){if(i>0){sum+=values[i]-getMeans();}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231i=getStandardDeviation();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231if(i<values.length){if(i>0){sum+=values[i]-getSums();}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231if(i<values.length){if(i>0){thrownewIllegalArgumentException("");}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(vals,-0.5)*getExponentTerm(covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183returnFastMath.pow(2*FastMath.PI,-dim/2)*FastMath.pow(vals,-0.5)*getExponentTerm(vals);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java179if(dim<vals.length||dim<vals.length){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=values[i]-getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getSquareValue(values[i]));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=Math.sqrt(varianceMatrixInverse.getSquareResult(i),values[i]));
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java236sum+=values[i]-getStandardDeviation();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234setResult(centered,preMultiplied);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234centered[i]=(double)getStandardDeviation();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234centered[i]=Math.round(preMultiplied);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234setValues(values,centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java234setValues(values,preMultiplied);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235for(inti=0;i<preMultiplied[i];i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java235for(inti=0;i<preMultiplied[i++]){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse).doubleValue();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse/vals.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=Math.abs(vals.length-1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse-vals.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java229finaldouble[]centered=newdouble[values.length[0];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getStandardDeviation()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getNeighborEquals()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java231centered[i]=values[i]-getMeans()*values[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()*vals.length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java178finalintdim=getDimension()*VALS.length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse).doubleValue();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183doublecovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse).doubleValue();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse-covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java183finalintcovarianceMatrixDeterminant=Math.abs(covarianceMatrixInverse).multiply(covarianceMatrixInverse);
