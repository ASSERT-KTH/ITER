bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final int dim = getDimension(); [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { [BUGGY] final int dim = getDimension(); [BUGGY] if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { [BUGGY] [BUGGY] final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	
3	[BUG] [BUGGY] if (vals.length != dim) { [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); [BUGGY] if (vals.length != dim) { [BUGGY] throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); [BUGGY] [BUGGY] if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	
5	[BUG] [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(covarianceMatrixDeterminant, -0.5) *  getExponentTerm(vals); [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) *   FastMath.pow(covarianceMatrixDeterminant, -0.5) *      getExponentTerm(vals); [BUGGY] FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } [BUGGY] [BUGGY] return FastMath.pow(2 * FastMath.PI, -dim / 2) *   FastMath.pow(covarianceMatrixDeterminant, -0.5) *      getExponentTerm(vals); FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } [CLASS] MultivariateNormalDistribution [METHOD] density [RETURN_TYPE] double  final double[] vals [VARIABLES] boolean double[] covMatEigenvalues evec means vals RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor int dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	183	185	1	add	
7	[BUG] [BUGGY] final double[] centered = new double[values.length]; [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { [BUGGY] final double[] centered = new double[values.length]; [BUGGY] for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { [BUGGY] [BUGGY] final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	229	229	1	add	
9	[BUG] [BUGGY] for (int i = 0; i < centered.length; i++) { [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; [BUGGY] for (int i = 0; i < centered.length; i++) { [BUGGY] centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; [BUGGY] [BUGGY] for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	230	230	1	add	
11	[BUG] [BUGGY] centered[i] = values[i] - getMeans()[i]; [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { [BUGGY] centered[i] = values[i] - getMeans()[i]; [BUGGY] } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { [BUGGY] [BUGGY] centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	
13	[BUG] [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } [BUGGY] [BUGGY] final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	233	233	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] double sum = 0; [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	
17	[BUG] [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < preMultiplied.length; i++) { sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	
19	[BUG] [BUGGY] sum += preMultiplied[i] * centered[i]; [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] sum += preMultiplied[i] * centered[i]; [BUGGY] } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testUnivariateDistribution [CONTEXT] private double getExponentTerm(final double[] values) { final double[] centered = new double[values.length]; for (int i = 0; i < centered.length; i++) { centered[i] = values[i] - getMeans()[i]; } final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered); double sum = 0; for (int i = 0; i < preMultiplied.length; i++) { [BUGGY] [BUGGY] sum += preMultiplied[i] * centered[i]; } return FastMath.exp(-0.5 * sum); } [CLASS] MultivariateNormalDistribution [METHOD] getExponentTerm [RETURN_TYPE] double  final double[] values [VARIABLES] boolean double[] centered covMatEigenvalues evec means normalVals preMultiplied std vals values RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix double covarianceMatrixDeterminant factor sum int i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	
