bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =  0.5;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
2	[BUG]  [BUGGY]  double  sum  =  0.5;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  0.5;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  0.5;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
3	[BUG]  [BUGGY]  double  sum  =  1;  double  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  1;  double  sum  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    1;    double  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
4	[BUG]  [BUGGY]  double  sum  =  1;  Double  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  1;  Double  sum  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    1;    Double  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
5	[BUG]  [BUGGY]  double  sum  =  1;  int  sum  =  1;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  1;  int  sum  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    1;    int  sum  =  1;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
6	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preservec);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	10	None	replace
7	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);	      final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
8	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);	      final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
9	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  <  1)?  0  :  preMultiplied[1].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =(preMultiplied.length  <  1)?  0  :  preMultiplied[1].doubleValue();  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =(preMultiplied.length  <  1)?  0  :  preMultiplied[1].doubleValue();	  double    sum    =(preMultiplied.length    <    1)?    0    :    preMultiplied[0].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
10	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	5	None	replace
11	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	8	None	replace
12	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	8	None	replace
13	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	7	None	replace
14	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);	      	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
15	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied);	      	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =  2;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
17	[BUG]  [BUGGY]  double  sum  =  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  2;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
18	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	4	None	replace
19	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length);	      final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
21	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;	  double    sum    =    1;    	compilable	  [FE]  AssertionError  	2	2	replace
22	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	8	None	replace
