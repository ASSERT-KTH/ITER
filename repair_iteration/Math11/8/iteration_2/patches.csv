bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered.length);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	18	None	replace
2	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length  -  1);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length  -  1);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered.length  -  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered.length);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	18	None	replace
3	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  preMultiplied);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  preMultiplied);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  preMultiplied);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
4	[BUG]  [BUGGY]  double  sum  =  2;  double  sum  =  2;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  2;  double  sum  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    2;    double  sum  =  2;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	16	None	add
5	[BUG]  [BUGGY]  double  sum  =  2;  Double  sum  =  2;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  2;  Double  sum  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    2;    Double  sum  =  2;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	16	None	add
6	[BUG]  [BUGGY]  double  sum  =  2;  double  sum  =  3;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  2;  double  sum  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    2;    double  sum  =  3;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	16	None	add
7	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	replace
8	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	replace
9	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  std);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  std);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  std);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(std);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	14	None	replace
10	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
11	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  tmpMatrix);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
12	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values,  std);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	7	None	replace
13	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	7	None	replace
14	[BUG]  [BUGGY]  Double  sum  =  1;  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  Double  sum  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	Double  sum  =  1;	  double    sum    =    1;    Double    sum    =    1;    	non-compiled	[CE]  incompatible  types	4	None	replace
15	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	20	None	add
16	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  Double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  Double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    Double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	20	None	add
17	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  PreMultiplied[0]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  PreMultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    double  sum  =(preMultiplied.length  >  0)?  PreMultiplied[0]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	20	None	add
18	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values.length);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered.length);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	19	None	replace
19	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered.length);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	19	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  1)?  preMultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =(preMultiplied.length  >  1)?  preMultiplied[0]  :  0;	  double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    	compilable	  [FE]  AssertionError  	21	2	replace
21	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  1)?  preMultiplied[0]  :  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  1)?  preMultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =(preMultiplied.length  >  1)?  preMultiplied[0]  :  0;	  double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    	compilable	  [FE]  AssertionError  	21	2	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionError  	5	2	replace
23	[BUG]  [BUGGY]  int  sum  =  1;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  int  sum  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	int  sum  =  1;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionError  	5	2	replace
24	[BUG]  [BUGGY]  double  sum  =  0;  int  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0;  int  sum  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  0;  int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	5	None	replace
25	[BUG]  [BUGGY]  double  sum  =  0.5;  double  sum  =  0.5;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0.5;  double  sum  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    0.5;    double  sum  =  0.5;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
26	[BUG]  [BUGGY]  double  sum  =  0.5;  Double  sum  =  0.5;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0.5;  Double  sum  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    0.5;    Double  sum  =  0.5;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
27	[BUG]  [BUGGY]  double  sum  =  0.5;  int  sum  =  0.5;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0.5;  int  sum  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =    0.5;    int  sum  =  0.5;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	1	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =  1.0;	  double    sum    =    0.5;    	compilable	  [FE]  AssertionError  	2	2	replace
29	[BUG]  [BUGGY]  double  sum  =  1.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  1.0;	  double    sum    =    0.5;    	compilable	  [FE]  AssertionError  	2	2	replace
30	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(center,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
31	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(center,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	8	None	replace
32	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[1]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[1]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    double  sum  =(preMultiplied.length  >  0)?  preMultiplied[1]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	20	None	add
33	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  values.length);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered.length);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	18	None	replace
34	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  centered);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(center);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	10	None	replace
35	[BUG]  [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(center);	  final    double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
36	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	6	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0.5  +  preMultiplied.length;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =  0.5  +  preMultiplied.length;	  double    sum    =    0.5;    	compilable	  [FE]  AssertionError  	2	2	replace
38	[BUG]  [BUGGY]  double  sum  =  0.5  +  preMultiplied.length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0.5  +  preMultiplied.length;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  0.5  +  preMultiplied.length;	  double    sum    =    0.5;    	compilable	  [FE]  AssertionError  	2	2	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  1;	  double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    	compilable	  [FE]  AssertionError  	21	2	replace
40	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  1;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  1;	  double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    	compilable	  [FE]  AssertionError  	21	2	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	add	int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionError  	5	2	replace
42	[BUG]  [BUGGY]  int  sum  =  0;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  int  sum  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	int  sum  =  0;	  double    sum    =    1;    int    sum    =    1;    	compilable	  [FE]  AssertionError  	5	2	replace
43	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  value);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  value);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  value);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	22	None	replace
44	[BUG]  [BUGGY]  double  sum  =  0,  sum  =  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =  0,  sum  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  sum  =  0,  sum  =  0;	  double    sum    =    1;    double    sum    =    1;    	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
45	[BUG]  [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  Premultiplied[0]  :  0;  [CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  sum  =(preMultiplied.length  >  0)?  preMultiplied[0]  :  0;  double  sum  =(preMultiplied.length  >  0)?  Premultiplied[0]  :  0;  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double    sum    =(preMultiplied.length    >    0)?    preMultiplied[0]    :    0;    double  sum  =(preMultiplied.length  >  0)?  Premultiplied[0]  :  0;	  	non-compiled	[CE]  variable  sum  is  already  defined  in  method  getExponentTerm(double[])	20	None	add
46	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(center,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
47	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered[i]);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  centered[i]);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	22	None	replace
48	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	234	234	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    values);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	replace
