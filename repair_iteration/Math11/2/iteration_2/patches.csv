bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(dim  <  vals.length)  {  if(dim  <  vals.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  <  vals.length)  {  if(dim  <  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim    <    vals.length)    {    if(dim  <  vals.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
2	[BUG]  [BUGGY]  if(dim  <  vals.length)  {  If(dim  <  vals.length)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  <  vals.length)  {  If(dim  <  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim    <    vals.length)    {    If(dim  <  vals.length)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
3	[BUG]  [BUGGY]  if(dim  >  vals.length)  {  if(dim  >  vals.length)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length)  {  if(dim  >  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim    >    vals.length)    {    if(dim  >  vals.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
4	[BUG]  [BUGGY]  if(dim  >  vals.length)  {  If(dim  >  vals.length)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length)  {  If(dim  >  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim    >    vals.length)    {    If(dim  >  vals.length)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
5	[BUG]  [BUGGY]          int    covarianceMatrixDeterminant    =    getDimension();    int  covarianceDeterminant  =  getDimension();  int  covarianceMatrixDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  [CE]  variable  covarianceMatrixDeterminant  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]          int    covarianceMatrixDeterminant    =    getDimension();    int  covarianceDeterminant  =  getDimension();  int  covarianceMatrixDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	                int        covarianceMatrixDeterminant        =        getDimension();        int    covarianceDeterminant    =    getDimension();    int  covarianceMatrixDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();	  	non-compiled	[CE]  variable  covarianceMatrixDeterminant  is  already  defined  in  method  density(double[])	19	None	add
6	[BUG]  [BUGGY]          int    covarianceMatrixDeterminant    =    getDimension();    int  covarianceDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  [CE]  variable  covarianceDeterminant  is  already  defined  in  method  density(double[])  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]          int    covarianceMatrixDeterminant    =    getDimension();    int  covarianceDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	                int        covarianceMatrixDeterminant        =        getDimension();        int    covarianceDeterminant    =    getDimension();    int  covarianceDeterminant  =  getDimension();  int  covarianceDeterminant  =  getDimension();	  	non-compiled	[CE]  variable  covarianceDeterminant  is  already  defined  in  method  density(double[])	19	None	add
7	[BUG]  [BUGGY]  Double  vals  =  getDimension();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  Double  vals  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	Double  vals  =  getDimension();	  double    vals    =    getDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >=  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  >=  vals.length)  {	  if    (dim!=    vals.length)    {    if    (dim    >>    vals.length)    {    	compilable	  [FE]  DimensionMismatchException  	15	2	replace
9	[BUG]  [BUGGY]  if(dim  >=  vals.length)  {  [FE]  DimensionMismatchException  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >=  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  >=  vals.length)  {	  if    (dim!=    vals.length)    {    if    (dim    >>    vals.length)    {    	compilable	  [FE]  DimensionMismatchException  	15	2	replace
10	[BUG]  [BUGGY]  double[]  vals  =  getDimension()  *  dim;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double[]  vals  =  getDimension()  *  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double[]  vals  =  getDimension()  *  dim;	  double[]    vals    =    getDimension()    +    dim;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  double  vals  =  getDimension()  /  dim;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  vals  =  getDimension()  /  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  vals  =  getDimension()  /  dim;	  double    vals    =    getDimension()    *    dim;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  double  vals  =  getDimension()  *  vals;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  vals  =  getDimension()  *  vals;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  vals  =  getDimension()  *  vals;	  double    vals    =    getDimension()    *    dim;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  Integer  covarianceMatrixDeterminant  =  getDimension();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  Integer  covarianceMatrixDeterminant  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	Integer  covarianceMatrixDeterminant  =  getDimension();	          int    covarianceMatrixDeterminant    =    getDimension();    Integer    covarianceMatrixDeterminant    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getDimensionInverse();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getDimensionInverse();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getDimensionInverse();	  int    covarianceMatrixDeterminant    =    getDimensionInverse();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
15	[BUG]  [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  1;	  int    covarianceMatrixDeterminant    =    getDimensionInverse();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
16	[BUG]  [BUGGY]  final  double[]  vals  =  getDimension()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  final  double[]  vals  =  getDimension()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	final  double[]  vals  =  getDimension()  +  1;	  final    double[]    vals    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getDimension()  +  1;	  double    covarianceMatrixDeterminant    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  *  dim;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  *  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getDimension()  *  dim;	  double    covarianceMatrixDeterminant    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  Double[]  vals  =  getDimension();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  Double[]  vals  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	Double[]  vals  =  getDimension();	  double[]    vals    =    getDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  +  dim;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getDimension()  +  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getDimension()  +  dim;	  double    covarianceMatrixDeterminant    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  final  double[]  vals  =  getDimension()  +  dim;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  final  double[]  vals  =  getDimension()  +  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	final  double[]  vals  =  getDimension()  +  dim;	  final    double[]    vals    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  dim;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	int  covarianceMatrixDeterminant  =  getDimensionInverse()  +  dim;	  int    covarianceMatrixDeterminant    =    getDimensionInverse();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(dim);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(dim);  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant(dim);	  double    covarianceMatrixDeterminant    =    getCovarianceMatrixInverse();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length  -  1)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  >  vals.length  -  1)  {	  if(dim    >    vals.length)    {    	compilable	  [FE]  DimensionMismatchException  	10	2	replace
25	[BUG]  [BUGGY]  if(dim  >  vals.length  -  1)  {  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length  -  1)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  >  vals.length  -  1)  {	  if(dim    >    vals.length)    {    	compilable	  [FE]  DimensionMismatchException  	10	2	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length  &&  dim  <  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  >  vals.length  &&  dim  <  vals.length)  {	  if(dim    >    vals.length)    {    	compilable	  [FE]  AssertionError  	10	1	replace
27	[BUG]  [BUGGY]  if(dim  >  vals.length  &&  dim  <  vals.length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  >  vals.length  &&  dim  <  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  >  vals.length  &&  dim  <  vals.length)  {	  if(dim    >    vals.length)    {    	compilable	  [FE]  AssertionError  	10	1	replace
28	[BUG]  [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  -  dim;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  int  covarianceMatrixDeterminant  =  getDimensionInverse()  -  dim;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	int  covarianceMatrixDeterminant  =  getDimensionInverse()  -  dim;	  int    covarianceMatrixDeterminant    =    getDimensionInverse();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  double  covarianceMatrixDeterminant  =  getExponentTerm(vals);  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	double  covarianceMatrixDeterminant  =  getExponentTerm(vals);	  double    covarianceMatrixDeterminant    =    getDimension();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  <  vals.length  ||  dim  >  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if(dim  <  vals.length  ||  dim  >  vals.length)  {	  if(dim    <    vals.length)    {    	compilable	  [FE]  AssertionError  	22	1	replace
31	[BUG]  [BUGGY]  if(dim  <  vals.length  ||  dim  >  vals.length)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();      [BUGGY]  if(dim  <  vals.length  ||  dim  >  vals.length)  {  [BUGGY]      throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if(dim  <  vals.length  ||  dim  >  vals.length)  {	  if(dim    <    vals.length)    {    	compilable	  [FE]  AssertionError  	22	1	replace
