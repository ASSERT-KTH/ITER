bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double[]  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    double[]  vals  =  getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    double[]  vals  =  getDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	4	None	add
2	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();		non-compiled	[CE]  cannot  find  symbol	4	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	    int  covarianceMatrixDeterminant  =  getDimension();		compilable	  [FE]  AssertionError  	4	2	add
4	[BUG]  [BUGGY]    int  covarianceMatrixDeterminant  =  getDimension();  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    int  covarianceMatrixDeterminant  =  getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    int  covarianceMatrixDeterminant  =  getDimension();		compilable	  [FE]  AssertionError  	4	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if  (dim!=  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	add	if  (dim!=  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  	3	1	replace
6	[BUG]  [BUGGY]  if  (dim!=  vals.length)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]  if  (dim!=  vals.length)  {  [BUGGY]  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	if  (dim!=  vals.length)  {	if  (vals.length  !=  dim)  {  	compilable	  [FE]  AssertionError  	3	1	replace
7	[BUG]  [BUGGY]    double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    double  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();		non-compiled	[CE]  cannot  find  symbol	4	None	add
8	[BUG]  [BUGGY]    double  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  final  int  dim  =  getDimension();  [BUGGY]    double  vals  =  getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	179	179	1	replace	    double  vals  =  getDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	4	None	add
