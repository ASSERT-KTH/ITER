bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row],  col);	      double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	10	None	replace
2	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  row);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  row);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  col,  row);	  tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	6	None	replace
3	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvectors,  row,  col,  covarianceMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvectors,  row,  col,  covarianceMatrix);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvectors,  row,  col,  covarianceMatrix);	  tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	6	None	replace
4	[BUG]  [BUGGY]  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);	      tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	2	None	replace
5	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(variance,  col,  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  variance  [FE]    AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(variance,  col,  covarianceMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(variance,  col,  covarianceMatrixDeterminant);	  tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    	non-compiled	[CE]  cannot  find  symbol  variance	5	None	replace
6	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues[row],  col,  covariances[col]);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues[row],  col,  covariances[col]);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvalues[row],  col,  covariances[col]);	      tmpMatrix.multiplyEntry(row,    col,    covariances[col]);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	1	None	replace
7	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covariances,  col,  row);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covariances,  col,  row);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covariances,  col,  row);	      tmpMatrix.multiplyEntry(row,    col,    covariances[col]);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	1	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	add	tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);	  	compilable	  [FE]  AssertionError  	4	2	add
9	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);	  	compilable	  [FE]  AssertionError  	4	2	add
10	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  tmpMatrix.multiplyEntry(row,  col,  covariANCEMatrixDeterminant);  [CE]  cannot  find  symbol  covariANCEMatrixDeterminant  [FE]      AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  tmpMatrix.multiplyEntry(row,  col,  covariANCEMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    tmpMatrix.multiplyEntry(row,  col,  covariANCEMatrixDeterminant);	  	non-compiled	[CE]  cannot  find  symbol  covariANCEMatrixDeterminant	4	None	add
11	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  col);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  col);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  col);	  tmpMatrix.multiplyEntry(covarianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
12	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(factor,  col,  covarianceMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(factor,  col,  covarianceMatrix);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(factor,  col,  covarianceMatrix);	  tmpMatrix.multiplyEntry(covarianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
13	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covariances);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covariances);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covariances);	      tmpMatrix.multiplyEntry(row,    col,    covariances);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	3	None	replace
14	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvectors,  col,  factor);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvectors,  col,  factor);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvectors,  col,  factor);	  tmpMatrix.multiplyEntry(varianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	11	None	replace
15	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[row],  col);	      Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	8	None	replace
16	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  final  RealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]    AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  final  RealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    final  RealMatrix  tmpMatrix  =  FastMath.sqrt(covarianceMatrixDeterminant);	  	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	4	None	add
17	[BUG]  [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col],  covarianceMatrixDeterminant);  [CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col],  covarianceMatrixDeterminant);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	Array2DRowRealMatrix  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col],  covarianceMatrixDeterminant);	      Array2DRowRealMatrix    tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[col]);    	non-compiled	[CE]  variable  tmpMatrix  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	9	None	replace
18	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  covarianceMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  covarianceMatrix);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  factor,  covarianceMatrix);	  tmpMatrix.multiplyEntry(covarianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
19	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrix);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrix);	  tmpMatrix.multiplyEntry(varianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	11	None	replace
20	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covarianceMatrix);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covarianceMatrix);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvalues,  row,  col,  covarianceMatrix);	  tmpMatrix.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	6	None	replace
21	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrixDeterminant);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrixDeterminant);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  col,  covarianceMatrixDeterminant);	  tmpMatrix.multiplyEntry(row,    col,    covarianceMatrixDeterminant);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	5	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[col]);  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[col]);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[col]);	      double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	10	None	replace
23	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(rng,  row,  col,  covariances);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(rng,  row,  col,  covariances);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(rng,  row,  col,  covariances);	      tmpMatrix.multiplyEntry(row,    col,    covariances);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	3	None	replace
24	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues[row,  col],  covariances[col]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covMatEigenvalues[row,  col],  covariances[col]);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covMatEigenvalues[row,  col],  covariances[col]);	      tmpMatrix.multiplyEntry(row,    col,    covariances[col]);    	non-compiled	[CE]  ']'  expected	1	None	replace
25	[BUG]  [BUGGY]  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col]);  [CE]  cannot  assign  a  value  to  final  variable  tmpMatrix  [FE]          AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col]);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix  =  FastMath.sqrt(covMatEigenvalues[col]);	      tmpMatrix    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmpMatrix	2	None	replace
26	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  row,  col,  factor);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrix,  row,  col,  factor);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrix,  row,  col,  factor);	  tmpMatrix.multiplyEntry(covarianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
27	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrixDeterminant,  col,  factor);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covarianceMatrixDeterminant,  col,  factor);  [BUGGY]    }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covarianceMatrixDeterminant,  col,  factor);	  tmpMatrix.multiplyEntry(varianceMatrix,    col,    factor);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	11	None	replace
28	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(covariances[row],  col,  row);  [CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();  for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {    [BUGGY]  tmpMatrix.multiplyEntry(covariances[row],  col,  row);  [BUGGY]    tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	151	151	1	replace	tmpMatrix.multiplyEntry(covariances[row],  col,  row);	      tmpMatrix.multiplyEntry(row,    col,    covariances[col]);    	non-compiled	[CE]  method  multiplyEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	1	None	replace
