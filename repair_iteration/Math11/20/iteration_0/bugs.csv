bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
39	[BUG] [BUGGY] this.means = MathArrays.copyOf(means); [FE] AssertionError [CONTEXT] if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [BUGGY] this.means = MathArrays.copyOf(means); [BUGGY]  covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant(); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	117	117	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (covariances.length != dim) { throw new DimensionMismatchException(covariances.length, dim); } for (int i = 0; i < dim; i++) { if (dim != covariances[i].length) { throw new DimensionMismatchException(covariances[i].length, dim); } } [BUGGY] [BUGGY] this.means = MathArrays.copyOf(means); covarianceMatrix = new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse = covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant = covMatDec.getDeterminant(); [CLASS] MultivariateNormalDistribution [METHOD] <init> [RETURN_TYPE] RandomGenerator,double[],double[][])  RandomGenerator rng final double[] means final double[][] covariances [VARIABLES] EigenDecomposition covMatDec boolean double[] covMatEigenvalues evec means RealMatrix covarianceMatrix covarianceMatrixInverse samplingMatrix tmpMatrix Array2DRowRealMatrix covMatEigenvectors double covarianceMatrixDeterminant factor double[][] covariances RandomGenerator rng int col dim i row v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	117	117	1	add	
