bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  sum);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  sum);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  sum);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    for(int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  For(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  For(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    For(int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  int  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  >  expected	1	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	compilable	  [FE]  AssertionError  	2	2	replace
8	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);	      double    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum);  [BUGGY]    for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum);	      double    preMultiplied    =    covarianceMatrixDeterminant.preMultiply(centered);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  (int  i  =  0;  i  <  values.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  (int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length;    i++)    {    (int  i  =  0;  i  <  values.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
