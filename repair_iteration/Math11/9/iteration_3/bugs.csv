bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(std);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	For(int  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    For(int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	4	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    for(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  For(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  For(int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    For(int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	6	None	add
8	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  +  1);	  double    preMultiplied    =    covarianceMatrixDeterminant.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  sum  -  1);	  double    preMultiplied    =    covarianceMatrixDeterminant.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  -  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(center,  preMultiplied);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(center,    sum);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(std,  sum);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(std);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	for(int  i  =  0;  i  <  preMultiplied.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	7	2	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  preMultiplied.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	7	2	replace
16	[BUG]  [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	int  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  >  expected	5	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	add	for(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	7	2	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  2;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  values.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	7	2	replace
19	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(preserve);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixInverse.preMultiply(preserve);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixInverse.preMultiply(preserve);	  double    preMultiplied    =    covarianceMatrixInverse.preMultiply(std);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  (int  i  =  0;  i  <  values.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length  -  1;  i++)  {  (int  i  =  0;  i  <  values.length  -  1;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int    i    =    0;    i    <    values.length    -    1;    i++)    {    (int  i  =  0;  i  <  values.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  final  double  i  =  0;  i  <  values.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    (int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  >  expected	12	None	replace
22	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  preMultiplied);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  preMultiplied);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  preMultiplied);	  double    preMultiplied    =    covarianceMatrixDeterminant.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  centered);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;      [BUGGY]  double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  centered);  [BUGGY]      for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	235	235	1	replace	double  preMultiplied  =  covarianceMatrixDeterminant.preMultiply(centered,  centered);	  double    preMultiplied    =    covarianceMatrixDeterminant.preMultiply(centered,    sum);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
