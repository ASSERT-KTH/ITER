bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
2	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
3	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }	  if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    1);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  if(covMatEigenvalues[i]!=    null)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  if(covMatEigenvalues[i]!=    null)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  if(covMatEigenvalues[i]!=    null)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
7	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
8	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
9	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  ==  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	if(i  ==  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	22	5	replace
10	[BUG]  [BUGGY]  if(i  ==  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  ==  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i  ==  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	22	5	replace
11	[BUG]  [BUGGY]  if(i!=  covMatEigenvalues.length)  {  if(i  <  0)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i!=  covMatEigenvalues.length)  {  if(i  <  0)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i!=  covMatEigenvalues.length)  {  if(i  <  0)  {  throw  new  NonPositiveDefiniteMatrixException( " ");  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	22	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	3	1	add
13	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	3	1	add
14	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP	  	non-compiled	[CE]  '('  or  '['  expected	3	None	add
15	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  	non-compiled	[CE]  '('  or  '['  expected	3	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  AssertionError  	6	1	add
17	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  AssertionError  	6	1	add
18	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP	  	non-compiled	[CE]  '('  or  '['  expected	6	None	add
19	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  Non  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  Non  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  Non	  	non-compiled	[CE]  '('  or  '['  expected	6	None	add
20	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP	  	non-compiled	[CE]  '('  or  '['  expected	8	None	add
21	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	5	add
22	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	8	5	add
23	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefi  [CE]  '('  or  '['  expected  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefi  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefi	  	non-compiled	[CE]  '('  or  '['  expected	8	None	add
24	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  0;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  0;  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  0;	  MutableMatEigenvalues    covMatEigenvalues[i]    =    covMatEigenvalues[i];    	non-compiled	[CE]  ']'  expected	32	None	replace
25	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatEigenvalues[i];  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatEigenvalues[i];  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatEigenvalues[i];	  MutableMatEigenvalues    covMatEigenvalues[i]    =    covMatEigenvalues[i];    	non-compiled	[CE]  ']'  expected	32	None	replace
26	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  1);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  1);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  1);	  MutableMatEigenvalues    covMatEigenvalues[i]    =    new    MutableMatEigenvalues(covMatEigenvalues[i],    0,    0);    	non-compiled	[CE]  ']'  expected	30	None	replace
27	[BUG]  [BUGGY]  If(covMatEigenvalues[i]  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  If(covMatEigenvalues[i]  ==  0)  {  [BUGGY]      throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	If(covMatEigenvalues[i]  ==  0)  {	  if(covMatEigenvalues[i]    ==    0)    {    If(covMatEigenvalues[i]    ==    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  If(covMatEigenvalues[i]  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  If(covMatEigenvalues[i]  ==  null)  {  [BUGGY]      throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	If(covMatEigenvalues[i]  ==  null)  {	  if(covMatEigenvalues[i]    ==    0)    {    If(covMatEigenvalues[i]    ==    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  ((  MultivariateNormalDistribution)covMatEigenvalues[i]).setValue(dim);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  MultivariateNormalDistribution)covMatEigenvalues[i]).setValue(dim);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  MultivariateNormalDistribution)covMatEigenvalues[i]).setValue(dim);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  ((  MultivariateNormalDistribution)cvarianceMatEigenvalues[i]).setColumn(dim);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  MultivariateNormalDistribution)cvarianceMatEigenvalues[i]).setColumn(dim);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  MultivariateNormalDistribution)cvarianceMatEigenvalues[i]).setColumn(dim);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	1	1	add
32	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	1	1	add
33	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonP	  	non-compiled	[CE]  '('  or  '['  expected	1	None	add
34	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  	non-compiled	[CE]  '('  or  '['  expected	1	None	add
35	[BUG]  [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i],  covarianceMatrixInverse);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i],  covarianceMatrixInverse);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	allowMatEigenvalues(covMatEigenvalues[i],  covarianceMatrixInverse);	  allowMatEigenvalues(covMatEigenvalues[i]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  ((  RealMattrix)covMatEigenvalues[i]).setValue(covMatEigenvalues[i]);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  RealMattrix)covMatEigenvalues[i]).setValue(covMatEigenvalues[i]);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  RealMattrix)covMatEigenvalues[i]).setValue(covMatEigenvalues[i]);	  if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
37	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  if(covMatEigenvalues[i]    ==    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    1);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
38	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }	  if(covMatEigenvalues[i]!=    null)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  >=  0)  {  [BUGGY]      throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	if(covMatEigenvalues[i]  >=  0)  {	  if(covMatEigenvalues[i]!=    0)    {    if(covMatEigenvalues[i]    >=    0)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	5	replace
40	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  >=  0)  {  [FE]  NonPositiveDefiniteMatrixException  [FE]          NonPositiveDefiniteMatrixException      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  >=  0)  {  [BUGGY]      throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  >=  0)  {	  if(covMatEigenvalues[i]!=    0)    {    if(covMatEigenvalues[i]    >=    0)    {    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	15	5	replace
41	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  	non-compiled	[CE]  '('  or  '['  expected	8	None	add
42	[BUG]  [BUGGY]  ((  RealMatrix)covMatEigenvalues[i]).reset();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  RealMatrix)covMatEigenvalues[i]).reset();  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  RealMatrix)covMatEigenvalues[i]).reset();	  if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  ((  RealMatrix)covMatEigenvalues[i]).remove();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  RealMatrix)covMatEigenvalues[i]).remove();  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  RealMatrix)covMatEigenvalues[i]).remove();	  if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  ((  MultivariateNormalDistribution)dim).setMatEigenvalues(covMatEigenvalues[i]);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  MultivariateNormalDistribution)dim).setMatEigenvalues(covMatEigenvalues[i]);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  MultivariateNormalDistribution)dim).setMatEigenvalues(covMatEigenvalues[i]);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  ((  MultivariateNormalDistribution)dim).setValue(covMatEigenvalues[i]);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  ((  MultivariateNormalDistribution)dim).setValue(covMatEigenvalues[i]);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	((  MultivariateNormalDistribution)dim).setValue(covMatEigenvalues[i]);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0,    0);    }    	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	28	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	for(int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
48	[BUG]  [BUGGY]  MutableMatcher  dim  =(MutableMatcher)covMatEigenvalues[i];  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatcher  dim  =(MutableMatcher)covMatEigenvalues[i];  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatcher  dim  =(MutableMatcher)covMatEigenvalues[i];	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  MutableMatcher  dim  =  new  MutableMatcher(covMatEigenvalues[i]);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatcher  dim  =  new  MutableMatcher(covMatEigenvalues[i]);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatcher  dim  =  new  MutableMatcher(covMatEigenvalues[i]);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatrixInverse;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatrixInverse;  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  covarianceMatrixInverse;	  MutableMatEigenvalues    covMatEigenvalues[i]    =    covMatEigenvalues[i];    	non-compiled	[CE]  ']'  expected	32	None	replace
51	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	4	5	replace
52	[BUG]  [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	4	5	replace
53	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	4	5	replace
54	[BUG]  [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i!=  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	4	5	replace
55	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }	  if(covMatEigenvalues[i]!=    null)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteM	  	non-compiled	[CE]  '('  or  '['  expected	6	None	add
57	[BUG]  [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i],  0);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i],  0);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	allowMatEigenvalues(covMatEigenvalues[i],  0);	  allowMatEigenvalues(covMatEigenvalues[i]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
58	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	22	5	replace
59	[BUG]  [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i  >  0)  {  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	compilable	  [FE]  NonPositiveDefiniteMatrixException  	22	5	replace
60	[BUG]  [BUGGY]  MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  0,  covarianceMatEigenvalues[i])?  null  :  dim.toString();  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  0,  covarianceMatEigenvalues[i])?  null  :  dim.toString();  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  0,  covarianceMatEigenvalues[i])?  null  :  dim.toString();	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  ')'  expected	2	None	replace
61	[BUG]  [BUGGY]  MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  =  0)?  null  :  dim.toString();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  =  0)?  null  :  dim.toString();  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  dim  =(MutableMatEigenvalues[i]  <  =  0)?  null  :  dim.toString();	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  MutableMatEigenvalues  dim  =  covMatEigenvalues[i];  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  dim  =  covMatEigenvalues[i];  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  dim  =  covMatEigenvalues[i];	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  MutableMatEigenvalues  dim  =  covMatEigenvalues[i].getDeterminant();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  dim  =  covMatEigenvalues[i].getDeterminant();  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  dim  =  covMatEigenvalues[i].getDeterminant();	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  =  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  if(i  >  0)  {  if(covMatEigenvalues[i]  <  =  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(i  >  0)  {  if(covMatEigenvalues[i]  <  =  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
65	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i]);  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i]);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i]);	  MutableMatEigenvalues    covMatEigenvalues[i]    =    covMatEigenvalues[i];    	non-compiled	[CE]  ']'  expected	32	None	replace
66	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat	  	non-compiled	[CE]  ')'  expected	3	None	add
67	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    1,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM	  	non-compiled	[CE]  ')'  expected	3	None	add
68	[BUG]  [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
69	[BUG]  [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	allowMatEigenvalues(covMatEigenvalues[i])  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }	  if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  ';'  expected	19	None	replace
70	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
71	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        i,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covM	  	non-compiled	[CE]  ')'  expected	6	None	add
72	[BUG]  [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	                if(covMatEigenvalues[i]        <        0)        {        throw        new        NonPositiveDefiniteMatrixException(covMatEigenvalues[i],        0,        0);        }        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMat	  	non-compiled	[CE]  ')'  expected	1	None	add
73	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  i,  0);  [CE]  ']'  expected  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]        covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {      [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  i,  0);  [BUGGY]      if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  i,  0);	          if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]    >=    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  ']'  expected	9	None	replace
