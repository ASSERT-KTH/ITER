bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	9	1	add
2	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	compilable	  [FE]  AssertionError  	9	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }	  	compilable	  [FE]  AssertionError  	9	1	add
4	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  1,  0);  }	  	compilable	  [FE]  AssertionError  	9	1	add
5	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  null)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  null)  {	  if(covMatEigenvalues[i]    ==    0)    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	7	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  AssertionError  	1	1	add
7	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  AssertionError  	1	1	add
8	[BUG]  [BUGGY]  [FE]  NonPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	add	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	5	add
9	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [FE]  NonPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  >=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	  	compilable	  [FE]  NonPositiveDefiniteMatrixException  	1	5	add
10	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  if(covMatEigenvalues[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  if(covMatEigenvalues[i]  ==  0)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]    ==    0)    {    if(covMatEigenvalues[i]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  If(covMatEigenvalues[i]  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  If(covMatEigenvalues[i]  ==  0)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]    ==    0)    {    If(covMatEigenvalues[i]  ==  0)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
12	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]!=  0)  {  [CE]  illegal  start  of  expression  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]!=  0)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=    0)    {    if(covMatEigenvalues[i]!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
15	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      NonPositiveDefiniteMatrixException    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]  >=  0)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=    0)    {    if(covMatEigenvalues[i]  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
16	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        NonPositiveDefiniteMatrixException    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  if(covMatEigenvalues[i]  ==  0)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=    0)    {    if(covMatEigenvalues[i]  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
17	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covarianceMatEigenvalues[i],  0,  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  (double[][])covMatEigenvalues[i].toArray();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  double[][]  covariances  =  (double[][])covMatEigenvalues[i].toArray();  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	double[][]  covariances  =  (double[][])covMatEigenvalues[i].toArray();	      double[][]    covariances    =    covMatEigenvalues[i].toArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  If(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  If(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    If(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  0);  }	  	non-compiled	[CE]  ';'  expected	9	None	add
23	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]  ==  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  0,  1);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  double[][]  covMatEigenvalues  =  covMatEigenvalues[i].toArray();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  double[][]  covMatEigenvalues  =  covMatEigenvalues[i].toArray();  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	double[][]  covMatEigenvalues  =  covMatEigenvalues[i].toArray();	      double[][]    covariances    =    covMatEigenvalues[i].toArray();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]      if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	        if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    if(covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0,  0);  }	  	non-compiled	[CE]  constructor  NonPositiveDefiniteMatrixException  in  class  NonPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	1	None	add
29	[BUG]  [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i]);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  allowMatEigenvalues(covMatEigenvalues[i]);  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	allowMatEigenvalues(covMatEigenvalues[i]);	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  0);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  0);  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  new  MutableMatEigenvalues(covMatEigenvalues[i],  0,  0);	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    0,    0);    }    	non-compiled	[CE]  ']'  expected	10	None	replace
31	[BUG]  [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  [CE]  incomparable  types:  double  and  <null>  [FE]    NonPositiveDefiniteMatrixException    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  if(covMatEigenvalues[i]!=  null)  {  [BUGGY]    throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	if(covMatEigenvalues[i]!=  null)  {	  if(covMatEigenvalues[i]!=    0)    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	12	None	replace
32	[BUG]  [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covMatEigenvalues[i];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {    [BUGGY]  MutableMatEigenvalues  covMatEigenvalues[i]  =  covMatEigenvalues[i];  [BUGGY]    if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  }  final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	133	133	1	replace	MutableMatEigenvalues  covMatEigenvalues[i]  =  covMatEigenvalues[i];	      if(covMatEigenvalues[i]    <    0)    {    throw    new    NonPositiveDefiniteMatrixException(covMatEigenvalues[i],    i,    0);    }    	non-compiled	[CE]  ']'  expected	2	None	replace
