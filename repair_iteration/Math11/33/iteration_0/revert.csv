projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148for(introw=0;row<dim;row++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=covMatEigenvectors.getColumns();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=covMatEigenvectors.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=tmpMatrix.multiplyEntry(dim,v,covariances);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=covMatEigenvectors.multiplyEntry(dim,rng);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=covMatEigenvectors.multiplyEntry(dim,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=tmpMatrix.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=tmpMatrix.multiplyEntry(dim,v);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java148double[][]covariances=tmpMatrix.getEigenvectors();
