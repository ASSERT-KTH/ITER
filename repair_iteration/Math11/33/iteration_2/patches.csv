bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.getRows();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.getRows();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.getRows();	  double[][]    covariances    =    tmpMatrix.getColumns();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.getRanges();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.getRanges();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.getRanges();	  double[][]    covariances    =    tmpMatrix.getColumns();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(row,    col);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariance);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariance);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariance);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    mean);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
5	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.transpose();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.transpose();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatEigenvectors.transpose();	  double[][]    covariances    =    tmpMatEigenvectors.toArray();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
6	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  means);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  means);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  means);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    v,    means);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);	  double[][]    covariances    =    tmpMatrix.multiplyEntry();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  final  double[][]  covariances  =  tmpMatrix.transpose();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  final  double[][]  covariances  =  tmpMatrix.transpose();  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	final  double[][]  covariances  =  tmpMatrix.transpose();	  final    double[][]    covariances    =    tmpMatrix.toArray();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  v);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  v);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  v);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    means,    v);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrixDeterminant);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrixDeterminant);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  v,  tmpMatrixDeterminant);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    tmpMatrix);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrixDeterminant);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrixDeterminant);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrixDeterminant);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.getVariantes();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.getVariantes();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.getVariantes();	  double[][]    covariances    =    tmpMatrix.getVariances();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
13	[BUG]  [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.getRows();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  final  double[][]  covariances  =  covMatEigenvectors.getRows();  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	final  double[][]  covariances  =  covMatEigenvectors.getRows();	  final    double[][]    covariances    =    covMatEigenvectors.getColumns();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.getRows();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatEigenvectors.getRows();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatEigenvectors.getRows();	  double[][]    covariances    =    tmpMatEigenvectors.getColumns();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
15	[BUG]  [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(dim,  v,  tmpMatrix);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  mean.multiplyEntry(dim,  v,  tmpMatrix);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  mean.multiplyEntry(dim,  v,  tmpMatrix);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    v,    mean);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  mean);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  mean);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  0,  mean);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    v,    mean);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  col);	  final    double[][]    covariances    =    tmpMatrix.multiplyEntry(row,    col);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariances);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariances);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covariances);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    means);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvalues);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvalues);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(rng,  covMatEigenvalues);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    covMatEigenvalues);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.getDeterminants();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.getDeterminants();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.getDeterminants();	  double[][]    covariances    =    tmpMatrix.getVariances();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
21	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  dim);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  dim);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(tmpMatrix,  dim);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(covMatEigenvectors,  dim);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(covMatEigenvectors,  dim);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(covMatEigenvectors,  dim);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    covMatEigenvectors);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
23	[BUG]  [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	final  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim);	  final    double[][]    covariances    =    tmpMatrix.toArray();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  rng);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  rng);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  rng);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    tmpMatrix);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  mean,  rng);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  mean,  rng);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  mean,  rng);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    mean);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covarianceMatrixDeterminant);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covarianceMatrixDeterminant);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  covarianceMatrixDeterminant);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    covMatEigenvalues);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.getVarianties();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.getVarianties();  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.getVarianties();	  double[][]    covariances    =    tmpMatrix.getVariances();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  final  double[][]  covariances  =  tmpMatrix.multiplyEntry();  [BUGGY]      final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	final  double[][]  covariances  =  tmpMatrix.multiplyEntry();	  final    double[][]    covariances    =    tmpMatrix.toArray();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  1,  means);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  1,  means);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  tmpMatrix.multiplyEntry(dim,  1,  means);	  double[][]    covariances    =    tmpMatrix.multiplyEntry(dim,    v,    means);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  v);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        final  Array2DRowRealMatrix  covMatEigenvectors  =  new  Array2DRowRealMatrix(dim,  dim);  for  (int  v  =  0;  v  <  dim;  v++)  {  final  double[]  evec  =  covMatDec.getEigenvector(v).toArray();  covMatEigenvectors.setColumn(v,  evec);  }  final  RealMatrix  tmpMatrix  =  covMatEigenvectors.transpose();        [BUGGY]  double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  v);  [BUGGY]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	148	148	1	replace	double[][]  covariances  =  covMatEigenvectors.multiplyEntry(dim,  tmpMatrix,  v);	  double[][]    covariances    =    covMatEigenvectors.multiplyEntry(dim,    v,    tmpMatrix);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
