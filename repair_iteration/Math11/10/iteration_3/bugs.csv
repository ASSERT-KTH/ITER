bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  1);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  1);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(values[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	replace
2	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  *  centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  *  centered[i]);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  *  centered[i]);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]    *    centered[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	41	None	replace
3	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    i);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	27	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    sum    +=    preMultiplied[i]    *    values[i];    	compilable	  [FE]  AssertionError  	15	2	replace
5	[BUG]  [BUGGY]  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    sum    +=    preMultiplied[i]    *    values[i];    	compilable	  [FE]  AssertionError  	15	2	replace
6	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrixDeterminant;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrixDeterminant;  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrixDeterminant;	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    sum    +=    preMultiplied[i]    *    tmpMatrix;    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	32	None	replace
7	[BUG]  [BUGGY]  double  sum  +=  values[i]  *  preMultiplied[i];  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  values[i]  *  preMultiplied[i];	  sum    +=    values[i]    *    centered[i];    double    sum    +=    values[i]    *    centered[i];    	non-compiled	[CE]  ';'  expected	35	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  values[i]  /  preMultiplied[i];	  sum    +=    values[i]    *    preMultiplied[i];    	compilable	  [FE]  AssertionError  	19	2	replace
9	[BUG]  [BUGGY]  sum  +=  values[i]  /  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  values[i]  /  preMultiplied[i];	  sum    +=    values[i]    *    preMultiplied[i];    	compilable	  [FE]  AssertionError  	19	2	replace
10	[BUG]  [BUGGY]  double  preMultiplied[]  =  values[i].doubleValue()  /  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied[]  =  values[i].doubleValue()  /  1;  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied[]  =  values[i].doubleValue()  /  1;	  double    preMultiplied[]    =    values[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	13	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    values[i]    *    preMultiplied[i];    sum  +=  values[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	18	2	add
12	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    preMultiplied[i];    sum  +=  values[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	18	2	add
13	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i);  sum  +=  values[i]  *  preMultiplied[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i);  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    preMultiplied[i];    double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i);  sum  +=  values[i]  *  preMultiplied[i];	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	18	None	add
14	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]);  sum  +=  values[i]  *  preMultiplied[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]);  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    preMultiplied[i];    double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]);  sum  +=  values[i]  *  preMultiplied[i];	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	18	None	add
15	[BUG]  [BUGGY]  double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);  [CE]  no  suitable  method  found  for  preMultiply(double)  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);	  sum    +=    preMultiplied[i]    /    centered[i];    double    v    =    covarianceMatrixInverse.preMultiply(centered[i]);    	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double)	40	None	replace
16	[BUG]  [BUGGY]  double  v  =  covarianceMatrixInverse.preMultiply(center[i]);  [CE]  cannot  find  symbol  center  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  v  =  covarianceMatrixInverse.preMultiply(center[i]);  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  v  =  covarianceMatrixInverse.preMultiply(center[i]);	  sum    +=    preMultiplied[i]    /    centered[i];    double    v    =    covarianceMatrixInverse.preMultiply(centered[i]);    	non-compiled	[CE]  cannot  find  symbol  center	40	None	replace
17	[BUG]  [BUGGY]  double  preMultiplied  =  values[i].doubleValue()  /  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  values[i].doubleValue()  /  1;  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i].doubleValue()  /  1;	  double    preMultiplied    =    values[i].doubleValue()    +    1;    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	20	None	replace
18	[BUG]  [BUGGY]  Sum  +=  preMultiplied[i]  *  values[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  Sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	Sum  +=  preMultiplied[i]  *  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    Sum    +=    preMultiplied[i]    *    values[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	16	None	replace
19	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i  +  1);  sum  +=  preMultiplied[i]  *  centered[i];	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    i);    sum    +=    preMultiplied[i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	42	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  sum  +=  centered[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    centered[i]    /    preMultiplied[i];    sum  +=  centered[i]  /  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	23	2	add
21	[BUG]  [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  sum  +=  centered[i]  /  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  sum  +=  centered[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    /    preMultiplied[i];    sum  +=  centered[i]  /  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	23	2	add
22	[BUG]  [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  Sum  +=  centered[i]  /  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  Sum  +=  centered[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    /    preMultiplied[i];    Sum  +=  centered[i]  /  preMultiplied[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	23	None	add
23	[BUG]  [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  double  -=  centered[i]  /  preMultiplied[i];  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  double  -=  centered[i]  /  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    /    preMultiplied[i];    double  -=  centered[i]  /  preMultiplied[i];	  	non-compiled	[CE]  unexpected  type	23	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	14	2	add
25	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	14	2	add
26	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    Sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	14	None	add
27	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  [CE]  cannot  find  symbol  Sum  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	14	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    preMultiplied[i]    /    values[i];    sum  +=  preMultiplied[i]  /  values[i];	  	compilable	  [FE]  AssertionError  	21	2	add
29	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  sum  +=  preMultiplied[i]  /  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    values[i];    sum  +=  preMultiplied[i]  /  values[i];	  	compilable	  [FE]  AssertionError  	21	2	add
30	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  Sum  +=  preMultiplied[i]  /  values[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  Sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    values[i];    Sum  +=  preMultiplied[i]  /  values[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	21	None	add
31	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  double  -=  preMultiplied[i]  /  values[i];  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  double  -=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    values[i];    double  -=  preMultiplied[i]  /  values[i];	  	non-compiled	[CE]  unexpected  type	21	None	add
32	[BUG]  [BUGGY]  double  sum  +=  centered[i]  *  preMultiplied[i];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  centered[i]  *  preMultiplied[i];	  sum    +=    centered[i]    *    preMultiplied[i];    double    sum    +=    centered[i]    *    preMultiplied[i];    	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  double  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  preMultiplied[i]  *  centered[i];	  sum    +=    centered[i]    *    preMultiplied[i];    double    sum    +=    centered[i]    *    preMultiplied[i];    	non-compiled	[CE]  ';'  expected	8	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  evec  =  getMeans()  [i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	double  evec  =  getMeans()  [i];	  sum    +=    values[i]    *    centered[i];    double    evec    =    getMeans()[i];    	compilable	  [FE]  AssertionError  	44	2	replace
35	[BUG]  [BUGGY]  double  evec  =  getMeans()  [i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  evec  =  getMeans()  [i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  evec  =  getMeans()  [i];	  sum    +=    values[i]    *    centered[i];    double    evec    =    getMeans()[i];    	compilable	  [FE]  AssertionError  	44	2	replace
36	[BUG]  [BUGGY]  Sum  +=  centered[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  Sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	Sum  +=  centered[i]  *  preMultiplied[i];	  sum    +=    centered[i]    *    preMultiplied[i];    Sum    +=    centered[i]    *    preMultiplied[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	replace
37	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  centered[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  centered[i]  *  preMultiplied[i];	  sum    +=    centered[i]    *    preMultiplied[i];    Sum    +=    centered[i]    *    preMultiplied[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	replace
38	[BUG]  [BUGGY]  double  preMultiplied  =  centered[i]  -  getMeans()  [i]  *  values[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  centered[i]  -  getMeans()  [i]  *  values[i];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  centered[i]  -  getMeans()  [i]  *  values[i];	  double    preMultiplied    =    values[i]    -    getMeans()    [i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	45	None	replace
39	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i]  *  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i]  *  1;  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMeans()[i]  *  1;	  double    preMultiplied    =    values[i]    -    getMeans()[i]    +    1;    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	29	None	replace
40	[BUG]  [BUGGY]  double  sum  +=  preMultiplied[i]  *  values[i];  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  preMultiplied[i]  *  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    double    sum    +=    preMultiplied[i]    *    values[i];    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])	36	None	add
42	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  -  getMeans()[i];  [CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    double  value  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])	36	None	add
43	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    double[]  centered  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	36	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
45	[BUG]  [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
47	[BUG]  [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
48	[BUG]  [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  Sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  Sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    Sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	5	None	add
49	[BUG]  [BUGGY]  double[]  centered  =  values[i]  -  getMeans()[i];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  centered  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  centered  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double[]    centered    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	4	None	replace
50	[BUG]  [BUGGY]  Sum  +=  values[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  Sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	Sum  +=  values[i]  *  preMultiplied[i];	  sum    +=    values[i]    *    centered[i];    Sum    +=    values[i]    *    centered[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	3	None	replace
51	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];	  sum    +=    values[i]    *    centered[i];    Sum    +=    values[i]    *    centered[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	3	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	double  value  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double    value    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	37	2	replace
53	[BUG]  [BUGGY]  double  value  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  value  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double    value    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	37	2	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  preMultiplied[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double    value    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	37	1	replace
55	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double    value    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	37	1	replace
56	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i],  sum);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i],  sum);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i],  sum);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	25	None	replace
57	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +=  preMultiplied[i]  *  centered[i];	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    sum    +=    preMultiplied[i]    *    centered[i];    	non-compiled	[CE]  ')'  expected	30	None	replace
58	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum,  i);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum,  i);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum,  i);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	28	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];	  	compilable	  [FE]  AssertionError  	9	2	add
60	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];	  	compilable	  [FE]  AssertionError  	9	2	add
61	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    Sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	9	None	add
62	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  double  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  double  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    double  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  ']'  expected	9	None	add
63	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];  sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];  [CE]  variable  evec  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];  sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    evec    =    getMeans()[i];    sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];	  	non-compiled	[CE]  variable  evec  is  already  defined  in  method  getExponentTerm(double[])	43	None	add
64	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];  double  evec  =  getMeans()[i];  [CE]  variable  evec  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];  double  evec  =  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    evec    =    getMeans()[i];    double  evec  =  getMeans()[i];	  	non-compiled	[CE]  variable  evec  is  already  defined  in  method  getExponentTerm(double[])	43	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  *  values[i];  sum  +=  centered[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    centered[i]    *    values[i];    sum  +=  centered[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	38	2	add
66	[BUG]  [BUGGY]  sum  +=  centered[i]  *  values[i];  sum  +=  centered[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  *  values[i];  sum  +=  centered[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    values[i];    sum  +=  centered[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	38	2	add
67	[BUG]  [BUGGY]  sum  +=  centered[i]  *  values[i];  Sum  +=  centered[i]  *  values[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  *  values[i];  Sum  +=  centered[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    values[i];    Sum  +=  centered[i]  *  values[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	38	None	add
68	[BUG]  [BUGGY]  sum  +=  centered[i]  *  values[i];  double  sum  +=  centered[i]  *  values[i];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  centered[i]  *  values[i];  double  sum  +=  centered[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    values[i];    double  sum  +=  centered[i]  *  values[i];	  	non-compiled	[CE]  ';'  expected	38	None	add
69	[BUG]  [BUGGY]  Sum  +=  preMultiplied[i]  /  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  Sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	Sum  +=  preMultiplied[i]  /  centered[i];	  sum    +=    preMultiplied[i]    /    centered[i];    Sum    +=    preMultiplied[i]    /    centered[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	replace
70	[BUG]  [BUGGY]  double  sum  +=  preMultiplied[i]  /  centered[i];  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  preMultiplied[i]  /  centered[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    sum    +=    preMultiplied[i]    /    centered[i];    	non-compiled	[CE]  ';'  expected	31	None	replace
71	[BUG]  [BUGGY]  double  sum  +=  preMultiplied[i]  /  values[i];  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  sum  +=  preMultiplied[i]  /  values[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    sum    +=    preMultiplied[i]    /    centered[i];    	non-compiled	[CE]  ';'  expected	31	None	replace
72	[BUG]  [BUGGY]  double  -=  preMultiplied[i]  /  centered[i];  [CE]  unexpected  type  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  -=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  -=  preMultiplied[i]  /  centered[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    -=    preMultiplied[i]    /    centered[i];    	non-compiled	[CE]  unexpected  type	12	None	replace
73	[BUG]  [BUGGY]  double  -=  preMultiplied[i]  /  values[i];  [CE]  unexpected  type  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  -=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  -=  preMultiplied[i]  /  values[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    -=    preMultiplied[i]    /    centered[i];    	non-compiled	[CE]  unexpected  type	12	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
75	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
76	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    Sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	1	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
78	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  centered[i];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  preMultiplied[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
79	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i,  sum);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i,  sum);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(i,  sum);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	28	None	replace
80	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getPremiumMeans()  [i  +  1];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  values[i]  -  getPremiumMeans()  [i  +  1];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getPremiumMeans()  [i  +  1];	  double    preMultiplied    =    values[i]    -    getPremiumMeans()[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	33	None	replace
81	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	9	None	add
82	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  center[i];  sum  +=  preMultiplied[i]  /  centered[i];  [CE]  cannot  find  symbol  center  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  center[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        /        centered[i];        sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  center[i];  sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  center	9	None	add
83	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  preMultiplied[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  preMultiplied[i];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  preMultiplied[i];	  double    preMultiplied    =    values[i]    -    getMeans()    [i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	45	None	replace
84	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]  *  preMultiplied[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]  *  preMultiplied[i]);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]  *  preMultiplied[i]);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]    *    centered[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	41	None	replace
85	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  Sum  +=  values[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  Sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    preMultiplied[i];    Sum  +=  values[i]  *  preMultiplied[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	18	None	add
86	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double  sum  +=  values[i]  *  preMultiplied[i];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  double  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    preMultiplied[i];    double  sum  +=  values[i]  *  preMultiplied[i];	  	non-compiled	[CE]  ';'  expected	18	None	add
87	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  double  sum  +=  preMultiplied[i]  /  values[i];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  double  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    values[i];    double  sum  +=  preMultiplied[i]  /  values[i];	  	non-compiled	[CE]  ';'  expected	21	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  -=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  -=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
89	[BUG]  [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  -=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];  sum  -=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        centered[i]        *        preMultiplied[i];        sum    +=    centered[i]    *    preMultiplied[i];    sum  -=  preMultiplied[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	5	2	add
90	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  values;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  values;  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  *  values;	  sum    +=    values[i]    *    preMultiplied[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
91	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  values[i]);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(values[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	replace
92	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i],  centered);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                    AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i],  centered);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i],  centered);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(values[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	replace
93	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  *  centered[i];  [CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    double  value  =  values[i]  *  centered[i];	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])	36	None	add
94	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  value  =  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    double  value  =  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getExponentTerm(double[])	36	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  preMultiplied[i]  /  getMeans()[i];	  sum    +=    preMultiplied[i]    /    values[i];    	compilable	  [FE]  AssertionError  	22	2	replace
96	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  /  getMeans()[i];	  sum    +=    preMultiplied[i]    /    values[i];    	compilable	  [FE]  AssertionError  	22	2	replace
97	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  *  centered[i];  double[]  centered  =  values[i]  -  getMeans()[i];	  sum    +=    values[i]    *    centered[i];    double[]    centered    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	4	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  preMultiplied[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  preMultiplied[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
99	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  preMultiplied[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];  sum  +=  preMultiplied[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        sum    +=    values[i]    *    centered[i];    sum  +=  preMultiplied[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	1	2	add
100	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  0,  i);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  0,  i);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  0,  i);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    i);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	27	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  -=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  -=  preMultiplied[i]  /  centered[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    -=    preMultiplied[i]    /    centered[i];    	compilable	  [FE]  AssertionError  	12	2	replace
102	[BUG]  [BUGGY]  sum  -=  preMultiplied[i]  /  centered[i];  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  -=  preMultiplied[i]  /  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  -=  preMultiplied[i]  /  centered[i];	  sum    +=    preMultiplied[i]    /    centered[i];    double    -=    preMultiplied[i]    /    centered[i];    	compilable	  [FE]  AssertionError  	12	2	replace
103	[BUG]  [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];  double  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        values[i]        *        centered[i];        double    value    =    values[i]    -    getMeans()[i];    double  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  ';'  expected	36	None	add
104	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum  +  1);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered,    sum);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	28	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	14	2	add
106	[BUG]  [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];  sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum        +=        preMultiplied[i]        *        values[i];        sum    +=    preMultiplied[i]    *    values[i];    sum  -=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	14	2	add
107	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  Sum  +=  values[i]  *  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  Sum  +=  values[i]  *  centered[i];  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  values[i]  *  preMultiplied[i];  Sum  +=  values[i]  *  centered[i];	  sum    +=    values[i]    *    centered[i];    Sum    +=    values[i]    *    centered[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	3	None	replace
108	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  /  centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  /  centered[i]);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  /  centered[i]);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]    *    centered[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	41	None	replace
109	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  sum  +=  preMultiplied[i]  /  values[i].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  sum  +=  preMultiplied[i]  /  values[i].;  [BUGGY]      }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    values[i];    sum  +=  preMultiplied[i]  /  values[i].;	  	non-compiled	[CE]  <identifier>  expected	21	None	add
110	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMean()  [i]  *  centered[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double  preMultiplied  =  values[i]  -  getMean()  [i]  *  centered[i];  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMean()  [i]  *  centered[i];	  double    preMultiplied    =    values[i]    -    getMeans()    [i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	45	None	replace
111	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  centered[i]);  [BUGGY]      sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]  -  centered[i]);	  double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(values[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	replace
