bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	6	2	add
2	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  sum  +=  values[i]  *  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    sum  +=  values[i]  *  centered[i];	  	compilable	  [FE]  AssertionError  	6	2	add
3	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  Sum  +=  values[i]  *  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    Sum  +=  values[i]  *  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	6	None	add
4	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double[]  centered  =  values[i]  -  getMeans()[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    double[]  centered  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	6	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	10	2	add
6	[BUG]  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    preMultiplied[i];    sum  +=  centered[i]  *  preMultiplied[i];	  	compilable	  [FE]  AssertionError  	10	2	add
7	[BUG]  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  Sum  +=  centered[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  Sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    preMultiplied[i];    Sum  +=  centered[i]  *  preMultiplied[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	10	None	add
8	[BUG]  [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  double  sum  +=  centered[i]  *  preMultiplied[i];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  preMultiplied[i];  double  sum  +=  centered[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    centered[i]    *    preMultiplied[i];    double  sum  +=  centered[i]  *  preMultiplied[i];	  	non-compiled	[CE]  ';'  expected	10	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];	  	compilable	  [FE]  AssertionError  	8	2	add
10	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    centered[i];    sum  +=  preMultiplied[i]  /  centered[i];	  	compilable	  [FE]  AssertionError  	8	2	add
11	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  Sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    centered[i];    Sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	8	None	add
12	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  -=  preMultiplied[i]  /  centered[i];  [CE]  unexpected  type  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  -=  preMultiplied[i]  /  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    centered[i];    double  -=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  unexpected  type	8	None	add
13	[BUG]  [BUGGY]  double  preMultiplied[]  =  values[i].doubleValue()  +  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied[]  =  values[i].doubleValue()  +  1;  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied[]  =  values[i].doubleValue()  +  1;	      double    preMultiplied[]    =    values[i].doubleValue();    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	14	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	4	2	add
15	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    *    values[i];    sum  +=  preMultiplied[i]  *  values[i];	  	compilable	  [FE]  AssertionError  	4	2	add
16	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  Sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    *    values[i];    Sum  +=  preMultiplied[i]  *  values[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	4	None	add
17	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  double  sum  +=  preMultiplied[i]  *  values[i];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  *  values[i];  double  sum  +=  preMultiplied[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    *    values[i];    double  sum  +=  preMultiplied[i]  *  values[i];	  	non-compiled	[CE]  ';'  expected	4	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  values[i]  *  preMultiplied[i];	  sum    +=    centered[i]    *    preMultiplied[i];    	compilable	  [FE]  AssertionError  	11	2	replace
19	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  values[i]  *  preMultiplied[i];	  sum    +=    centered[i]    *    preMultiplied[i];    	compilable	  [FE]  AssertionError  	11	2	replace
20	[BUG]  [BUGGY]  double  preMultiplied  =  values[i].doubleValue()  +  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied  =  values[i].doubleValue()  +  1;  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i].doubleValue()  +  1;	      double    preMultiplied    =    values[i].doubleValue();    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	13	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  preMultiplied[i]  /  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    	compilable	  [FE]  AssertionError  	5	2	replace
22	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  preMultiplied[i]  /  values[i];	  sum    +=    preMultiplied[i]    *    values[i];    	compilable	  [FE]  AssertionError  	5	2	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  centered[i]  /  preMultiplied[i];	  sum    +=    preMultiplied[i]    /    centered[i];    	compilable	  [FE]  AssertionError  	9	2	replace
24	[BUG]  [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  /  preMultiplied[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  centered[i]  /  preMultiplied[i];	  sum    +=    preMultiplied[i]    /    centered[i];    	compilable	  [FE]  AssertionError  	9	2	replace
25	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]);  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered[i]);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
26	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]);  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values[i]);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
27	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(i);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	1	None	replace
28	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  sum);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(centered);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
29	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i]  +  1;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()[i]  +  1;  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMeans()[i]  +  1;	      double    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
30	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  centered[i];	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(i);    sum    +=    preMultiplied[i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	2	None	replace
31	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  sum  +=  preMultiplied[i]  /  centered[i];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  sum  +=  preMultiplied[i]  /  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    centered[i];    double  sum  +=  preMultiplied[i]  /  centered[i];	  	non-compiled	[CE]  ';'  expected	8	None	add
32	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrix;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrix;  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  sum  +=  preMultiplied[i]  *  tmpMatrix;	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(i);    sum    +=    preMultiplied[i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	2	None	replace
33	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getPremiumMeans()[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied  =  values[i]  -  getPremiumMeans()[i];  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getPremiumMeans()[i];	      double    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
34	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMean()  [i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied  =  values[i]  -  getMean()  [i];  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMean()  [i];	      double    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
35	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  double  sum  +=  values[i]  *  centered[i];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double  sum  +=  values[i]  *  centered[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    double  sum  +=  values[i]  *  centered[i];	  	non-compiled	[CE]  ';'  expected	6	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	6	2	add
37	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double  value  =  values[i]  -  getMeans()[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    double  value  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	6	2	add
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum  +=  centered[i]  *  values[i];	  sum    +=    values[i]    *    centered[i];    	compilable	  [FE]  AssertionError  	7	2	replace
39	[BUG]  [BUGGY]  sum  +=  centered[i]  *  values[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  centered[i]  *  values[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum  +=  centered[i]  *  values[i];	  sum    +=    values[i]    *    centered[i];    	compilable	  [FE]  AssertionError  	7	2	replace
40	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);  [CE]  no  suitable  method  found  for  preMultiply(double)  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  preMultiplied[i]  /  centered[i];  double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    preMultiplied[i]    /    centered[i];    double  v  =  covarianceMatrixInverse.preMultiply(centered[i]);	  	non-compiled	[CE]  no  suitable  method  found  for  preMultiply(double)	8	None	add
41	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  *  centered[i]);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  *  centered[i]);  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(preMultiplied[i]  *  centered[i]);	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(preMultiplied[i]);    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	3	None	replace
42	[BUG]  [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered,  i);  sum  +=  preMultiplied[i]  *  centered[i];	      double[]    preMultiplied    =    covarianceMatrixInverse.preMultiply(i);    sum    +=    preMultiplied[i]    *    centered[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	2	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	add	sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];	  	compilable	  [FE]  AssertionError  	6	2	add
44	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  sum  +=  values[i]  *  centered[i];  double  evec  =  getMeans()[i];  [BUGGY]    }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	sum    +=    values[i]    *    centered[i];    double  evec  =  getMeans()[i];	  	compilable	  [FE]  AssertionError  	6	2	add
45	[BUG]  [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  centered[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {    [BUGGY]  double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  centered[i];  [BUGGY]    sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	236	236	1	replace	double  preMultiplied  =  values[i]  -  getMeans()  [i]  *  centered[i];	      double    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	12	None	replace
