projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatEigenvalues.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132for(inti=0;i<covMatEigenvalues.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132for(inti=0;i<covarianceMatEigenvalues.length;i++){
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]factor=covMatEigenvalues.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteM
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteMatrixException(covMatEigenvalues[i],
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]factor=covarianceMatEigenvalues.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteMatrixException(covMatEigenvalues[i],
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatEigenvalues.toArray(newdouble[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues==null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDef
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getNormalEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covarianceMatEigenvalues.toArray();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getSolver();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getSolver();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefinite
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getSolver().getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getSolver().getRealEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covarianceMatDec.getSolver();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatEigenvalues.toArray(newdouble[1]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositiveDefiniteMatrixException(covMatEigenvalues[i],}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getSolver().getInverse();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132if(covMatEigenvalues!=null){for(inti=0;i<covMatEigenvalues.length;i++){if(covMatEigenvalues[i]<0){thrownewNonPositive
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getCovariances();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getCovariances();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getSolver().getVariantEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getSolver().getVariantEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covarianceMatDec.getNormalEigenvalues();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covMatDec.getRealSolver();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covarianceMatDec.getSolver();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132finaldouble[][]covariances=covarianceMatEigenvalues.toArray(newdouble[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java132double[][]covariances=covMatDec.getSolver().getRealEigenvalues(covarianceMatrixInverse);
