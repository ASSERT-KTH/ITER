bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues(i,  values[i]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getValues(i,  values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues(i,  values[i]);	  centered[i]    =    values[i]    -    getValues(i);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
2	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values[i]);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values[i]);	  double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(covarianceMatrixInverse);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
3	[BUG]  [BUGGY]  double[]  values  =  this.std.getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  this.std.getValues();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  this.std.getValues();	  double[]    values    =    values.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	1	None	replace
4	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getMean()[i];  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  *  getMean()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getMean()[i];	          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]    =    values[i]    *    getMean()[i];    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	                centered[i]        =        values[i]        -        getMeans()[i];        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	14	1	add
6	[BUG]  [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        -        getMeans()[i];        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	14	1	add
7	[BUG]  [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMean()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMean()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        -        getMeans()[i];        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMean()[i];  centered[i]  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
8	[BUG]  [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getStd()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getStd()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        -        getMeans()[i];        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getStd()[i];  centered[i]  =  values[i]  -  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centered[i]  =  values[i]  -  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]    =    values[i]    -    getMeans().length;    centered[i]  =  values[i]  -  getMeans().length;	  	compilable	  [FE]  AssertionError  	33	1	add
10	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centered[i]  =  values[i]  -  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centered[i]  =  values[i]  -  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    values[i]    -    getMeans().length;    centered[i]  =  values[i]  -  getMeans().length;	  	compilable	  [FE]  AssertionError  	33	1	add
11	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centered[i]  =  values[i]  -  getMean().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centered[i]  =  values[i]  -  getMean().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    values[i]    -    getMeans().length;    centered[i]  =  values[i]  -  getMean().length;	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
12	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centric[i]  =  values[i]  -  getMeans().length;  [CE]  cannot  find  symbol  centric  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  centric[i]  =  values[i]  -  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    values[i]    -    getMeans().length;    centric[i]  =  values[i]  -  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol  centric	33	None	add
13	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i  +  1);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i  +  1);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  i  +  1);	  double[]    values    =    getMeans().toArray(centered,    i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	24	None	replace
14	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixDeterminant);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixDeterminant);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixDeterminant);	  double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(centered,    covarianceMatrixInverse);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
15	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValue(values[i]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getValue(values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValue(values[i]);	  centered[i]    =    values[i]    -    getValues(values[i]);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
16	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMean()[i];  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  /  getMean()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getMean()[i];	  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]    =    values[i]    /    getMean()[i];    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
17	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered[i]);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered[i]);	  double[]    preMultiplied    =    values[i]    -    getMeans()    [i].preMultiply(centered,    centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
18	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  centered[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  centered[i]);	  double[]    values    =    getMeans().toArray(centered,    values[i]);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	25	None	replace
19	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(center,  centered[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                    AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(center,  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(center,  centered[i]);	  double[]    values    =    getMeans().toArray(centered,    values[i]);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	25	None	replace
20	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  std);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  std);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  std);	  double[]    values    =    getMeans().toArray(centered,    values);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	41	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	                centered[i]        =        values[i]        *        getMeans()[i];        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];	  	compilable	  [FE]  AssertionError  	17	1	add
22	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans()[i];        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];	  	compilable	  [FE]  AssertionError  	17	1	add
23	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMean()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMean()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans()[i];        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMean()[i];  centered[i]  =  values[i]  *  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
24	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getStd()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getStd()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans()[i];        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getStd()[i];  centered[i]  =  values[i]  *  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	                centered[i]        =        values[i]        *        getMeans().length;        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	11	1	add
26	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans().length;        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	11	1	add
27	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMatEigenvalues().length;  centered[i]  =  values[i]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMatEigenvalues().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans().length;        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMatEigenvalues().length;  centered[i]  =  values[i]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
28	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getStd().length;  centered[i]  =  values[i]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getStd().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans().length;        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getStd().length;  centered[i]  =  values[i]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
29	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMean().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean().length;	  centered[i]    =    values[i]    -    getMeans().length;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
30	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean()[i];  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMean()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean()[i];	          centered[i]    =    values[i]    -    getMeans()[i];    centered[i]    =    values[i]    -    getMean()[i];    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]        =        values[i]        /        getMeans()[i];        centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	20	1	add
32	[BUG]  [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]        =        values[i]        /        getMeans()[i];        centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	20	1	add
33	[BUG]  [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]        =        values[i]        /        getMeans()[i];        centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMean()[i];  centered[i]  =  values[i]  /  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
34	[BUG]  [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getStd()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getStd()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]        =        values[i]        /        getMeans()[i];        centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getStd()[i];  centered[i]  =  values[i]  /  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
35	[BUG]  [BUGGY]  double[]  values  =  centered.getValues(i,  values[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  centered.getValues(i,  values[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  centered.getValues(i,  values[i]);	  double[]    values    =    centered.getValues(i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	27	None	replace
36	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getStd().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  *  getStd().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getStd().length;	          centered[i]    =    values[i]    *    getMeans().length;    centered[i]    =    values[i]    *    getMeans().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
37	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered[i]);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered[i]);	  double[]    preMultiplied    =    centered[i]    -    getMeans()[i].preMultiply(values[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
38	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(center[i]);  [CE]  cannot  find  symbol  center  [FE]                    AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(center[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(center[i]);	  double[]    preMultiplied    =    centered[i]    -    getMeans()[i].preMultiply(values[i]);    	non-compiled	[CE]  cannot  find  symbol  center	3	None	replace
39	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(values,  centered[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(values,  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(values,  centered[i]);	  double[]    values    =    getMeans().toArray(values,    i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	30	None	replace
40	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean(i,  values[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMean(i,  values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean(i,  values[i]);	  centered[i]    =    values[i]    -    getMean(i);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
41	[BUG]  [BUGGY]  centered[i]  =  values[i].doubleValue()  *  getMeans();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i].doubleValue()  *  getMeans();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i].doubleValue()  *  getMeans();	  centered[i]    =    values[i].doubleValue()    +    getMeans();    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
42	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMeanValues(values[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  /  getMeanValues(values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getMeanValues(values[i]);	  centered[i]    =    values[i]    -    getMeanValues(values[i]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
43	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMean(i);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  /  getMean(i);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getMean(i);	  centered[i]    =    values[i]    /    getMean();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
44	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered[i]);  [CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered[i]);	  double[]    preMultiplied    =    values[i]    -    getMeans(values[i]);    	non-compiled	[CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	31	None	replace
45	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getMeans();  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  *  getMeans();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getMeans();	  centered[i]    =    values[i]    *    getMean();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	26	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centered[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  centered[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	46	1	add
47	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centered[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centered[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  centered[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	46	1	add
48	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centered[i]  -  getMean()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centered[i]  -  getMean()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  centered[i]  -  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
49	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i,  values[i]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i,  values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeanValues(i,  values[i]);	  centered[i]    =    values[i]    -    getMeanValues(i);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centered[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]    =    centered[i]    /    getMeans()[i];    centered[i]  =  centered[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	39	1	add
51	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centered[i]  /  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centered[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    /    getMeans()[i];    centered[i]  =  centered[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	39	1	add
52	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centered[i]  /  getMean()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centered[i]  /  getMean()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    /    getMeans()[i];    centered[i]  =  centered[i]  /  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
53	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centric[i]  /  getMeans()[i];  [CE]  cannot  find  symbol  centric  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  centered[i]  =  centric[i]  /  getMeans()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    /    getMeans()[i];    centered[i]  =  centric[i]  /  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol  centric	39	None	add
54	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i,  values.length);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i,  values.length);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeanValues(i,  values.length);	  centered[i]    =    values[i]    -    getMeanValues(i);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
55	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(covarianceMatrixInverse,  centered);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(covarianceMatrixInverse,  centered);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(covarianceMatrixInverse,  centered);	  double[]    preMultiplied    =    values[i]    -    getMeans()    [i].preMultiply(centered,    centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
56	[BUG]  [BUGGY]  double[]  values  =  centered.getValues(i,  values.length);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  centered.getValues(i,  values.length);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  centered.getValues(i,  values.length);	  double[]    values    =    centered.getValues(i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	27	None	replace
57	[BUG]  [BUGGY]  double[]  values  =  centered.getValues(i,  values);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  centered.getValues(i,  values);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  centered.getValues(i,  values);	  double[]    values    =    centered.getValues(i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	27	None	replace
58	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered);  [CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans(values[i],  centered);	  double[]    preMultiplied    =    values[i]    -    getMeans(values[i]);    	non-compiled	[CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	31	None	replace
59	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans();  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans();	  double[]    preMultiplied    =    values[i]    -    getMeans(values[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
60	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  values);	  double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(covarianceMatrixInverse);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
61	[BUG]  [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMean().length;  centered[i]  =  values[i]  *  getMeans().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]          centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMean().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	                centered[i]        =        values[i]        *        getMeans().length;        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMean().length;  centered[i]  =  values[i]  *  getMeans().length;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
62	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  *  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  *  1;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  *  1;	  double[]    preMultiplied    =    values[i]    -    getMeans()    [i]    +    1;    	non-compiled	[CE]  incompatible  types	43	None	replace
63	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean(i  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMean(i  +  1);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean(i  +  1);	  centered[i]    =    values[i]    -    getMean(i);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
64	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues(values[i],  covMatEigenvalues);  [CE]  cannot  find  symbol  covMatEigenvalues  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getValues(values[i],  covMatEigenvalues);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues(values[i],  covMatEigenvalues);	  centered[i]    =    values[i]    -    getValues(values[i]);    	non-compiled	[CE]  cannot  find  symbol  covMatEigenvalues	28	None	replace
65	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i]  -  1);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i]  -  1);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  values[i]  -  1);	  double[]    values    =    getMeans().toArray(centered,    values[i]);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	25	None	replace
66	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getValues().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues().length;	  centered[i]    =    values[i]    -    getMeans().length;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
67	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getValues().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  *  getValues().length;  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getValues().length;	          centered[i]    =    values[i]    *    getMeans().length;    centered[i]    =    values[i]    *    getMeans().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
68	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValue(i);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getValue(i);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValue(i);	  centered[i]    =    values[i]    -    getValues(i);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
69	[BUG]  [BUGGY]  centered[i]  =  ValueUtils.doubleValue(values[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  ValueUtils.doubleValue(values[i].doubleValue());  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  ValueUtils.doubleValue(values[i].doubleValue());	  centered[i]    =    centered[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
70	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(values[i],  covMatEigenvalues);  [CE]  cannot  find  symbol  covMatEigenvalues  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(values[i],  covMatEigenvalues);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeanValues(values[i],  covMatEigenvalues);	  centered[i]    =    values[i]    -    getMeanValues(values[i]);    	non-compiled	[CE]  cannot  find  symbol  covMatEigenvalues	8	None	replace
71	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centric[i]  -  getMeans()[i];  [CE]  cannot  find  symbol  centric  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  centric[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  centric[i]  -  getMeans()[i];	  	non-compiled	[CE]  cannot  find  symbol  centric	46	None	add
72	[BUG]  [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMean();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMean();  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i].doubleValue()  +  getMean();	  centered[i]    =    values[i].doubleValue()    +    getMeans();    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
73	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues(values[i]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues(values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMeanValues(values[i]);	  centered[i]    =    values[i]    -    getMeanValues(values[i]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
74	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMean(i);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMean(i);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMean(i);	  centered[i]    =    values[i]    -    getMean(i);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getValues(i);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getValues(i);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getValues(i);	  centered[i]    =    values[i]    -    getValues(i);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	46	1	add
77	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    centered[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	46	1	add
78	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getValues(values[i]);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getValues(values[i]);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getValues(values[i]);	  centered[i]    =    centered[i]    -    getValues()    [i];    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
79	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues(i);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues(i);  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMeanValues(i);	  centered[i]    =    values[i]    -    getMeanValues(i);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
80	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMean()[i];  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getMean()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  /  getMean()[i];	  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]    =    values[i]    /    getMean()[i];    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
81	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getValues()  [i];  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]  =  centered[i]  /  getValues()  [i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  /  getValues()  [i];	  centered[i]    =    values[i]    /    getValues()[i];    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
82	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i  +  1,  values.length);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i  +  1,  values.length);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  i  +  1,  values.length);	  double[]    values    =    getMeans().toArray(centered,    i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	24	None	replace
83	[BUG]  [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  [BUGGY]      }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]        =        values[i]        /        getMeans()[i];        centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
84	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i],  centered[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i],  centered[i]);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  values[i],  centered[i]);	  double[]    values    =    getMeans().toArray(centered,    values[i]);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	25	None	replace
85	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  centered[i];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  centered[i];  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  centered[i];	  double[]    preMultiplied    =    values[i]    -    getMeans()    [i]    +    1;    	non-compiled	[CE]  incompatible  types	43	None	replace
86	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(values,  i  +  1);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {      [BUGGY]  double[]  values  =  getMeans().toArray(values,  i  +  1);  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(values,  i  +  1);	  double[]    values    =    getMeans().toArray(values,    i);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	30	None	replace
