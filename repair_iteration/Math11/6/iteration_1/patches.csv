bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  values  =  values.getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  values.getValues();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  values.getValues();	      double[]    values    =    centered.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
2	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixInverse);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixInverse);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(centered,  covarianceMatrixInverse);	      double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
3	[BUG]  [BUGGY]  double[]  preMultiplied  =  centered[i]  -  getMeans()[i].preMultiply(values[i]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  centered[i]  -  getMeans()[i].preMultiply(values[i]);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  centered[i]  -  getMeans()[i].preMultiply(values[i]);	      double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
4	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMean();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  /  getMean();  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getMean();	  centered[i]    =    values[i]    /    getMeans()[i];    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
5	[BUG]  [BUGGY]  double[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  getValues();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getValues();	      double[]    values    =    getMeans();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	16	None	replace
6	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMean(i);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getMean(i);  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMean(i);	  centered[i]    =    values[i]    -    getMean();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
7	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(i);  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeanValues(i);	  centered[i]    =    values[i]    -    getMeanValues()[i];    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
8	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(values[i]);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getMeanValues(values[i]);  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeanValues(values[i]);	  centered[i]    =    values[i]    -    getMeanValues()[i];    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
9	[BUG]  [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMeans()[i];  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i].doubleValue()  +  getMeans()[i];	      centered[i]    =    values[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
10	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getMean().length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  *  getMean().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getMean().length;	      centered[i]    =    values[i]    *    getMeans().length;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	10	1	add
12	[BUG]  [BUGGY]      centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMeans().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMeans().length;	  	compilable	  [FE]  AssertionError  	10	1	add
13	[BUG]  [BUGGY]      centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMean().length;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans().length;  centered[i]  =  values[i]  *  getMean().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    *    getMeans().length;    centered[i]  =  values[i]  *  getMean().length;	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	2	1	add
15	[BUG]  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMeans()[i];	  	compilable	  [FE]  AssertionError  	2	1	add
16	[BUG]  [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMean()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  -  getMeans()[i];  centered[i]  =  values[i]  -  getMean()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    -    getMeans()[i];    centered[i]  =  values[i]  -  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];	  	compilable	  [FE]  AssertionError  	12	1	add
18	[BUG]  [BUGGY]      centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMeans()[i];	  	compilable	  [FE]  AssertionError  	12	1	add
19	[BUG]  [BUGGY]      centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMean()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]      centered[i]  =  values[i]  *  getMeans()[i];  centered[i]  =  values[i]  *  getMean()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	        centered[i]    =    values[i]    *    getMeans()[i];    centered[i]  =  values[i]  *  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	5	1	add
21	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMeans()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMeans()[i];	  	compilable	  [FE]  AssertionError  	5	1	add
22	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  /  getMeans()[i];  centered[i]  =  values[i]  /  getMean()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]    =    values[i]    /    getMeans()[i];    centered[i]  =  values[i]  /  getMean()[i];	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
23	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues(i);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getValues(i);  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues(i);	  centered[i]    =    values[i]    -    getValues()[i];    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  getMeans().toArray(centered,  i);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  i);	      double[]    values    =    getMeans().toArray(centered);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	17	None	replace
25	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i]);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values[i]);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  values[i]);	      double[]    values    =    getMeans().toArray(centered);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	17	None	replace
26	[BUG]  [BUGGY]  centered[i]  =  values[i]  *  getMean();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  *  getMean();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  *  getMean();	      centered[i]    =    values[i]    *    getMeans()[i];    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
27	[BUG]  [BUGGY]  double[]  values  =  centered.getValues(i);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  centered.getValues(i);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  centered.getValues(i);	      double[]    values    =    centered.getValues();    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	15	None	replace
28	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getValues(values[i]);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getValues(values[i]);  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getValues(values[i]);	  centered[i]    =    values[i]    -    getValues()[i];    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
29	[BUG]  [BUGGY]  centered[i]  =  values[i]  /  getValues()[i];  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  /  getValues()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  /  getValues()[i];	  centered[i]    =    values[i]    /    getMeans()[i];    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
30	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(values,  i);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  getMeans().toArray(values,  i);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(values,  i);	      double[]    values    =    getMeans().toArray(centered);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	17	None	replace
31	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i]);  [CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans(values[i]);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans(values[i]);	      double[]    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  method  getMeans  in  class  MultivariateNormalDistribution  cannot  be  applied  to  given  types;	1	None	replace
32	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(covarianceMatrixInverse);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(covarianceMatrixInverse);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()[i].preMultiply(covarianceMatrixInverse);	      double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]  =  values[i]  -  getMeans().length;	      centered[i]    =    values[i]    *    getMeans().length;    	compilable	  [FE]  AssertionError  	11	2	replace
34	[BUG]  [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i]  -  getMeans().length;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i]  -  getMeans().length;	      centered[i]    =    values[i]    *    getMeans().length;    	compilable	  [FE]  AssertionError  	11	2	replace
35	[BUG]  [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMeans();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  values[i].doubleValue()  +  getMeans();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  values[i].doubleValue()  +  getMeans();	      centered[i]    =    values[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
36	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getValues()  [i];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  -  getValues()  [i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getValues()  [i];	  centered[i]    =    values[i]    -    getValues()[i];    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  centered[i]  =  centered[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i].doubleValue();  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i].doubleValue();	      centered[i]    =    values[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
38	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMean();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  /  getMean();  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  /  getMean();	  centered[i]    =    values[i]    /    getMeans()[i];    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]  =  centered[i]  /  getMeans()[i];	  centered[i]    =    values[i]    /    getMeans()[i];    	compilable	  [FE]  AssertionError  	6	2	replace
40	[BUG]  [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  /  getMeans()[i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  /  getMeans()[i];	  centered[i]    =    values[i]    /    getMeans()[i];    	compilable	  [FE]  AssertionError  	6	2	replace
41	[BUG]  [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values);  [CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  values  =  getMeans().toArray(centered,  values);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  values  =  getMeans().toArray(centered,  values);	      double[]    values    =    getMeans().toArray(centered);    	non-compiled	[CE]  variable  values  is  already  defined  in  method  getExponentTerm(double[])	17	None	replace
42	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered);  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i].preMultiply(centered,  centered);	      double[]    preMultiplied    =    values[i]    -    getMeans()[i].preMultiply(centered);    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
43	[BUG]  [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  1;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  1;  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	double[]  preMultiplied  =  values[i]  -  getMeans()  [i]  +  1;	      double[]    preMultiplied    =    values[i]    -    getMeans()[i];    	non-compiled	[CE]  incompatible  types	1	None	replace
44	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues()  [i];  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  -  getMeanValues()  [i];  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMeanValues()  [i];	  centered[i]    =    values[i]    -    getMeanValues()[i];    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
45	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMean();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  -  getMean();  [BUGGY]    }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMean();	  centered[i]    =    values[i]    -    getMean();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	add	centered[i]  =  centered[i]  -  getMeans()[i];	      centered[i]    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	3	2	replace
47	[BUG]  [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {    [BUGGY]  centered[i]  =  centered[i]  -  getMeans()[i];  [BUGGY]    centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	231	231	1	replace	centered[i]  =  centered[i]  -  getMeans()[i];	      centered[i]    =    values[i]    -    getMeans()[i];    	compilable	  [FE]  AssertionError  	3	2	replace
