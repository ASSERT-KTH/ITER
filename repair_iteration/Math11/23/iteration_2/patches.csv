bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  covMatDec.setStripMatEigenvectors(false);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setStripMatEigenvectors(false);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setStripMatEigenvectors(false);	  covMatDec.setStripMatEigenvectors(true);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [CE]  variable  covarianceMatrixInverse  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  variable  covarianceMatrixInverse  might  not  have  been  initialized	9	None	replace
3	[BUG]  [BUGGY]  covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.getSolver().setInverse(true);  covMatDec.getSolver().getInverse();	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
4	[BUG]  [BUGGY]  covarianceMatrixInverse  =  this.covMatDec.getSolver();  [CE]  cannot  find  symbol  covMatDec  [FE]            AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covarianceMatrixInverse  =  this.covMatDec.getSolver();  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covarianceMatrixInverse  =  this.covMatDec.getSolver();	  covarianceMatrixInverse    =    covMatDec.getSolver();    	non-compiled	[CE]  cannot  find  symbol  covMatDec	12	None	replace
5	[BUG]  [BUGGY]  double[][]  covariances  =  covMatDec.getSolver().getVariantes();  [CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])  [FE]              AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  double[][]  covariances  =  covMatDec.getSolver().getVariantes();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	double[][]  covariances  =  covMatDec.getSolver().getVariantes();	  double[][]    covariances    =    covMatDec.getSolver().getVariances();    	non-compiled	[CE]  variable  covariances  is  already  defined  in  constructor  MultivariateNormalDistribution(RandomGenerator,double[],double[][])	5	None	replace
6	[BUG]  [BUGGY]  covMatDec.setDeterminant(covarianceMatEigenvectors);  [CE]  cannot  find  symbol  covarianceMatEigenvectors  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(covarianceMatEigenvectors);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(covarianceMatEigenvectors);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatEigenvectors	18	None	replace
7	[BUG]  [BUGGY]  covMatDec.setDeterminant(covarianceMatDec);  [CE]  cannot  find  symbol  covarianceMatDec  [FE]                  AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(covarianceMatDec);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(covarianceMatDec);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	18	None	replace
8	[BUG]  [BUGGY]  covMatDec.setSamplesInverse(samples);  [CE]  cannot  find  symbol  samples  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setSamplesInverse(samples);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setSamplesInverse(samples);	  covMatDec.setSamplesInverse(samplesInverse);    	non-compiled	[CE]  cannot  find  symbol  samples	22	None	replace
9	[BUG]  [BUGGY]  ((  RealMatrix)covMatDec).getDeterminant(),  factor;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  ((  RealMatrix)covMatDec).getDeterminant(),  factor;  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	((  RealMatrix)covMatDec).getDeterminant(),  factor;	  ((    RealMatrix)covMatDec).getDeterminant();    	non-compiled	[CE]  ';'  expected	21	None	replace
10	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse();    	non-compiled	[CE]  ')'  expected	14	None	replace
11	[BUG]  [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse();    	non-compiled	[CE]  ')'  expected	14	None	replace
12	[BUG]  [BUGGY]  ((  RealMattrix)covMatDec).getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  ((  RealMattrix)covMatDec).getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	((  RealMattrix)covMatDec).getSolver().getInverse();	          covMatDec.getSolver().getInverse();    ((    RealMattrix)covMatDec).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  ((  RealMatrix)covMatDec).getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  ((  RealMatrix)covMatDec).getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	((  RealMatrix)covMatDec).getSolver().getInverse();	          covMatDec.getSolver().getInverse();    ((    RealMatrix)covMatDec).getSolver().getInverse();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
14	[BUG]  [BUGGY]  (covMatDec.getSolver().getInverse());  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  (covMatDec.getSolver().getInverse());  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	(covMatDec.getSolver().getInverse());	          covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse());    	non-compiled	[CE]  not  a  statement	13	None	replace
15	[BUG]  [BUGGY]  covMatDec.setSolver(covMatDec);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setSolver(covMatDec);  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setSolver(covMatDec);	  covMatDec.setSolver(covarianceMatDec);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	add	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	compilable	  [FE]  AssertionError  	8	1	add
17	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	compilable	  [FE]  AssertionError  	8	1	add
18	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  ')'  expected	8	None	add
19	[BUG]  [BUGGY]  covarianceMatDec  =  covMatDec.getSolver().inverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]            AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covarianceMatDec  =  covMatDec.getSolver().inverse();  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covarianceMatDec  =  covMatDec.getSolver().inverse();	  covarianceMatrixInverse    =    covarianceMatDec.getSolver().inverse();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	3	None	replace
20	[BUG]  [BUGGY]  covMatDec.setSolver(covarianceMatrixInverse);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setSolver(covarianceMatrixInverse);  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setSolver(covarianceMatrixInverse);	  covMatDec.setSolver(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
21	[BUG]  [BUGGY]  ((  RealMattrix)covMatDec).getDeterminant();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  ((  RealMattrix)covMatDec).getDeterminant();  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	((  RealMattrix)covMatDec).getDeterminant();	  ((    RealMatrix)covMatDec).getDeterminant();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
22	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  covarianceMatDec  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    covarianceMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  cannot  find  symbol  covarianceMatDec	8	None	add
23	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [CE]  variable  covarianceMatrixInverse  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  variable  covarianceMatrixInverse  might  not  have  been  initialized	9	None	replace
24	[BUG]  [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  else  {  covMatDec.getSolver().getInverse()  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  else  {  covMatDec.getSolver().getInverse()  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec!=  null)  {  covMatDec.getSolver().getInverse();  covMatDec.getSolver().getInverse();  }  else  {  covMatDec.getSolver().getInverse()	          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();    	non-compiled	[CE]  ';'  expected	9	None	replace
25	[BUG]  [BUGGY]  covMatDec.setDeterminant(covarianceMatrix);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(covarianceMatrix);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(covarianceMatrix);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
26	[BUG]  [BUGGY]  covMatDec.setDeterminant(covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(covarianceMatrixDeterminant);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(covarianceMatrixDeterminant);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
27	[BUG]  [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse()  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse()  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse()  }	          covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse();    	non-compiled	[CE]  ')'  expected	14	None	replace
28	[BUG]  [BUGGY]  covMatDec.setDeterminant(tmpMatrix);  [CE]  cannot  find  symbol  tmpMatrix  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(tmpMatrix);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(tmpMatrix);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol  tmpMatrix	18	None	replace
29	[BUG]  [BUGGY]  covMatDec.setDeterminant(sampleMatEigenvectors);  [CE]  cannot  find  symbol  sampleMatEigenvectors  [FE]                  AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setDeterminant(sampleMatEigenvectors);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setDeterminant(sampleMatEigenvectors);	  covMatDec.setDeterminant(factor);    	non-compiled	[CE]  cannot  find  symbol  sampleMatEigenvectors	18	None	replace
30	[BUG]  [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]          covMatDec.getSolver().getInverse();    covMatDec.getSolver().getInverse();  ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	                covMatDec.getSolver().getInverse();        covMatDec.getSolver().getInverse();    ((  RealMatrix)covMatDec).getSolver().getInverse();  covMatDec.getSolver().getInverse();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
31	[BUG]  [BUGGY]  covarianceMatrixInverse  =  covMatDec.getInverse();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covarianceMatrixInverse  =  covMatDec.getInverse();  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covarianceMatrixInverse  =  covMatDec.getInverse();	  covarianceMatrixInverse    =    covMatDec.getSolver();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  covMatDec.setSolver(tmpMatrix);  [CE]  cannot  find  symbol  tmpMatrix  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setSolver(tmpMatrix);  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setSolver(tmpMatrix);	  covMatDec.setSolver(covarianceMatrix);    	non-compiled	[CE]  cannot  find  symbol  tmpMatrix	19	None	replace
33	[BUG]  [BUGGY]  covMatDec.set();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.set();  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.set();	  covMatDec.reset();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse());  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse());  }  [BUGGY]      covarianceMatrixInverse  =  covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	if(covMatDec.getSolver()!=  null)  {  covMatDec.getSolver().getInverse();  (covMatDec.getSolver().getInverse());  }	          covMatDec.getSolver().getInverse();    (covMatDec.getSolver().getInverse());    	non-compiled	[CE]  not  a  statement	13	None	replace
35	[BUG]  [BUGGY]  covMatDec.setSamplesInverse(variances);  [CE]  cannot  find  symbol  variances  [FE]                AssertionError      [CONTEXT]      }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);  final  EigenDecomposition  covMatDec  =  new  EigenDecomposition(covarianceMatrix);        [BUGGY]  covMatDec.setSamplesInverse(variances);  [BUGGY]        covarianceMatrixDeterminant  =  covMatDec.getDeterminant();  final  double[]  covMatEigenvalues  =  covMatDec.getRealEigenvalues();  for  (int  i  =  0;  i  <  covMatEigenvalues.length;  i++)  {  if  (covMatEigenvalues[i]  <  0)  {  throw  new  NonPositiveDefiniteMatrixException(covMatEigenvalues[i],  i,  0);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	125	125	1	replace	covMatDec.setSamplesInverse(variances);	  covMatDec.setSamplesInverse(samplesInverse);    	non-compiled	[CE]  cannot  find  symbol  variances	22	None	replace
