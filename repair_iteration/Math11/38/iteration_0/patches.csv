bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,		non-compiled	[CE]  illegal  start  of  expression	76	None	add
2	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col		non-compiled	[CE]  ')'  expected	76	None	add
3	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri		non-compiled	[CE]  not  a  statement	76	None	add
4	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covariances);  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(dim,  col,  covariances);	}  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
5	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  covariances);  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(rng,  col,  covariances);	}  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
6	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry		non-compiled	[CE]  not  a  statement	76	None	add
7	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM		non-compiled	[CE]  not  a  statement	76	None	add
8	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(		non-compiled	[CE]  illegal  start  of  expression	76	None	add
9	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvalues[row]  }  ;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  return  new  double[][]  {  covMatEigenvalues[row]  }  ;  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvalues[row]  }  ;	}  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
10	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrix);	}  	non-compiled	[CE]  '}'  expected	75	None	replace
11	[BUG]  [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	}  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
12	[BUG]  [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	}  	non-compiled	[CE]  not  a  statement	75	None	replace
13	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }		non-compiled	[CE]  illegal  start  of  expression	76	None	add
14	[BUG]  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]    for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);  [BUGGY]    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	    if(covarianceMatrix!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col		non-compiled	[CE]  ')'  expected	76	None	add
