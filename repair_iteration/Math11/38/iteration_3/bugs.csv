bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(rng,  col,  samplingMatrix);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(rng,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(rng,  col,  samplingMatrix);	  ray[][]    covariances    =    covMatEigenvalues[i]].multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  ';'  expected	38	None	replace
2	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  not  a  statement	14	None	replace
5	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  not  a  statement	27	None	replace
7	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp	  NeighborRealMatrix    <?>)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmp    	non-compiled	[CE]  not  a  statement	29	None	replace
8	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  NeighborRealMatrix    <?>)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	30	None	replace
9	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  NeighborRealMatrix    <?>)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	30	None	replace
10	[BUG]  [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(row,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances.multiplyEntry(row,  col,  samplingMatrix);	  return    new    double[][]    {    covariances.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	20	None	replace
11	[BUG]  [BUGGY]  return  new  double[][]  {  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  tmpMatrix.multiplyEntry(row,  col,  covarianceMatrix);	  return    new    double[][]    {    covariances.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	20	None	replace
12	[BUG]  [BUGGY]  return  new  double[][]  {  covarianceMatrix[row],  mean  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covarianceMatrix[row],  mean  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covarianceMatrix[row],  mean  }  ;	  return    new    double[][]    {    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
13	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);	  return    tmpMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(row,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(row,  col,  covariances);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(row,  col,  covariances);	  return    tmpMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMat.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  not  a  statement	12	None	replace
16	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  samplingMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(tmpMatrix,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	42	None	replace
17	[BUG]  [BUGGY]  nes.add(sampleMatrix);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(sampleMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(sampleMatrix);	  nes.add(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  nes.add(sample);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(sample);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(sample);	  nes.add(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    sampleMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
20	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  not  a  statement	35	None	replace
21	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
22	[BUG]  [BUGGY]  Pentru(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Pentru(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Pentru(int  row  =  0;  row  <  col;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  Pentru(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  '.class'  expected	36	None	replace
23	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	5	None	replace
24	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	10	None	replace
25	[BUG]  [BUGGY]  return  new  double[][]  {  covariance,  mean[row]  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covariance,  mean[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariance,  mean[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
26	[BUG]  [BUGGY]  return  new  double[][]  {  covarianceMatrix,  mean[row]  }  ;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covarianceMatrix,  mean[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covarianceMatrix,  mean[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
27	[BUG]  [BUGGY]  return  tmpMatrix.multiplyEntry(dim,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatrix.multiplyEntry(dim,  col,  covariances);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatrix.multiplyEntry(dim,  col,  covariances);	  return    samplingMatrix.multiplyEntry(dim,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  return  new  double[][]  {  covariances[row],  means  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covariances[row],  means  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances[row],  means  }  ;	  return    new    double[][]    {    covariances[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariance);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariance);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  '}'  expected	19	None	replace
30	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariances);  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariances);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covariances);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  '}'  expected	19	None	replace
31	[BUG]  [BUGGY]  NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  <identifier>  expected	43	None	replace
32	[BUG]  [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  ';'  expected	43	None	replace
33	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(sample,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  tmpMatrix.multiplyEntry(sample,  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(sample,	  tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastM  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry    	non-compiled	[CE]  ';'  expected	45	None	replace
35	[BUG]  [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multi  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multi  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multi	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry    	non-compiled	[CE]  ';'  expected	45	None	replace
36	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samplingMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	9	None	replace
37	[BUG]  [BUGGY]  NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborsVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatri    	non-compiled	[CE]  <identifier>  expected	44	None	replace
38	[BUG]  [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatri    	non-compiled	[CE]  ';'  expected	44	None	replace
39	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multi  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multi  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multi	  for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covariances[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	11	None	replace
40	[BUG]  [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmp	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  ';'  expected	47	None	replace
41	[BUG]  [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  ';'  expected	47	None	replace
42	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);	  double[][]    mean    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
43	[BUG]  [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]);  }  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]);  }	  double[][]    mean    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
44	[BUG]  [BUGGY]  nes.addAll(samples[i],  covariances[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.addAll(samples[i],  covariances[i]);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.addAll(samples[i],  covariances[i]);	  nes.addAll(samples[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
45	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  mean);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  mean);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  mean);	  ray[][]    covariances    =    covMatEigenvalues[i]].multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  ';'  expected	37	None	replace
46	[BUG]  [BUGGY]  return  tmpMatrix.multiplyEntry(rng,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatrix.multiplyEntry(rng,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatrix.multiplyEntry(rng,  col,  samplingMatrix);	  return    covMatEigenvectors.multiplyEntry(rng,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Neighbors.Visible(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  ';'  expected	46	None	replace
48	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix,  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(row,  col,  samplingMatrix,	  tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
49	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);	  tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
50	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);	  return    tmpMatEigenvectors.multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
51	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrix);	  return    tmpMatEigenvectors.multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
52	[BUG]  [BUGGY]  col  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  col  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	col  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,	  col    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
53	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	25	None	replace
54	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(combines[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(combines[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(combines[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	25	None	replace
55	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(rng,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	31	None	replace
56	[BUG]  [BUGGY]  NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry();	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
57	[BUG]  [BUGGY]  NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborSamples  samplingMatrix  =  tmpMatrix.multiplyEntry;	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
58	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  not  a  statement	1	None	replace
59	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
60	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covariances[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	11	None	replace
61	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvalues,  covarianceMatrix[row]  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvalues,  covarianceMatrix[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvalues,  covarianceMatrix[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
62	[BUG]  [BUGGY]  return  new  double[][]  {  mean,  covariances[row]  }  ;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  mean,  covariances[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  mean,  covariances[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
63	[BUG]  [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  <identifier>  expected	46	None	replace
64	[BUG]  [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  <identifier>  expected	46	None	replace
65	[BUG]  [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(varianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(varianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(varianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  <identifier>  expected	43	None	replace
66	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {	  NeighborRealMatrix    <?>)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmp    	non-compiled	[CE]  not  a  statement	29	None	replace
67	[BUG]  [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(rng,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(rng,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances.multiplyEntry(rng,  col,  covarianceMatrix);	  return    new    double[][]    {    covariances.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	20	None	replace
68	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(	  double[][]    covariances    =    covMatEigenvalues[row];    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
69	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  covarianceMatrix);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  covarianceMatrix);	  ray[][]    covariances    =    covMatEigenvalues[i]].multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  ';'  expected	37	None	replace
70	[BUG]  [BUGGY]  AssertionError.show( "MultivariateNormalDistribution  <   "+covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  AssertionError.show( "MultivariateNormalDistribution  <   "+covMatEigenvalues[row]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	AssertionError.show( "MultivariateNormalDistribution  <   "+covMatEigenvalues[row]);	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
71	[BUG]  [BUGGY]  AssertionError.show( "MultivariateNormalDistribution  <   "  +  covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  AssertionError.show( "MultivariateNormalDistribution  <   "  +  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	AssertionError.show( "MultivariateNormalDistribution  <   "  +  covarianceMatrix);	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(null,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  tmpMatrix.multiplyEntry(null,  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(null,	  tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(combine,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(combine,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(combine,  col,  covarianceMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(rng,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	31	None	replace
74	[BUG]  [BUGGY]  nes.add(covMatEigenvalues);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(covMatEigenvalues);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(covMatEigenvalues);	  nes.add(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  nes.add(covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.add(covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(covarianceMatrix);	  nes.add(tmpMatrix);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	7	None	replace
77	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
78	[BUG]  [BUGGY]  return  new  double[][]  {  covarianceMatrix[i]  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covarianceMatrix[i]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covarianceMatrix[i]  }  ;	  return    new    double[][]    {    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
79	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMat.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  not  a  statement	12	None	replace
80	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covarianceMatrix[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  not  a  statement	27	None	replace
83	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);	  return    covMatEigenvectors.multiplyEntry(rng,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
84	[BUG]  [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  covariances  =  FastMath.sqrt(covariances[row]	  double[][]    mean    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  ')'  expected	26	None	replace
85	[BUG]  [BUGGY]  nes.addAll(covMatEigenvalues[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.addAll(covMatEigenvalues[i]);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.addAll(covMatEigenvalues[i]);	  nes.addAll(samples[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
86	[BUG]  [BUGGY]  nes.addAll(covariances[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.addAll(covariances[i]);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.addAll(covariances[i]);	  nes.addAll(samples[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  return  new  double[][]  {  covariances[row],  mean  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covariances[row],  mean  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances[row],  mean  }  ;	  return    new    double[][]    {    covariances[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  not  a  statement	35	None	replace
89	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  ')'  expected	35	None	replace
90	[BUG]  [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatri    	non-compiled	[CE]  <identifier>  expected	44	None	replace
91	[BUG]  [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	VariancesVisible.for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatri    	non-compiled	[CE]  <identifier>  expected	44	None	replace
92	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  samples.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	9	None	replace
93	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <	  NeighborRealMatrix    <?>)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	30	None	replace
94	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(combinedMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  covariances  =  FastMath.sqrt(combinedMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(combinedMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	25	None	replace
95	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
96	[BUG]  [BUGGY]  Pentru(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  Pentru(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Pentru(int  row  =  0;  row  <  v;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	  Pentru(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  '.class'  expected	36	None	replace
97	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	5	None	replace
98	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    row++)    {    factor    =    FastMath.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	5	None	replace
99	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	6	None	replace
100	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  row,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  row,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  row,  col,  samplingMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(tmpMatrix,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	42	None	replace
102	[BUG]  [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[	  double[][]    mean    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
103	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  sampleMatrix.length;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  not  a  statement	1	None	replace
104	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvalues.multiplyEntry(row,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvalues.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvalues.multiplyEntry(row,  col,  samplingMatrix);	  return    new    double[][]    {    covariances.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	20	None	replace
105	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEnt    	non-compiled	[CE]  not  a  statement	27	None	replace
106	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrixDeterminant);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrixDeterminant);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(dim,  col,  covarianceMatrixDeterminant);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    samplingMatrix);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
107	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	7	None	replace
108	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  rng,  covariances);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborTraversal.traverse(compiler,  rng,  covariances);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborTraversal.traverse(compiler,  rng,  covariances);	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
109	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  rng,  covarianceMatrix);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  NeighborTraversal.traverse(compiler,  rng,  covarianceMatrix);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborTraversal.traverse(compiler,  rng,  covarianceMatrix);	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
110	[BUG]  [BUGGY]  nes.addAll(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  nes.addAll(covMatEigenvalues[row]);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.addAll(covMatEigenvalues[row]);	  nes.addAll(samples[i]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
111	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	9	None	replace
112	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  sampleMatrix;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	9	None	replace
113	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[row]].multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[row]].multiplyEntry(tmpMatrix,  col,  samplingMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[row]].multiplyEntry(tmpMatrix,  col,  samplingMatrix);	  ray[][]    covariances    =    covMatEigenvalues[i]].multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  ';'  expected	37	None	replace
114	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrixDeterminant);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrixDeterminant);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrixDeterminant);	  ray[][]    covariances    =    covMatEigenvalues[i]].multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  ';'  expected	37	None	replace
115	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  not  a  statement	23	None	replace
116	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvalues[row],  covarianceMatrix[row]  }  ;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvalues[row],  covarianceMatrix[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvalues[row],  covarianceMatrix[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  return  new  double[][]  {  0,  covariances[row]  }  ;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  0,  covariances[row]  }  ;  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  0,  covariances[row]  }  ;	  return    new    double[][]    {    mean,    covarianceMatrix[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(samples[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
119	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri	  for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMat.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  not  a  statement	12	None	replace
120	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  v;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	  for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	10	None	replace
121	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM	  if(samplesVisible)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatri    	non-compiled	[CE]  not  a  statement	44	None	replace
122	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(matrix,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(matrix,  col,  covarianceMatrix);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(matrix,  col,  covarianceMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(rng,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	31	None	replace
123	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrixDeterminant);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  covarianceMatrixDeterminant);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    samplingMatrix);    	non-compiled	[CE]  '}'  expected	19	None	replace
124	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);      [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covariances);  [BUGGY]        [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(dim,  col,  covariances);	  return    tmpMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
