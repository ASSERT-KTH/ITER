bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  tmpMatrix.multiplyEntry(  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(rng,  col,  samplingMatrix);	  return    covMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(rng,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(rng,  col,  covariances);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(rng,  col,  covariances);	  return    covMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry(row,  col	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	14	None	replace
6	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ')'  expected	14	None	replace
7	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	6	None	replace
8	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	6	None	replace
9	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	7	None	replace
10	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  not  a  statement	7	None	replace
11	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covariances[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	12	None	replace
12	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMat.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	12	None	replace
13	[BUG]  [BUGGY]  return  new  double[][]  {  covariances[row]  }  ;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covariances[row]  }  ;  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances[row]  }  ;	  return    new    double[][]    {    covMatEigenvalues[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(samples[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  covMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  return  samplingMatrix.multiplyEntry(dim,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  samplingMatrix.multiplyEntry(dim,  col,  covariances);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  samplingMatrix.multiplyEntry(dim,  col,  covariances);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  nes.add(tmpMatrix);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  nes.add(tmpMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.add(tmpMatrix);	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  nes.addAll(samples[i]);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  nes.addAll(samples[i]);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	nes.addAll(samples[i]);	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [CE]  '}'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(row,  col,  samplingMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	10	None	replace
20	[BUG]  [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(row,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covariances.multiplyEntry(row,  col,  covarianceMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covariances.multiplyEntry(row,  col,  covarianceMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	10	None	replace
21	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  For(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  For(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	For(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
23	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatri    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if(samples!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samples!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samples!=  null)  {  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	12	None	replace
26	[BUG]  [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  mean  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  not  a  statement	1	None	replace
28	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  sampleMatrix);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  sampleMatrix);  }  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  sampleMatrix);  }	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmp  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmp  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmp	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  not  a  statement	14	None	replace
30	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	NeighborRealMatrix  <?>)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpM	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  not  a  statement	14	None	replace
31	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(rng,  col,  covarianceMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	10	None	replace
32	[BUG]  [BUGGY]  return  new  double[][]  {  covarianceMatrix[row]  }  ;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covarianceMatrix[row]  }  ;  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covarianceMatrix[row]  }  ;	  return    new    double[][]    {    covMatEigenvalues[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  return  covMatEigenvectors.multiplyEntry(row,  col,  covariances);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  covMatEigenvectors.multiplyEntry(row,  col,  covariances);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  covMatEigenvectors.multiplyEntry(row,  col,  covariances);	  return    covMatEigenvectors.multiplyEntry(rng,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpM    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samples[i])  {  for(int  row  =  0;  row  <  dim;  row++)  {  double[][]  covariances  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEnt	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    double[][]    covariances    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	12	None	replace
36	[BUG]  [BUGGY]  Pentru(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  Pentru(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	Pentru(int  row  =  0;  row  <  dim;  row++)  {  tmpMatrix.multiplyEntry(row,  col,  samplingMatrix);  }	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
37	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrix);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(row,  col,  samplingMatrix);	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
38	[BUG]  [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(dim,  col,  samplingMatrix);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(dim,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	ray[][]  covariances  =  covMatEigenvalues[i]].multiplyEntry(dim,  col,  samplingMatrix);	  if(samples[i])    {    for(int    row    =    0;    row    <    dim;    row++)    {    tmpMatrix.multiplyEntry(row,    col,    samplingMatrix);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  return  new  double[][]  {  mean,  covarianceMatrix[row]  }  ;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  mean,  covarianceMatrix[row]  }  ;  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  mean,  covarianceMatrix[row]  }  ;	  return    new    double[][]    {    covMatEigenvalues[row]    }    ;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  col  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  col  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	col  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(row,  col,	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  tmpMatrix.multiplyEntry(row,  col,  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	tmpMatrix.multiplyEntry(row,  col,	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col,    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  covarianceMatrix);  [CE]  '}'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  covarianceMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  new  double[][]  {  covMatEigenvectors.multiplyEntry(tmpMatrix,  col,  covarianceMatrix);	  return    new    double[][]    {    covMatEigenvectors.multiplyEntry(row,    col,    covarianceMatrix);    	non-compiled	[CE]  '}'  expected	10	None	replace
43	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpM	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry    	non-compiled	[CE]  not  a  statement	6	None	replace
44	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  dim;  col++)  {  tmpMatri	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  not  a  statement	14	None	replace
45	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  row++)  {  factor  =  FastMath.multiplyEntry	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    dim;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  ';'  expected	14	None	replace
46	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatri	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  not  a  statement	2	None	replace
47	[BUG]  [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	if(samplesVisible)  {  for(int  row  =  0;  row  <  dim;  row++)  {  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(row,    col    	non-compiled	[CE]  not  a  statement	2	None	replace
48	[BUG]  [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  return  tmpMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);  [BUGGY]      [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	return  tmpMatEigenvectors.multiplyEntry(dim,  col,  samplingMatrix);	  return    covMatEigenvectors.multiplyEntry(dim,    col,    covariances);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  row  =  0;  row  <  dim;  row++)  {  final  double  factor  =  FastMath.sqrt(covMatEigenvalues[row]);  for  (int  col  =  0;  col  <  dim;  col++)  {  tmpMatrix.multiplyEntry(row,  col,  factor);  }  }  samplingMatrix  =  covMatEigenvectors.multiply(tmpMatrix);    [BUGGY]  double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	156	156	1	replace	double[][]  covariances  =  covMatEigenvalues[row];  for(int  col  =  0;  col  <  col;  col++)  {  tmpMatrix.multiplyEntry(	      if(covarianceMatrix!=    null)    {    for(int    row    =    0;    row    <    dim;    row++)    {    factor    =    FastMath.sqrt(covMatEigenvalues[row]);    for(int    col    =    0;    col    <    col;    col++)    {    tmpMatrix.multiplyEntry(    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
