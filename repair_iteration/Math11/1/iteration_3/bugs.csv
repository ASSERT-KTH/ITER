bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  getDimension()  +  1;	  int    dim    =    getDimension();    	compilable	  [FE]  DimensionMismatchException  	22	2	replace
2	[BUG]  [BUGGY]  int  dim  =  getDimension()  +  1;  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDimension()  +  1;	  int    dim    =    getDimension();    	compilable	  [FE]  DimensionMismatchException  	22	2	replace
3	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  *  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  getDimension()  *  vals.length;	  int    dim    =    getDimension();    	compilable	  [FE]  DimensionMismatchException  	22	2	replace
4	[BUG]  [BUGGY]  int  dim  =  getDimension()  *  vals.length;  [FE]  DimensionMismatchException  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  *  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDimension()  *  vals.length;	  int    dim    =    getDimension();    	compilable	  [FE]  DimensionMismatchException  	22	2	replace
5	[BUG]  [BUGGY]  double  dim  =  getDimension()  /  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  dim  =  getDimension()  /  1;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  /  1;	  double    dim    =    getDimension()    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	28	None	replace
6	[BUG]  [BUGGY]  int  dim  =  vals.length;  int  dim  =  vals.length;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length;  int  dim  =  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    vals.length;    int  dim  =  vals.length;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	6	None	add
7	[BUG]  [BUGGY]  int  dim  =  vals.length;  int  vals  =  vals.length;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length;  int  vals  =  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    vals.length;    int  vals  =  vals.length;	  	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	6	None	add
8	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  /  vals;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension()  /  vals;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  /  vals;	  final    double    dim    =    getDimension()    *    vals;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	10	None	replace
9	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  *  vals.length;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension()  *  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  *  vals.length;	  final    double    dim    =    getDimension()    *    vals;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	10	None	replace
10	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  *  2;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension()  *  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  *  2;	  final    double    dim    =    getDimension()    /    2;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	9	None	replace
11	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminant();	  double[]    covarianceMatrixDeterminant    =    getCovarianceMatrixInverse();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
12	[BUG]  [BUGGY]  double  vals  =  getDimension()  *  vals.length  +  1;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  vals  =  getDimension()  *  vals.length  +  1;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  vals  =  getDimension()  *  vals.length  +  1;	  double    vals    =    getDimension()    *    vals.length;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	19	None	replace
13	[BUG]  [BUGGY]  int  dim  =  getDimension();  int  dim  =  getDimension();  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension();  int  dim  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    getDimension();    int  dim  =  getDimension();	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	21	None	add
14	[BUG]  [BUGGY]  int  dim  =  getDimension();  Int  dim  =  getDimension();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension();  Int  dim  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    getDimension();    Int  dim  =  getDimension();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
15	[BUG]  [BUGGY]  double  dim  =  getDimension()  *  2;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  dim  =  getDimension()  *  2;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  *  2;	  double    dim    =    getDimension()    /    2;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	13	None	replace
16	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  1;  final  int  dim  =  getDimension()  *  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  *  1;  final  int  dim  =  getDimension()  *  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    *    1;    final  int  dim  =  getDimension()  *  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	24	None	add
17	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  1;  int  dim  =  getDimension()  *  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  *  1;  int  dim  =  getDimension()  *  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    *    1;    int  dim  =  getDimension()  *  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	24	None	add
18	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  1;  final  int  dim  =  getDimension()  *  2;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]        AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  *  1;  final  int  dim  =  getDimension()  *  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    *    1;    final  int  dim  =  getDimension()  *  2;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	24	None	add
19	[BUG]  [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length  +  1]);  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length  +  1]);  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  vals  =(double[])values.toArray(new  double[vals.length  +  1]);	  double[]    vals    =(double[])values.toArray(new    double[vals.length]);    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	8	None	replace
20	[BUG]  [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length  -  1]);  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]                    AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length  -  1]);  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  vals  =(double[])values.toArray(new  double[vals.length  -  1]);	  double[]    vals    =(double[])values.toArray(new    double[vals.length]);    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	8	None	replace
21	[BUG]  [BUGGY]  Double[]  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  Double[]  vals  =  getDimension();  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	Double[]  vals  =  getDimension();	  double[]    vals    =    getDimension()    +    1;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	32	None	replace
22	[BUG]  [BUGGY]  final  double  dim  =  getDimension();  final  int  dimension  =  getDimension();  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension();  final  int  dimension  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension();  final  int  dimension  =  getDimension();	  final    int    dim    =    getDimension()    +    1;    final    int    dimension    =    getDimension()    +    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	20	None	replace
23	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    /    1;    final  int  dim  =  getDimension()  /  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	14	None	add
24	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  int  dim  =  getDimension()  /  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  1;  int  dim  =  getDimension()  /  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    /    1;    int  dim  =  getDimension()  /  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	14	None	add
25	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  2;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]        AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    /    1;    final  int  dim  =  getDimension()  /  2;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	14	None	add
26	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  *  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  *  2;	  final    int    dim    =    getDimension()    *    1;    	compilable	  [FE]  DimensionMismatchException  	25	2	replace
27	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  2;  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  *  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  *  2;	  final    int    dim    =    getDimension()    *    1;    	compilable	  [FE]  DimensionMismatchException  	25	2	replace
28	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  *  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension()  *  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  *  1;	  final    double    dim    =    getDimension()    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	29	None	replace
29	[BUG]  [BUGGY]  int  dim  =  getDim()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDim()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDim()  +  1;	  int    dim    =    getDim();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
30	[BUG]  [BUGGY]  int  dim  =  getDim()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDim()  -  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDim()  -  1;	  int    dim    =    getDim();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
31	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length  -  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  vals.length  -  1;	  int    dim    =    vals.length;    	compilable	  [FE]  DimensionMismatchException  	7	2	replace
32	[BUG]  [BUGGY]  int  dim  =  vals.length  -  1;  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length  -  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  vals.length  -  1;	  int    dim    =    vals.length;    	compilable	  [FE]  DimensionMismatchException  	7	2	replace
33	[BUG]  [BUGGY]  double  dim  =  vals.length;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]      AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  dim  =  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  vals.length;	  int    dim    =    vals.length;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	7	None	replace
34	[BUG]  [BUGGY]  Double  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  Double  vals  =  getDimension();  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	Double  vals  =  getDimension();	  double    vals    =    getDimension()    +    1;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	18	None	replace
35	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length  -  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  vals.length  -  2;	  int    dim    =    vals.length;    	compilable	  [FE]  DimensionMismatchException  	7	2	replace
36	[BUG]  [BUGGY]  int  dim  =  vals.length  -  2;  [FE]  DimensionMismatchException  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length  -  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  vals.length  -  2;	  int    dim    =    vals.length;    	compilable	  [FE]  DimensionMismatchException  	7	2	replace
37	[BUG]  [BUGGY]  Double  dim  =  getDimension();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  Double  dim  =  getDimension();  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	Double  dim  =  getDimension();	  double    dim    =    getDimension()    +    1;    	non-compiled	[CE]  incompatible  types	12	None	replace
38	[BUG]  [BUGGY]  final  double[]  vals  =  getVisibleDimension().density;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]              AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double[]  vals  =  getVisibleDimension().density;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double[]  vals  =  getVisibleDimension().density;	  final    double[]    vals    =    getVisibleDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	3	None	replace
39	[BUG]  [BUGGY]  int  dim  =  getDim()  +  vals.length;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDim()  +  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDim()  +  vals.length;	  int    dim    =    getDim();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
40	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dimension  =  getDimension()  /  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dimension  =  getDimension()  /  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    /    1;    final  int  dimension  =  getDimension()  /  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	14	None	add
41	[BUG]  [BUGGY]  int  dim  =  getDimension();  int  dimension  =  getDimension();  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension();  int  dimension  =  getDimension();  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    getDimension();    int  dimension  =  getDimension();	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	21	None	add
42	[BUG]  [BUGGY]  double  dim  =  getDimension()  *  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]            AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  dim  =  getDimension()  *  1;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  *  1;	  double    dim    =    getDimension()    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	28	None	replace
43	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  /  2;	  final    int    dim    =    getDimension()    +    1;    final    int    dim    =    getDimension()    +    2;    	compilable	  [FE]  DimensionMismatchException  	27	2	replace
44	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  2;  [FE]  DimensionMismatchException  [FE]        DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  2;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  /  2;	  final    int    dim    =    getDimension()    +    1;    final    int    dim    =    getDimension()    +    2;    	compilable	  [FE]  DimensionMismatchException  	27	2	replace
45	[BUG]  [BUGGY]  double[]  vals  =(double[])this.values.toArray(new  double[vals.length]);  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]                  AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double[]  vals  =(double[])this.values.toArray(new  double[vals.length]);  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  vals  =(double[])this.values.toArray(new  double[vals.length]);	  double[]    vals    =(double[])values.toArray(new    double[vals.length]);    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	8	None	replace
46	[BUG]  [BUGGY]  double  vals  =  getDimension()  /  vals.length;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]                AssertionError      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  double  vals  =  getDimension()  /  vals.length;  [BUGGY]      final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  vals  =  getDimension()  /  vals.length;	  double    vals    =    getDimension()    *    vals.length;    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	19	None	replace
47	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  -  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  getDimension()  -  1;	  final    int    dim    =    getDimension()    -    1;    int    dim    =    getDimension()    -    1;    	compilable	  [FE]  DimensionMismatchException  	2	2	replace
48	[BUG]  [BUGGY]  int  dim  =  getDimension()  -  1;  [FE]  DimensionMismatchException  [FE]          DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  getDimension()  -  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDimension()  -  1;	  final    int    dim    =    getDimension()    -    1;    int    dim    =    getDimension()    -    1;    	compilable	  [FE]  DimensionMismatchException  	2	2	replace
49	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  3;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  int  dim  =  getDimension()  /  1;  final  int  dim  =  getDimension()  /  3;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    /    1;    final  int  dim  =  getDimension()  /  3;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	14	None	add
50	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  +  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        DimensionMismatchException      [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  final  double  dim  =  getDimension()  +  1;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  +  1;	  final    int    dim    =    getDimension()    +    1;    final    int    dim    =    getDimension()    +    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	16	None	replace
51	[BUG]  [BUGGY]  int  dim  =  vals.length;  Int  dim  =  vals.length;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {      [BUGGY]  int  dim  =  vals.length;  Int  dim  =  vals.length;  [BUGGY]      if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int    dim    =    vals.length;    Int  dim  =  vals.length;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
