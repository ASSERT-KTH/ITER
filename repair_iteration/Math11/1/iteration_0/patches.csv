bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  +  1;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  +  1;	final  int  dim  =  getDimension();  	compilable	  [FE]  DimensionMismatchException  	1	2	replace
2	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  +  1;  [FE]  DimensionMismatchException  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  +  1;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  +  1;	final  int  dim  =  getDimension();  	compilable	  [FE]  DimensionMismatchException  	1	2	replace
3	[BUG]  [BUGGY]  final  double  dim  =  getDimension();  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  double  dim  =  getDimension();  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension();	final  int  dim  =  getDimension();  	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	1	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  dim  [FE]        AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	  	final  int  dim  =  getDimension();  	non-compiled	[CE]  cannot  find  symbol  dim	1	None	replace
5	[BUG]  [BUGGY]    double[]  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double[]  vals  =  getDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double[]  vals  =  getDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	2	None	add
6	[BUG]  [BUGGY]    double[]  vals  =  getVisibleDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double[]  vals  =  getVisibleDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double[]  vals  =  getVisibleDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	2	None	add
7	[BUG]  [BUGGY]    double[]  vals  =  getVisibility();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]        AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double[]  vals  =  getVisibility();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double[]  vals  =  getVisibility();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	2	None	add
8	[BUG]  [BUGGY]    double  dim  =  getDimension();  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double  dim  =  getDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double  dim  =  getDimension();		non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	2	None	add
9	[BUG]  [BUGGY]    double  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double  vals  =  getDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double  vals  =  getDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	2	None	add
10	[BUG]  [BUGGY]  [FE]  DimensionMismatchException  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  -  1;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  -  1;	final  int  dim  =  getDimension();  	compilable	  [FE]  DimensionMismatchException  	1	2	replace
11	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  -  1;  [FE]  DimensionMismatchException  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]  final  int  dim  =  getDimension()  -  1;  [BUGGY]  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  -  1;	final  int  dim  =  getDimension();  	compilable	  [FE]  DimensionMismatchException  	1	2	replace
12	[BUG]  [BUGGY]    double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminants();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminants();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixDeterminants();		non-compiled	[CE]  cannot  find  symbol	2	None	add
13	[BUG]  [BUGGY]    final  double[]  vals  =  getDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]      AssertionError  [CONTEXT]  public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {  [BUGGY]    final  double[]  vals  =  getDimension();  [BUGGY]  final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	    final  double[]  vals  =  getDimension();		non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	2	None	add
