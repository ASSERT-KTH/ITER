bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dim  =  getDimension()  -  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dim  =  getDimension()  -  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    -    1;    final  int  dim  =  getDimension()  -  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	10	None	add
2	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  -  1;  int  dim  =  getDimension()  -  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]      DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  -  1;  int  dim  =  getDimension()  -  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    -    1;    int  dim  =  getDimension()  -  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	10	None	add
3	[BUG]  [BUGGY]  final  double[]  vals  =  getVisibleDimension();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double[]  vals  =  getVisibleDimension();  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double[]  vals  =  getVisibleDimension();	      double[]    vals    =    getVisibleDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	6	None	replace
4	[BUG]  [BUGGY]  final  double[]  vals  =  getDimension()  +  1;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double[]  vals  =  getDimension()  +  1;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double[]  vals  =  getDimension()  +  1;	      final    double[]    vals    =    getDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	13	None	replace
5	[BUG]  [BUGGY]  double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  covarianceMatrixDeterminant  =  getCovarianceMatrixInverse();	      double[]    covarianceMatrixDeterminant    =    getCovarianceMatrixDeterminants();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  int  dim  =  vals.length;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  vals.length;	      	compilable	  [FE]  AssertionError  	4	1	replace
7	[BUG]  [BUGGY]  int  dim  =  vals.length;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  int  dim  =  vals.length;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  vals.length;	      	compilable	  [FE]  AssertionError  	4	1	replace
8	[BUG]  [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length]);  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]              AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double[]  vals  =(double[])values.toArray(new  double[vals.length]);  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  vals  =(double[])values.toArray(new  double[vals.length]);	      	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	4	None	replace
9	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  /  2;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double  dim  =  getDimension()  /  2;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  /  2;	  final    double    dim    =    getDimension();    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	3	None	replace
10	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  *  vals;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double  dim  =  getDimension()  *  vals;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  *  vals;	  final    double    dim    =    getDimension();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
11	[BUG]  [BUGGY]  final  double[]  vals  =  getVisibility();  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double[]  vals  =  getVisibility();  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double[]  vals  =  getVisibility();	      double[]    vals    =    getVisibility();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	7	None	replace
12	[BUG]  [BUGGY]  double  dim  =  getDimension()  +  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double  dim  =  getDimension()  +  1;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  +  1;	      double    dim    =    getDimension();    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	8	None	replace
13	[BUG]  [BUGGY]  double  dim  =  getDimension()  /  2;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double  dim  =  getDimension()  /  2;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  /  2;	      double    dim    =    getDimension();    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	8	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  /  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  /  1;	  final    int    dim    =    getDimension()    +    1;    	compilable	  [FE]  AssertionError  	2	1	replace
15	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  /  1;  [FE]  AssertionError  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  /  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  /  1;	  final    int    dim    =    getDimension()    +    1;    	compilable	  [FE]  AssertionError  	2	1	replace
16	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dim  =  getDimension()  +  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dim  =  getDimension()  +  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    +    1;    final  int  dim  =  getDimension()  +  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	1	None	add
17	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  +  1;  int  dim  =  getDimension()  +  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]      DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  +  1;  int  dim  =  getDimension()  +  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    +    1;    int  dim  =  getDimension()  +  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	1	None	add
18	[BUG]  [BUGGY]  double  vals  =  getDimension()  +  1;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double  vals  =  getDimension()  +  1;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  vals  =  getDimension()  +  1;	      double    vals    =    getDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	9	None	replace
19	[BUG]  [BUGGY]  double  vals  =  getDimension()  *  vals.length;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double  vals  =  getDimension()  *  vals.length;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  vals  =  getDimension()  *  vals.length;	      double    vals    =    getDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	9	None	replace
20	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dimension  =  getDimension()  +  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dimension  =  getDimension()  +  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    +    1;    final  int  dimension  =  getDimension()  +  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	1	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  int  dim  =  getDimension();  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	int  dim  =  getDimension();	      	compilable	  [FE]  AssertionError  	4	1	replace
22	[BUG]  [BUGGY]  int  dim  =  getDimension();  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  int  dim  =  getDimension();  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDimension();	      	compilable	  [FE]  AssertionError  	4	1	replace
23	[BUG]  [BUGGY]  final  double[]  vals  =  getDimension().density;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double[]  vals  =  getDimension().density;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double[]  vals  =  getDimension().density;	      final    double[]    vals    =    getDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	13	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  *  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	add	final  int  dim  =  getDimension()  *  1;	  final    int    dim    =    getDimension()    -    1;    	compilable	  [FE]  AssertionError  	11	1	replace
25	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  *  1;  [FE]  AssertionError  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  *  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  int  dim  =  getDimension()  *  1;	  final    int    dim    =    getDimension()    -    1;    	compilable	  [FE]  AssertionError  	11	1	replace
26	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dimension  =  getDimension()  -  1;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dimension  =  getDimension()  -  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    -    1;    final  int  dimension  =  getDimension()  -  1;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	10	None	add
27	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dim  =  getDimension()  +  2;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  +  1;  final  int  dim  =  getDimension()  +  2;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    +    1;    final  int  dim  =  getDimension()  +  2;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	1	None	add
28	[BUG]  [BUGGY]  double  dim  =  getDimension()  -  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]        AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double  dim  =  getDimension()  -  1;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double  dim  =  getDimension()  -  1;	      double    dim    =    getDimension();    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	8	None	replace
29	[BUG]  [BUGGY]  final  double  dim  =  getDimension()  -  1;  [CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)  [FE]          AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  double  dim  =  getDimension()  -  1;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final  double  dim  =  getDimension()  -  1;	  final    double    dim    =    getDimension();    	non-compiled	[CE]  no  suitable  constructor  found  for  DimensionMismatchException(int,double)	3	None	replace
30	[BUG]  [BUGGY]  int  dim  =  getDim();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  int  dim  =  getDim();  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	int  dim  =  getDim();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dim  =  getDimension()  -  2;  [CE]  variable  dim  is  already  defined  in  method  density(double[])  [FE]    DimensionMismatchException    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  final  int  dim  =  getDimension()  -  1;  final  int  dim  =  getDimension()  -  2;  [BUGGY]    if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	final    int    dim    =    getDimension()    -    1;    final  int  dim  =  getDimension()  -  2;	  	non-compiled	[CE]  variable  dim  is  already  defined  in  method  density(double[])	10	None	add
32	[BUG]  [BUGGY]  double[]  vals  =  getDimension()  +  1;  [CE]  variable  vals  is  already  defined  in  method  density(double[])  [FE]        AssertionError    [CONTEXT]    public  double  density(final  double[]  vals)  throws  DimensionMismatchException  {    [BUGGY]  double[]  vals  =  getDimension()  +  1;  [BUGGY]    final  int  dim  =  getDimension();  if  (vals.length  !=  dim)  {  throw  new  DimensionMismatchException(vals.length,  dim);  }  return  FastMath.pow(2  *  FastMath.PI,  -dim  /  2)  *  FastMath.pow(covarianceMatrixDeterminant,  -0.5)  *  getExponentTerm(vals);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  density  [RETURN_TYPE]  double  final  double[]  vals  [VARIABLES]  boolean  double[]  covMatEigenvalues  evec  means  vals  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  int  dim  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	178	178	1	replace	double[]  vals  =  getDimension()  +  1;	      double[]    vals    =    getDimension();    	non-compiled	[CE]  variable  vals  is  already  defined  in  method  density(double[])	5	None	replace
