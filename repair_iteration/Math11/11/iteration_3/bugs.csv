bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  std  =  getMeans().toArray(sum);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double[]  std  =  getMeans().toArray(sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double[]  std  =  getMeans().toArray(sum);	  return    FastMath.exp(-0.5    *    sum    +    1);    double[]    std    =    getMeans().toArray(sum);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
2	[BUG]  [BUGGY]  double  centered  =  getMeans();  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  centered  =  getMeans();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  centered  =  getMeans();	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    centered    =    getMeans();    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	35	None	replace
3	[BUG]  [BUGGY]  Double  centered  =  getMeans();  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  Double  centered  =  getMeans();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	Double  centered  =  getMeans();	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    centered    =    getMeans();    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	35	None	replace
4	[BUG]  [BUGGY]  while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
5	[BUG]  [BUGGY]  while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
6	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  centered.length);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  centered.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    preMultiplied.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	38	None	replace
7	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied[i]);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied[i]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied[i]);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    preMultiplied.length);    	non-compiled	[CE]  cannot  find  symbol  i	38	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }	  for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    -    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	37	None	replace
9	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  sum);  [CE]  no  suitable  method  found  for  exp(double,int,double)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied.length,  sum);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,double)	24	None	replace
10	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length  -  1);  [CE]  no  suitable  method  found  for  exp(double,int)  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length  -  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied.length  -  1);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int)	24	None	replace
11	[BUG]  [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length);    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
12	[BUG]  [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length);    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
13	[BUG]  [BUGGY]  while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  <  =  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
14	[BUG]  [BUGGY]  while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length!=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
15	[BUG]  [BUGGY]  double[]  std  =  getStd();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double[]  std  =  getStd();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double[]  std  =  getStd();	  return    FastMath.exp(-0.5    *    sum    +    1);    double[]    std    =    getStd();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
16	[BUG]  [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length,    sum);    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
17	[BUG]  [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	centered[i]  =  Math.max(-0.5  *  sum  +  preMultiplied.length,  sum);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length,    sum);    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	  for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    values[i];    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
19	[BUG]  [BUGGY]  while(values.length  >  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
20	[BUG]  [BUGGY]  while(values.length  <  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  <  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  <  1)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
21	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  centered);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  centered);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  centered);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
22	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixDeterminant);  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixDeterminant);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixDeterminant);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }	  if(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
24	[BUG]  [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
25	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  std  +  1);  [CE]  cannot  find  symbol  std  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  std  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  std  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    if(sum    >    0)    {    for(final    double[]    std    :    values)    {    sum    +=    std;    }    	non-compiled	[CE]  cannot  find  symbol  std	44	None	replace
26	[BUG]  [BUGGY]  double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    v    =    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  missing  return  statement	54	None	replace
27	[BUG]  [BUGGY]  double  v  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  v  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  v  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    v    =    FastMath.exp(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  missing  return  statement	54	None	replace
28	[BUG]  [BUGGY]  sum  +=  values[i]  *  centered[i];  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  sum  +=  values[i]  *  centered[i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	sum  +=  values[i]  *  centered[i];	  if(sum    >    0.0)    {    sum    +=    values[i]    *    centered[i];    }    else    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	5	None	replace
29	[BUG]  [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  sum  +=  values[i]  *  preMultiplied[i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	sum  +=  values[i]  *  preMultiplied[i];	  if(sum    >    0.0)    {    sum    +=    values[i]    *    centered[i];    }    else    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	5	None	replace
30	[BUG]  [BUGGY]  while(values.length  >  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
31	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied  +  1);	  return    FastMath.exp(-0.5    *    preMultiplied    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	47	None	replace
32	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied,  centered);  [CE]  no  suitable  method  found  for  exp(double,double[],double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied,  centered);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied,  centered);	  return    FastMath.exp(-0.5    *    sum,    centered);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[],double[])	41	None	replace
33	[BUG]  [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }	  for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
35	[BUG]  [BUGGY]  double[]  std  =  getMeans();  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double[]  std  =  getMeans();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double[]  std  =  getMeans();	  return    FastMath.exp(-0.5    *    sum    +    1);    double[]    std    =    getMeans();    	non-compiled	[CE]  missing  return  statement	51	None	replace
36	[BUG]  [BUGGY]  final  FastMath.exp(-0.5  *  sum  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  final  FastMath.exp(-0.5  *  sum  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	final  FastMath.exp(-0.5  *  sum  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    final    FastMath.exp(-0.5    *    sum    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  if(sum  <  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  if(sum  <  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(sum  <  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }	  return    FastMath.exp(-0.5    *    sum    +    1);    final    FastMath.exp(-0.5    *    sum    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  /  sum  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-1.0  /  sum  +  1);	  return    FastMath.exp(-1.0    *    sum    +    1);    	compilable	  [FE]  AssertionError  	27	2	replace
39	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  /  sum  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  /  sum  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-1.0  /  sum  +  1);	  return    FastMath.exp(-1.0    *    sum    +    1);    	compilable	  [FE]  AssertionError  	27	2	replace
40	[BUG]  [BUGGY]  double  evec  =  getMeans().length;  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  evec  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  evec  =  getMeans().length;	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    evec    =    getMeans().length;    	non-compiled	[CE]  missing  return  statement	56	None	replace
41	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values.length,  centered.length);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values.length,  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  values.length,  centered.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    values.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	48	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  missing  return  statement	13	None	replace
43	[BUG]  [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  >  expected	53	None	replace
44	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  final  int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	final  int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  >  expected	53	None	replace
45	[BUG]  [BUGGY]  double  centered  =  getMeans().length;  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  centered  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  centered  =  getMeans().length;	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    centered    =    getMeans().length;    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	34	None	replace
46	[BUG]  [BUGGY]  Double  centered  =  getMeans().length;  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  Double  centered  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	Double  centered  =  getMeans().length;	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    centered    =    getMeans().length;    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	34	None	replace
47	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied.length);  [CE]  no  suitable  method  found  for  exp(double,double[],int)  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    sum,    preMultiplied.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[],int)	25	None	replace
48	[BUG]  [BUGGY]  double[]  std  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double[]  std  =  values.toArray(new  double[values.length]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double[]  std  =  values.toArray(new  double[values.length]);	  return    FastMath.exp(-0.5    *    sum    +    1);    double[]    std    =    values.toArray(new    double[values.length]);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
49	[BUG]  [BUGGY]  while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
50	[BUG]  [BUGGY]  while(values.length  ==  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  ==  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  ==  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
51	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  final  FastMath.exp(-1.0  *  sum  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  final  FastMath.exp(-1.0  *  sum  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    final  FastMath.exp(-1.0  *  sum  +  1);	  	non-compiled	[CE]  <identifier>  expected	26	None	add
52	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  preMultiplied  =  getMeans()  [i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  preMultiplied  =  getMeans()  [i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    double[]  preMultiplied  =  getMeans()  [i];	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	add
53	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  preMultiplied  =  getMeans();  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  preMultiplied  =  getMeans();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    double[]  preMultiplied  =  getMeans();	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	26	None	add
54	[BUG]  [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	  if(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    values[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
55	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[0]);  [CE]  no  suitable  method  found  for  exp(double,double)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[0]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[0]);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i]);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double)	22	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-0.5  *  sum  /  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    /    centered.length);    	compilable	  [FE]  AssertionError  	31	2	replace
57	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  preMultiplied.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  /  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    /    centered.length);    	compilable	  [FE]  AssertionError  	31	2	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  values.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-0.5  *  sum  /  values.length);	  return    FastMath.exp(-0.5    *    sum    /    centered.length);    	compilable	  [FE]  AssertionError  	31	2	replace
59	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  values.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  values.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  /  values.length);	  return    FastMath.exp(-0.5    *    sum    /    centered.length);    	compilable	  [FE]  AssertionError  	31	2	replace
60	[BUG]  [BUGGY]  while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length!=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
61	[BUG]  [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  preMultiplied[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  preMultiplied[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  preMultiplied[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
62	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied,  values);  [CE]  no  suitable  method  found  for  exp(double,double[],double[])  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied,  values);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied,  values);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[],double[])	40	None	replace
63	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied);  [CE]  no  suitable  method  found  for  exp(double,double[],double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered,  preMultiplied);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[],double[])	40	None	replace
64	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.exp(-0.5  *  sum  /  centered.length);  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.exp(-0.5  *  sum  /  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    centered[i]  =  Math.exp(-0.5  *  sum  /  centered.length);	  	non-compiled	[CE]  cannot  find  symbol  i	30	None	add
65	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  /  centered.length);  [CE]  cannot  find  symbol  i  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  /  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    centered[i]  =  Math.max(-0.5  *  sum  /  centered.length);	  	non-compiled	[CE]  cannot  find  symbol  i	30	None	add
66	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.exp(-0.5  *  sum  /  std);  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  centered[i]  =  Math.exp(-0.5  *  sum  /  std);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    centered[i]  =  Math.exp(-0.5  *  sum  /  std);	  	non-compiled	[CE]  cannot  find  symbol  i	30	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    evec    =    getMeans().length;    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	55	2	replace
68	[BUG]  [BUGGY]  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    evec    =    getMeans().length;    return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	55	2	replace
69	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  final  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  final  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    final  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  	non-compiled	[CE]  <identifier>  expected	11	None	add
70	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(sum);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(sum);	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	add
71	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(values);	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	add
72	[BUG]  [BUGGY]  double  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  double  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	double  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  >  expected	53	None	replace
73	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  centered.length,  sum);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  centered.length,  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied,  centered.length,  sum);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    preMultiplied.length);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	38	None	replace
74	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  centered,  sum);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  centered,  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  centered,  sum);	  return    FastMath.exp(-0.5    *    sum,    centered);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
75	[BUG]  [BUGGY]  while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
76	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  sum,  preMultiplied.length);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  sum,  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied,  sum,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    sum,    preMultiplied.length);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	25	None	replace
77	[BUG]  [BUGGY]  return  FastMatrix.exp(-0.5  *  sum  +  1);  double[]  std  =  getStd();  [CE]  cannot  find  symbol  FastMatrix  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMatrix.exp(-0.5  *  sum  +  1);  double[]  std  =  getStd();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMatrix.exp(-0.5  *  sum  +  1);  double[]  std  =  getStd();	  return    FastMath.exp(-0.5    *    sum    +    1);    double[]    std    =    getStd();    	non-compiled	[CE]  cannot  find  symbol  FastMatrix	10	None	replace
78	[BUG]  [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
79	[BUG]  [BUGGY]  while(values.length  <  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  <  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  <  1)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
80	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied[i]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied[i]);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i]);    	non-compiled	[CE]  cannot  find  symbol  i	22	None	replace
81	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  centered,  preMultiplied[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  centered,  preMultiplied[i]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  centered,  preMultiplied[i]);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
82	[BUG]  [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  sum  +=  preMultiplied[i]  *  centered[i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	sum  +=  preMultiplied[i]  *  centered[i];	  if(sum    >    0)    {    sum    +=    values[i]    *    centered[i];    }    else    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
83	[BUG]  [BUGGY]  while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >=  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
84	[BUG]  [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >=  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
85	[BUG]  [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >=  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
86	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    double  preMultiplied  =  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	add
87	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  getMeans().length;  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    double  preMultiplied  =  getMeans().length;	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	add
88	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  getMeans()[i]  -  getMeans()[i];  [CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  preMultiplied  =  getMeans()[i]  -  getMeans()[i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    double  preMultiplied  =  getMeans()[i]  -  getMeans()[i];	  	non-compiled	[CE]  variable  preMultiplied  is  already  defined  in  method  getExponentTerm(double[])	11	None	add
89	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  sum);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied,  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied,  sum);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied.length);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	24	None	replace
90	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  preMultiplied.length);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied.length);    	non-compiled	[CE]  cannot  find  symbol  i	24	None	replace
91	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  centered  =  getMeans().length;  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  centered  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  double  centered  =  getMeans().length;	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    double    centered    =    getMeans().length;    	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	34	None	replace
92	[BUG]  [BUGGY]  int  values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  int  values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	int  values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	  if(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    values[i];    }    	non-compiled	[CE]  ';'  expected	39	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied.length  +  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-0.5  *  preMultiplied.length  +  sum);	  return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    	compilable	  [FE]  AssertionError  	12	2	replace
94	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied.length  +  sum);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied.length  +  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied.length  +  sum);	  return    FastMath.exp(-0.5    *    sum    +    preMultiplied.length);    	compilable	  [FE]  AssertionError  	12	2	replace
95	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[0],  sum);  [CE]  no  suitable  method  found  for  exp(double,double,double)  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[0],  sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[0],  sum);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i],    sum);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double,double)	23	None	replace
96	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]    =    Math.max(-0.5    *    sum    +    centered.length);    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
97	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values.length,  preMultiplied.length);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values.length,  preMultiplied.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  values.length,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    values.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	48	None	replace
98	[BUG]  [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	  if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
99	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
100	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  preMultiplied[i]  *  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  preMultiplied[i]  *  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  preMultiplied[i]  *  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
101	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse	  	non-compiled	[CE]  ')'  expected	26	None	add
102	[BUG]  [BUGGY]  if(sum  >  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  if(sum  >  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(sum  >  0)  {  return  FastMath.exp(-0.5  *  sum  +  1);  }  else  {  final  FastMath.exp(-0.5  *  sum  +  1);  }	  return    FastMath.exp(-0.5    *    sum    +    1);    final    FastMath.exp(-0.5    *    sum    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
103	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	add
104	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  <  centered.length;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  <  centered.length;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  <  centered.length;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	add
105	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    if(sum  >  0)  {  for(final  RealMatrix  covarianceMatrixInverse  =  getMeans();  i  >=  0;  i++)  {  sum  +=  covarianceMatrixInverse.preMultiply(covarianceMatrixInverse	  	non-compiled	[CE]  ')'  expected	30	None	add
106	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  preMultiplied  +  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  preMultiplied  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-1.0  *  preMultiplied  +  1);	  return    FastMath.exp(-1.0    *    sum    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
107	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  values.toArray(new  double[values.length]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    double[]  std  =  values.toArray(new  double[values.length]);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
108	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  getMeans();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  getMeans();  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    double[]  std  =  getMeans();	  	non-compiled	[CE]  unreachable  statement	26	None	add
109	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  getMeans().toArray(sum);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  double[]  std  =  getMeans().toArray(sum);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-1.0    *    sum    +    1);    double[]  std  =  getMeans().toArray(sum);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
110	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
111	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  values[i]);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  values[i]);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i]);    	non-compiled	[CE]  cannot  find  symbol  i	22	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  /  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-1.0  *  sum  /  1);	  return    FastMath.exp(-1.0    *    sum    +    1);    	compilable	  [FE]  AssertionError  	27	2	replace
113	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-1.0  *  sum  /  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-1.0  *  sum  /  1);	  return    FastMath.exp(-1.0    *    sum    +    1);    	compilable	  [FE]  AssertionError  	27	2	replace
114	[BUG]  [BUGGY]  while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
115	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length  +  1);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]            AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length  +  1);	  return    FastMath.exp(-0.5    *    sum,    centered.length,    preMultiplied.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	38	None	replace
116	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  v  =  FastMath.exp(-0.5  *  sum  /  centered.length);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  v  =  FastMath.exp(-0.5  *  sum  /  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    double  v  =  FastMath.exp(-0.5  *  sum  /  centered.length);	  	non-compiled	[CE]  unreachable  statement	30	None	add
117	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  /  centered.length);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  /  centered.length);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  /  centered.length);	  	non-compiled	[CE]  unreachable  statement	30	None	add
118	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  evec  =  getMeans().length;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  double  evec  =  getMeans().length;  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    /    centered.length);    double  evec  =  getMeans().length;	  	non-compiled	[CE]  unreachable  statement	30	None	add
119	[BUG]  [BUGGY]  sum  +=  values[i]  -  getMeans()[i];  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  sum  +=  values[i]  -  getMeans()[i];  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	sum  +=  values[i]  -  getMeans()[i];	  if(sum    >    0)    {    sum    +=    values[i]    *    centered[i];    }    else    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
120	[BUG]  [BUGGY]  while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(i  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	  while(values.length    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
121	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixInverse);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixInverse);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  covarianceMatrixInverse);	  return    FastMath.exp(-0.5    *    sum,    preMultiplied[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
122	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  std.length  +  1);  [CE]  cannot  find  symbol  std  [FE]        AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  std.length  +  1);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  std.length  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    if(sum    >    0)    {    for(final    double[]    std    :    values)    {    sum    +=    std.length;    }    	non-compiled	[CE]  cannot  find  symbol  std	42	None	replace
123	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]      return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	  while(values.length    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
124	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  values);  [CE]  no  suitable  method  found  for  exp(double,double[],double[])  [FE]              AssertionError      [CONTEXT]      private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }      [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered,  values);  [BUGGY]      }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered,  values);	  return    FastMath.exp(-0.5    *    sum,    centered);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[],double[])	41	None	replace
