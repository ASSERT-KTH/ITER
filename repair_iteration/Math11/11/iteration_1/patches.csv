bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  	non-compiled	[CE]  cannot  find  symbol  i	9	None	add
2	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]  =  Math.max(-0.5  *  sum  +  centered.length);	  	non-compiled	[CE]  cannot  find  symbol  i	9	None	add
3	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  centered[i]  =  Math.max(-0.5  *  sum  +  centered.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    centered[i]  =  Math.max(-0.5  *  sum  +  centered.length,  sum);  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  	non-compiled	[CE]  cannot  find  symbol  i	9	None	add
4	[BUG]  [BUGGY]  if(sum  >  0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  if(sum  >  0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(sum  >  0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  -  getMeans()[i];  }	      	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
5	[BUG]  [BUGGY]  if(sum  >  0.0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  *  centered[i];  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  if(sum  >  0.0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(sum  >  0.0)  {  sum  +=  values[i]  *  centered[i];  }  else  {  sum  +=  values[i]  *  centered[i];  }	      	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  missing  return  statement	7	None	replace
7	[BUG]  [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  missing  return  statement	14	None	replace
9	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  final  FastMath.exp(-0.5  *  sum  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  final  FastMath.exp(-0.5  *  sum  +  1);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    final  FastMath.exp(-0.5  *  sum  +  1);	  	non-compiled	[CE]  <identifier>  expected	11	None	add
10	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getStd();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getStd();  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    double[]  std  =  getStd();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	10	2	replace
12	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  +  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	10	2	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  missing  return  statement	8	None	replace
14	[BUG]  [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0)  {  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	3	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	3	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  values[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  missing  return  statement	4	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    values[i];    }    	non-compiled	[CE]  missing  return  statement	5	None	replace
22	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i]);  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i]);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i]);	  return    FastMath.exp(-0.5    *    sum,    sum);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
23	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  sum);  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  sum);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied[i],  sum);	  return    FastMath.exp(-0.5    *    sum,    sum);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
24	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length);  [CE]  no  suitable  method  found  for  exp(double,int)  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int)	13	None	replace
25	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  sum,  preMultiplied.length);  [CE]  no  suitable  method  found  for  exp(double,double,int)  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  sum,  preMultiplied.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  sum,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double,int)	13	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-1.0  *  sum  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    	compilable	  [FE]  AssertionError  	12	2	replace
27	[BUG]  [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-1.0  *  sum  +  1);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-1.0  *  sum  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    	compilable	  [FE]  AssertionError  	12	2	replace
28	[BUG]  [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
29	[BUG]  [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  -  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	add	return  FastMath.exp(-0.5  *  sum  /  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	10	2	replace
31	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  /  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum  /  centered.length);	  return    FastMath.exp(-0.5    *    sum    +    centered.length);    	compilable	  [FE]  AssertionError  	10	2	replace
32	[BUG]  [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  values[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
33	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	For(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
34	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  centered  =  getMeans().length;  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  centered  =  getMeans().length;  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    double  centered  =  getMeans().length;	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	9	None	add
35	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  centered  =  getMeans();  [CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  centered  =  getMeans();  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    double  centered  =  getMeans();	  	non-compiled	[CE]  variable  centered  is  already  defined  in  method  getExponentTerm(double[])	9	None	add
36	[BUG]  [BUGGY]  if(sum  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  if(sum  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(sum  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  -  getMeans()[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    -    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	6	None	replace
38	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered.length,  preMultiplied.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	13	None	replace
39	[BUG]  [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	if(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  values[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    preMultiplied[i]    *    values[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
40	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied);  [CE]  no  suitable  method  found  for  exp(double,double[])  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  preMultiplied);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  preMultiplied);	  return    FastMath.exp(-0.5    *    sum,    sum);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[])	1	None	replace
41	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered);  [CE]  no  suitable  method  found  for  exp(double,double[])  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered);	  return    FastMath.exp(-0.5    *    sum,    sum);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,double[])	1	None	replace
42	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
43	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0.0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0.0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    if(sum  >  0.0)  {  for(final  double[]  std  :  values)  {  sum  +=  std.length;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
44	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std;  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std;  }  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    if(sum  >  0)  {  for(final  double[]  std  :  values)  {  sum  +=  std;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  preMultiplied[i]  *  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
46	[BUG]  [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0.0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  getMeans()[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    getMeans()[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
47	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied  +  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  preMultiplied  +  1);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  preMultiplied  +  1);	  return    FastMath.exp(-0.5    *    sum    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
48	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  values.length);  [CE]  no  suitable  method  found  for  exp(double,int,int)  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum,  centered.length,  values.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return  FastMath.exp(-0.5  *  sum,  centered.length,  values.length);	  return    FastMath.exp(-0.5    *    sum,    centered.length);    	non-compiled	[CE]  no  suitable  method  found  for  exp(double,int,int)	13	None	replace
49	[BUG]  [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	while(values.length  >  0)  {  for(int  i  =  0;  i  <  values.length;  i++)  {  sum  +=  values[i]  *  centered[i];  }	      if(sum    >    0)    {    for(int    i    =    0;    i    <    values.length;    i++)    {    sum    +=    values[i]    *    centered[i];    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
50	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  values.toArray(new  double[values.length]);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  values.toArray(new  double[values.length]);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    double[]  std  =  values.toArray(new  double[values.length]);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
51	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getMeans();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getMeans();  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    double[]  std  =  getMeans();	  	non-compiled	[CE]  unreachable  statement	11	None	add
52	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getMeans().toArray(sum);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  1);  double[]  std  =  getMeans().toArray(sum);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    1);    double[]  std  =  getMeans().toArray(sum);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
53	[BUG]  [BUGGY]  int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }  [BUGGY]    return  FastMath.exp(-0.5  *  sum);  }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }	      if(sum    >    0.0)    {    for(int    i    =    0;    i    <    preMultiplied.length;    i++)    {    sum    +=    preMultiplied[i]    *    centered[i];    }    	non-compiled	[CE]  >  expected	14	None	replace
54	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    double  v  =  FastMath.exp(-0.5  *  sum  +  centered.length);	  	non-compiled	[CE]  unreachable  statement	9	None	add
55	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    double  evec  =  getMeans().length;  return  FastMath.exp(-0.5  *  sum  +  centered.length);	  	non-compiled	[CE]  unreachable  statement	9	None	add
56	[BUG]  [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  evec  =  getMeans().length;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    private  double  getExponentTerm(final  double[]  values)  {  final  double[]  centered  =  new  double[values.length];  for  (int  i  =  0;  i  <  centered.length;  i++)  {  centered[i]  =  values[i]  -  getMeans()[i];  }  final  double[]  preMultiplied  =  covarianceMatrixInverse.preMultiply(centered);  double  sum  =  0;  for  (int  i  =  0;  i  <  preMultiplied.length;  i++)  {  sum  +=  preMultiplied[i]  *  centered[i];  }    [BUGGY]  return  FastMath.exp(-0.5  *  sum  +  centered.length);  double  evec  =  getMeans().length;  [BUGGY]    }  [CLASS]  MultivariateNormalDistribution  [METHOD]  getExponentTerm  [RETURN_TYPE]  double  final  double[]  values  [VARIABLES]  boolean  double[]  centered  covMatEigenvalues  evec  means  normalVals  preMultiplied  std  vals  values  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  double  covarianceMatrixDeterminant  factor  sum  int  i  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.7071067811865475	238	238	1	replace	return    FastMath.exp(-0.5    *    sum    +    centered.length);    double  evec  =  getMeans().length;	  	non-compiled	[CE]  unreachable  statement	9	None	add
