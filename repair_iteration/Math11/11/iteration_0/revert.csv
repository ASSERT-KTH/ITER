projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
