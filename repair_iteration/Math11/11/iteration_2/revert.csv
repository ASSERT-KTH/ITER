projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);centered[i]=Math.max(-0.5*sum+centered.length);returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);centered[i]=Math.max(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);centered[i]=Math.max(-0.5*sum+centered.length,sum);returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){sum+=values[i]*centered[i];}else{sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){sum+=values[i]*centered[i];}else{sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);finalFastMath.exp(-0.5*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);double[]std=getStd();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0){for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i],sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,sum,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(values.length>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238For(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);doublecentered=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);doublecentered=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=preMultiplied[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(values.length>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);if(sum>0){for(finaldouble[]std:values){sum+=std.length;}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);if(sum>0.0){for(finaldouble[]std:values){sum+=std.length;}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);if(sum>0){for(finaldouble[]std:values){sum+=std;}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length,values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0){for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);double[]std=values.toArray(newdouble[values.length]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);double[]std=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+1);double[]std=getMeans().toArray(sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);doublev=FastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);doubleevec=getMeans().length;returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+centered.length);doubleevec=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238double[]std=getMeans().toArray(sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doublecentered=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238Doublecentered=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length<=0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length!=0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied.length,centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length,preMultiplied[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied.length,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied.length-1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238centered[i]=Math.max(-0.5*sum+preMultiplied.length);returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238centered[i]=Math.max(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length<=0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length!=0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238double[]std=getStd();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238centered[i]=Math.max(-0.5*sum+preMultiplied.length,sum);returnFastMath.exp(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238centered[i]=Math.max(-0.5*sum+preMultiplied.length,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238For(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>1){for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length<1){for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i],centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i],covarianceMatrixDeterminant);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=values[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*std+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doublev=FastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doublev=FastMath.exp(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238sum+=values[i]*centered[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238sum+=values[i]*preMultiplied[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>1){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied,centered);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238centered[i]=Math.max(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238double[]std=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238finalFastMath.exp(-0.5*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum<0){returnFastMath.exp(-0.5*sum+1);}else{finalFastMath.exp(-0.5*sum+1);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0/sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doubleevec=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,values.length,centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238finalinti=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doublecentered=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238Doublecentered=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238double[]std=values.toArray(newdouble[values.length]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length!=0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length==0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);finalFastMath.exp(-1.0*sum+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);double[]preMultiplied=getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);double[]preMultiplied=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[0]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/values.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length!=0){for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>0){for(inti=0;i<values.length;i++){sum+=values[i]*preMultiplied[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied,values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered,preMultiplied);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);centered[i]=Math.exp(-0.5*sum/centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);centered[i]=Math.max(-0.5*sum/centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);centered[i]=Math.exp(-0.5*sum/std);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doubleevec=getMeans().length;returnFastMath.exp(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);finalFastMath.exp(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);double[]preMultiplied=covarianceMatrixInverse.preMultiply(sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);double[]preMultiplied=covarianceMatrixInverse.preMultiply(values);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238doublei=0;i<preMultiplied.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied,centered.length,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*centered,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>=0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied,sum,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMatrix.exp(-0.5*sum+1);double[]std=getStd();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>=0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length<1){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*centered,preMultiplied[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238sum+=preMultiplied[i]*centered[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>=0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>=0){for(inti=0;i<preMultiplied.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(values.length>=0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);doublepreMultiplied=FastMath.exp(-0.5*sum+preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);doublepreMultiplied=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);doublepreMultiplied=getMeans()[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied,sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i],preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);doublecentered=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238intvalues.length>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*values[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*preMultiplied.length+sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[0],sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum+preMultiplied.length);centered[i]=Math.max(-0.5*sum+centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,values.length,preMultiplied.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(values.length>0.0){for(inti=0;i<values.length;i++){sum+=preMultiplied[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i>=0;i++){sum+=covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i>=0;i++){sum+=preMultiplied[i]*covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i>=0;i++){sum+=covarianceMatrixInverse.preMultiply(covarianceMatrixInverse
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238if(sum>0){returnFastMath.exp(-0.5*sum+1);}else{finalFastMath.exp(-0.5*sum+1);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i>=0;i++){sum+=covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i<centered.length;i++){sum+=covarianceMatrixInverse.preMultiply(covarianceMatrixInverse);}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);if(sum>0){for(finalRealMatrixcovarianceMatrixInverse=getMeans();i>=0;i++){sum+=covarianceMatrixInverse.preMultiply(covarianceMatrixInverse
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*preMultiplied+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);double[]std=values.toArray(newdouble[values.length]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);double[]std=getMeans();
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum+1);double[]std=getMeans().toArray(sum);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(i>0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,values[i]);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-1.0*sum/1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(i>0.0){for(inti=0;i<values.length;i++){sum+=values[i]-getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered.length,preMultiplied.length+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);doublev=FastMath.exp(-0.5*sum/centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);doubleevec=getMeans().length;returnFastMath.exp(-0.5*sum/centered.length);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum/centered.length);doubleevec=getMeans().length;
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238sum+=values[i]-getMeans()[i];
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(i>0.0){for(inti=0;i<values.length;i++){sum+=values[i]*getMeans()[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,preMultiplied[i],covarianceMatrixInverse);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*std.length+1);
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238while(i>0){for(inti=0;i<values.length;i++){sum+=values[i]*centered[i];}
projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java238returnFastMath.exp(-0.5*sum,centered,values);
