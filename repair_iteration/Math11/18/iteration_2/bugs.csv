bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dim.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  dim.length;  i++)  {  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int  i  =  0;  i  <  dim.length;  i++)  {	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariances);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariances);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(covariances);	      double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim);	      double[][]    covariances    =    rng.getMatteredEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getColumnMatEigenvalues();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getColumnMatEigenvalues();	      double[][]    covariances    =    rng.getRowMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(covariance);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(covariance);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covMatEigenvectors.get(covariance);	      double[][]    covariances    =    covMatEigenvectors.get(dim);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariances();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getVariances();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getVariances();	      double[][]    covariances    =    rng.getMatches();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(dim);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(dim);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(dim);	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  for(int  i  =  0;  i  <  covariances.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  for(int  i  =  0;  i  <  covariances.length;  i++)  {  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int    i    =    0;    i    <    covariances.length;    i++)    {    for(int  i  =  0;  i  <  covariances.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  for(int  i  =  0;  i  <  covariances[i].length;  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  for(int  i  =  0;  i  <  covariances[i].length;  i++)  {  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int    i    =    0;    i    <    covariances.length;    i++)    {    for(int  i  =  0;  i  <  covariances[i].length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  For(int  i  =  0;  i  <  covariances.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  For(int  i  =  0;  i  <  covariances.length;  i++)  {  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int    i    =    0;    i    <    covariances.length;    i++)    {    For(int  i  =  0;  i  <  covariances.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
11	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRow();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getRow();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getRow();	      double[][]    covariances    =    rng.getDouble();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.toArray(covariance);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covMatEigenvectors.toArray(covariance);	      double[][]    covariances    =    covMatEigenvectors.toArray(dim);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVarianceMatEigenvalues();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getVarianceMatEigenvalues();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getVarianceMatEigenvalues();	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int    i    =    0;    i    <    covariances.length;    i++)    {    if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  int  dim  =  0;  i  <  covariances.length;  i++)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  for(int  i  =  0;  i  <  covariances.length;  i++)  {  int  dim  =  0;  i  <  covariances.length;  i++)  {  [BUGGY]    if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int    i    =    0;    i    <    covariances.length;    i++)    {    int  dim  =  0;  i  <  covariances.length;  i++)  {	  	non-compiled	[CE]  >  expected	6	None	add
16	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getDoubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getDoubleValue();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getDoubleValue();	      double[][]    covariances    =    rng.getDouble();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getDouble();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  dim.getDouble();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  dim.getDouble();	      double[][]    covariances    =    rng.getDouble();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getMatEigenvalues();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  dim.getMatEigenvalues();  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  dim.getMatEigenvalues();	      double[][]    covariances    =    rng.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatches(dim);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  rng.getMatches(dim);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatches(dim);	      double[][]    covariances    =    rng.getMatches();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }    [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);  [BUGGY]    for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covMatEigenvectors.get(dim,  factor);	      double[][]    covariances    =    covMatEigenvectors.get(dim);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
