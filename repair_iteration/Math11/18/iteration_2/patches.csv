bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  covariances  =  this.covMatEigenvectors.get(covariance);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  this.covMatEigenvectors.get(covariance);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  this.covMatEigenvectors.get(covariance);	  double[][]    covariances    =    covMatEigenvectors.get(covariance);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(dim,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(dim,  col);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(dim,  col);	  double[][]    covariances    =    rng.getMatEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  cannot  find  symbol  covariances  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int  i  =  0;  i  <  this.covariances.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  cannot  find  symbol  covariances	14	None	replace
4	[BUG]  [BUGGY]  int  dim  =  0;  i  <  covariances.length;  i++)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  int  dim  =  0;  i  <  covariances.length;  i++)  {  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	int  dim  =  0;  i  <  covariances.length;  i++)  {	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    int    dim    =    0;    i    <    covariances.length;    i++)    {    	non-compiled	[CE]  >  expected	15	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  covariances[i].length;  i++)  {  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	add	for(int  i  =  0;  i  <  covariances[i].length;  i++)  {	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    for(int    i    =    0;    i    <    covariances[i].length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	5	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  covariances[i].length;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  covariances[i].length;  i++)  {  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int  i  =  0;  i  <  covariances[i].length;  i++)  {	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    for(int    i    =    0;    i    <    covariances[i].length;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	5	replace
7	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariantes();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getVariantes();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getVariantes();	  double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getDoubleValue(dim);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getDoubleValue(dim);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getDoubleValue(dim);	  double[][]    covariances    =    rng.getDoubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumn();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getColumn();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getColumn();	  double[][]    covariances    =    rng.getRow();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatches(dim,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatches(dim,  col);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatches(dim,  col);	  double[][]    covariances    =    rng.getMatches(dim);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
11	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatches(covariance);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatches(covariance);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatches(covariance);	  double[][]    covariances    =    rng.getMatches(dim);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
12	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getRangeMatEigenvalues();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getRangeMatEigenvalues();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getRangeMatEigenvalues();	  double[][]    covariances    =    rng.getVarianceMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  factor.get(dim,  covMatEigenvectors);	  double[][]    covariances    =    covMatEigenvectors.get(dim,    factor);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  col);	  double[][]    covariances    =    rng.getMatteredEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  double[][]  covariances  =  covariances.getDouble();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  covariances.getDouble();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covariances.getDouble();	  double[][]    covariances    =    dim.getDouble();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  covariances.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  For(int  i  =  0;  i  <  covariances.length;  i++)  {  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	For(int  i  =  0;  i  <  covariances.length;  i++)  {	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    For(int    i    =    0;    i    <    covariances.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
17	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatches(covarianceMatrix);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatches(covarianceMatrix);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatches(covarianceMatrix);	  double[][]    covariances    =    rng.getMatches(dim);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(covariance);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(covariance);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(covariance);	  double[][]    covariances    =    rng.getMatteredEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatteredEigenvalues(dim,  factor);	  double[][]    covariances    =    rng.getMatteredEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(covariance,  factor);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  covMatEigenvectors.get(covariance,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covMatEigenvectors.get(covariance,  factor);	  double[][]    covariances    =    covMatEigenvectors.get(dim,    factor);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dim.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  dim.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int  i  =  0;  i  <  dim.length;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	add	for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	compilable	  [FE]  AssertionError  	14	1	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  [BUGGY]      if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	for(int  i  =  0;  i  <  dim;  i++)  {  if(dim!=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }	  for(int    i    =    0;    i    <    covariances.length;    i++)    {    if(dim!=    covariances[i].length)    {    throw    new    DimensionMismatchException(covariances[i].length,    dim);    }    	compilable	  [FE]  AssertionError  	14	1	replace
24	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getVarianceMatEigenvalues();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  dim.getVarianceMatEigenvalues();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  dim.getVarianceMatEigenvalues();	  double[][]    covariances    =    rng.getVarianceMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covariance);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covariance);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(covariance);	  double[][]    covariances    =    rng.getMatEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrix);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrix);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrix);	  double[][]    covariances    =    rng.getMatEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getVariants();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getVariants();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getVariants();	  double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getDoubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  dim.getDoubleValue();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  dim.getDoubleValue();	  double[][]    covariances    =    rng.getDoubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrixDeterminant);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrixDeterminant);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatEigenvalues(covarianceMatrixDeterminant);	  double[][]    covariances    =    rng.getMatEigenvalues(dim);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getColumns();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getColumns();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getColumns();	  double[][]    covariances    =    rng.getRow();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  double[][]  covariances  =  covarianceMatrix.getMatEigenvalues();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  covarianceMatrix.getMatEigenvalues();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  covarianceMatrix.getMatEigenvalues();	  double[][]    covariances    =    dim.getMatEigenvalues();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  double[][]  covariances  =  dim.getVariances();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  dim.getVariances();  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  dim.getVariances();	  double[][]    covariances    =    rng.getVariances();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  double[][]  covariances  =  rng.getMatches(dim,  factor);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      NonPositiveDefiniteMatrixException  {  super(rng,  means.length);  final  int  dim  =  means.length;  if  (covariances.length  !=  dim)  {  throw  new  DimensionMismatchException(covariances.length,  dim);  }      [BUGGY]  double[][]  covariances  =  rng.getMatches(dim,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  dim;  i++)  {  if  (dim  !=  covariances[i].length)  {  throw  new  DimensionMismatchException(covariances[i].length,  dim);  }  }  this.means  =  MathArrays.copyOf(means);  covarianceMatrix  =  new  Array2DRowRealMatrix(covariances);    [CLASS]  MultivariateNormalDistribution  [METHOD]  <init>  [RETURN_TYPE]  RandomGenerator,double[],double[][])  RandomGenerator  rng  final  double[]  means  final  double[][]  covariances  [VARIABLES]  EigenDecomposition  covMatDec  boolean  double[]  covMatEigenvalues  evec  means  RealMatrix  covarianceMatrix  covarianceMatrixInverse  samplingMatrix  tmpMatrix  Array2DRowRealMatrix  covMatEigenvectors  double  covarianceMatrixDeterminant  factor  double[][]  covariances  RandomGenerator  rng  int  col  dim  i  row  v  	projects/Math11/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java	0.4472135954999579	111	111	1	replace	double[][]  covariances  =  rng.getMatches(dim,  factor);	  double[][]    covariances    =    rng.getMatches(dim);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
