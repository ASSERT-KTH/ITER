bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  <  1)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i].length  <  1)  {	  if(fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
3	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  return;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
4	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(offsetSet  &&  roundUp)  {  return;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
5	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  return;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
6	[BUG]  [BUGGY]  fields[i][j]  =  field.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  =  field.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  =  field.get(i);	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field,  offsetSet);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field,  offsetSet);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  field,  offsetSet);	  int    round    =(int)Math.round(fields[i][j],    field);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
8	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  field  +  1);	  int    round    =(int)Math.round(fields[i][j],    field);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
9	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field,  val.get(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field,  val.get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  field,  val.get(i));	  int    round    =(int)Math.round(fields[i][j],    field);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
10	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  <  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  <  1)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i].length  <  1)  {	  if(fields[i][j]    ==    null    ||    fields[i].length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
11	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  <  =  1)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i].length  <  =  1)  {	  if(fields[i][j]    ==    null    ||    fields[i].length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
12	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  >=  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i].length  >=  0)  {	  if(fields[i][j]    ==    null    ||    fields[i].length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
13	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
14	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
15	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
16	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  max);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  max);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  max);	  int    round    =(int)Math.floor(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
17	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val);	  int    round    =(int)Math.floor(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
18	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  0);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  0);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  0);	  int    round    =(int)Math.floor(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
19	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
20	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
21	[BUG]  [BUGGY]  ((  Calendar)val).setTime(fields[i][j]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  ((  Calendar)val).setTime(fields[i][j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	((  Calendar)val).setTime(fields[i][j]);	  if(fields[i][j]    ==    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
22	[BUG]  [BUGGY]  int  round  =(int)Math.rint(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.rint(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.rint(fields[i].get(j));	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
23	[BUG]  [BUGGY]  int  round  =(int)Math.log(fields[i].get(j),  val);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.log(fields[i].get(j),  val);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.log(fields[i].get(j),  val);	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
24	[BUG]  [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)+  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.log(fields[i].get(j)+  1);	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
25	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
26	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offsetSet  &&  roundUp)  {  break;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
27	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offsetSet  ||  roundUp)  {  break;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
28	[BUG]  [BUGGY]  val.add(Calendar.DATE,  15);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  15);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  15);	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
29	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i].length  ==  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i].length  ==  0)  {	  if(fields[i][j]    ==    null    ||    fields[i].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
30	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  ==  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i].length  ==  0)  {	  if(fields[i][j]    ==    null    ||    fields[i].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
31	[BUG]  [BUGGY]  String  round  =  val.get(Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  String  round  =  val.get(Calendar.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	String  round  =  val.get(Calendar.DATE);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
32	[BUG]  [BUGGY]  Character  round  =  val.get(Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Character  round  =  val.get(Calendar.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Character  round  =  val.get(Calendar.DATE);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
33	[BUG]  [BUGGY]  Char  round  =  val.get(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Char  round  =  val.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Char  round  =  val.get(i);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
34	[BUG]  [BUGGY]  String  round  =  val.get(Calendar.DATE;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  String  round  =  val.get(Calendar.DATE;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	String  round  =  val.get(Calendar.DATE;	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
35	[BUG]  [BUGGY]  int  round  =  field.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  field.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  field.get(i);	  int    round    =    field.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
36	[BUG]  [BUGGY]  int  round  =  fields.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields.get(i);	  int    round    =    field.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
37	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  10);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
38	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
39	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
41	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
43	[BUG]  [BUGGY]  if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
44	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  1);  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.MILLISECOND,  1);	  val.add(Calendar.MILLISECOND,    0);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
45	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  3);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  3);  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.MILLISECOND,  3);	  val.add(Calendar.MILLISECOND,    0);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
46	[BUG]  [BUGGY]  fields[i][j]  =  field.get(Calendar.DATE)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  =  field.get(Calendar.DATE)+  1;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  =  field.get(Calendar.DATE)+  1;	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  fields[i][j]  =  field.get(Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  =  field.get(Calendar.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  =  field.get(Calendar.DATE);	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
49	[BUG]  [BUGGY]  val.add(Calendar.DATE,  10);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  10);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  10);	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
50	[BUG]  [BUGGY]  fields[i][j]  =  field;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  =  field;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  =  field;	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
51	[BUG]  [BUGGY]  int  round  =  val.get(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  j);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  j);	  int    round    =    val.get(Calendar.DATE,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
52	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  j  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  j  +  1);	  int    round    =    val.get(Calendar.DATE,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
53	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  field);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  field);	  int    round    =    val.get(Calendar.DATE,    j);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
54	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  ||  offsetSet)  {	  if(fields[i][j]    ==    field    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
55	[BUG]  [BUGGY]  if(fields[i][j]!=  field  ||  offsetSet)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field  ||  offsetSet)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field  ||  offsetSet)  {	  if(fields[i][j]    ==    field    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
56	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  roundUp)  {	  if(fields[i][j]    ==    field    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
57	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  max);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  max);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  max);	  int    round    =(int)Math.round(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
58	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  field.equals(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  field.equals(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  field.equals(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    field.equals(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
59	[BUG]  [BUGGY]  if(fields[i][j]!=  null  &&  field.equals(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  &&  field.equals(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  &&  field.equals(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    field.equals(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
60	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].equals(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].equals(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i][j].equals(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    field.equals(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
61	[BUG]  [BUGGY]  String  round  =(String)Math.floor(fields[i][j]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  String  round  =(String)Math.floor(fields[i][j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	String  round  =(String)Math.floor(fields[i][j]);	  char    round    =(char)Math.floor(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
62	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  +  1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i][j]  +  1]);	  char    round    =(char)Math.floor(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
63	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i][j]  +  1);	  char    round    =(char)Math.floor(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
64	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
65	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j  -  1]  +  1);	  int    round    =(int)Math.round(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
66	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  &  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  &  0xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j  -  1]  &  0xFFFF);	  int    round    =(int)Math.round(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
67	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  +  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j  -  1]  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j  -  1]  +  1]);	  int    round    =(int)Math.round(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
68	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(offsetSet  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[j].get(i)+  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[j].get(i)+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[j].get(i)+  1);	  int    round    =(int)Math.floor(fields[j].get(i));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[j].get(i)-  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[j].get(i)-  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[j].get(i)-  1);	  int    round    =(int)Math.floor(fields[j].get(i));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)+  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j)+  1);	  int    round    =(int)Math.floor(fields[j].get(i));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  -  1  +  1);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
74	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  /  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  /  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  /  1);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
75	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  offsetSet);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  offsetSet);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  -  1],  offsetSet);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
76	[BUG]  [BUGGY]  val.add(Calendar.DATE,  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  2);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  2);	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  int  round  =  fields[j].get(i);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[j].get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[j].get(i);	  int    round    =    val.get(j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
78	[BUG]  [BUGGY]  int  round  =  val.get(j  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(j  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(j  -  1);	  int    round    =    val.get(j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
79	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j]  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j]  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i],  fields[j]  -  1);	  int    round    =(int)Math.floor(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
80	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j]  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i],  fields[j]  +  1);	  int    round    =(int)Math.floor(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
81	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j].length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i],  fields[j].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i],  fields[j].length);	  int    round    =(int)Math.floor(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
82	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
83	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
84	[BUG]  [BUGGY]  int  round  =  val.get(j  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(j  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(j  +  1);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
85	[BUG]  [BUGGY]  int  round  =  fields[i].get(j  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(j  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(j  +  1);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
86	[BUG]  [BUGGY]  int  round  =  fields[i  +  1].get(j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i  +  1].get(j);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i  +  1].get(j);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
87	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  1xFFFF);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  1xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  &  1xFFFF);	  int    round    =(int)Math.floor(fields[i][j]    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
88	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  0xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  -  0xFFFF);	  int    round    =(int)Math.floor(fields[i][j]    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
89	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field.length);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field.length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field.length);	  int    round    =(int)Math.floor(fields[i][j]    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
90	[BUG]  [BUGGY]  val.add(Calendar.DATE,  12);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  12);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  12);	  val.add(Calendar.DATE,    16);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j]!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j]!=  null)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j]!=  null)  {	  if(fields[i][j]    ==    null    ||    fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
92	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j]  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j]  ==  null)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j]  ==  null)  {	  if(fields[i][j]    ==    null    ||    fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
93	[BUG]  [BUGGY]  int  round  =  val.get(i,  fields[i].length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  fields[i].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  fields[i].length);	  int    round    =    val.get(Calendar.DATE,    i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
94	[BUG]  [BUGGY]  int  round  =  val.get(i,  fields[i]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  fields[i]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  fields[i]);	  int    round    =    val.get(Calendar.DATE,    i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
95	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].length  ==  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i][j].length  ==  0)  {	  if(fields[i][j]    ==    null    ||    fields[i][j].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
96	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].length  ==  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j].length  ==  0)  {	  if(fields[i][j]    ==    null    ||    fields[i][j].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
97	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].length!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].length!=  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j].length!=  0)  {	  if(fields[i][j]    ==    null    ||    fields[i][j].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
98	[BUG]  [BUGGY]  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  ||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	||  field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
99	[BUG]  [BUGGY]  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
100	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
101	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
102	[BUG]  [BUGGY]  String  round  =(String)Math.floor(fields[i].get(i));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  String  round  =(String)Math.floor(fields[i].get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	String  round  =(String)Math.floor(fields[i].get(i));	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
103	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i].get(j));	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  Char  round  =(char)Math.floor(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Char  round  =(char)Math.floor(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Char  round  =(char)Math.floor(fields[i].get(j));	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  Character  round  =(char)Math.floor(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Character  round  =(char)Math.floor(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Character  round  =(char)Math.floor(fields[i].get(j));	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
108	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  if(val.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
109	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
110	[BUG]  [BUGGY]  if(fields[i][j]!=  FieldUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  FieldUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  FieldUtils.SEMI_MONTH)  {	  if(fields[i][j]    ==    FieldUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
111	[BUG]  [BUGGY]  if(fields[i][j]  ==  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {	  if(fields[i][j]    ==    FieldUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
112	[BUG]  [BUGGY]  if(fields[i][j]!=  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  FieldUtils.SEMI_MONTH  ||  fields[i][j]  ==  FieldUtils.SEMI_MONTH)  {	  if(fields[i][j]    ==    FieldUtils.SEMI_MONTH)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
113	[BUG]  [BUGGY]  if(fields[i][j]  >=  fields[i][j])  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  >=  fields[i][j])  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  >=  fields[i][j])  {	  if(fields[i][j]!=    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
114	[BUG]  [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]!=    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
115	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(i));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val.get(i));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
116	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.get(Calendar.DATE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.get(Calendar.DATE));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  field.get(Calendar.DATE));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
117	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(i),  field.get(i));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(i),  field.get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val.get(i),  field.get(i));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
118	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.get(i));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  field.get(i));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
119	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
120	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  12);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  12);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  12);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  15);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
123	[BUG]  [BUGGY]  int  round  =  fields[i].get(fields[i].length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(fields[i].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(fields[i].length);	  int    round    =    fields[i].get(i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
124	[BUG]  [BUGGY]  String  round  =(String)Math.round(fields[i][j]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  String  round  =(String)Math.round(fields[i][j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	String  round  =(String)Math.round(fields[i][j]);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
125	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j]  +  1]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j]  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j]  +  1]);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
126	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j]  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j]  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j]  -  1);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
127	[BUG]  [BUGGY]  Character  round  =(char)Math.round(fields[i][j]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Character  round  =(char)Math.round(fields[i][j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Character  round  =(char)Math.round(fields[i][j]);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
128	[BUG]  [BUGGY]  if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
129	[BUG]  [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
130	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i],  fields[j]  -  1);	  int    round    =(int)Math.round(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
131	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i],  fields[j]  +  1);	  int    round    =(int)Math.round(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
132	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  &  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i],  fields[j]  &  0xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i],  fields[j]  &  0xFFFF);	  int    round    =(int)Math.round(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
133	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
134	[BUG]  [BUGGY]  ((  Calendar)fields[i][j]).setTime(val);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  ((  Calendar)fields[i][j]).setTime(val);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	((  Calendar)fields[i][j]).setTime(val);	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
135	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j  -  1]  +  1);	  int    round    =(int)Math.floor(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
136	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  +  1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j  -  1]  +  1]);	  int    round    =(int)Math.floor(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
137	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  &  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j  -  1]  &  0xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j  -  1]  &  0xFFFF);	  int    round    =(int)Math.floor(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
138	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  val  +  1);	  int    round    =(int)Math.round(fields[i][j],    val);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
139	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val,  offsetSet);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val,  offsetSet);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  val,  offsetSet);	  int    round    =(int)Math.round(fields[i][j],    val);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
140	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val,  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val,  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  val,  1);	  int    round    =(int)Math.round(fields[i][j],    val);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
141	[BUG]  [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(Calendar.DATE,  1);	  int    round    =    fields[i].get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
142	[BUG]  [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  0);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(Calendar.DATE,  0);	  int    round    =    fields[i].get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
143	[BUG]  [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(Calendar.DATE,  j);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(Calendar.DATE,  j);	  int    round    =    fields[i].get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
144	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  3);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  3);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  3);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
146	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  For(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	For(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
147	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field,  offsetSet);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field,  offsetSet);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  field,  offsetSet);	  int    round    =(int)Math.floor(fields[i][j],    field);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
148	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  field  +  1);	  int    round    =(int)Math.floor(fields[i][j],    field);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
149	[BUG]  [BUGGY]  if(fields[i][j]  ==  field[i][j])  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field[i][j])  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field[i][j])  {	  if(fields[i][j]    ==    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
150	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i][j]  ||  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]    ==    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
151	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j]  -  1  +  1);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
152	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j]  /  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j]  /  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j]  /  1);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
153	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1],  offsetSet);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1],  offsetSet);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j]  -  1],  offsetSet);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
154	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
155	[BUG]  [BUGGY]  int  round  =  val.get(i,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  1);	  int    round    =    val.get(Calendar.DATE,    1);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
156	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  0);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  0);	  int    round    =    val.get(Calendar.DATE,    1);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
157	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i].length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i].length)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i].length)  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
158	[BUG]  [BUGGY]  if(fields[i][j]  ==  field[i].length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field[i].length)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field[i].length)  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
159	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i].length  ||  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i].length  ||  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i].length  ||  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
160	[BUG]  [BUGGY]  int  round  =  val.get(i,  fields[j]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  fields[j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  fields[j]);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
161	[BUG]  [BUGGY]  int  round  =  fields[i].get(i,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(i,  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(i,  field);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
162	[BUG]  [BUGGY]  int  round  =  val.get(j,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(j,  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(j,  field);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
163	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)-  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)-  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j)-  1);	  int    round    =(int)Math.floor(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
164	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j  -  1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j  -  1));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j  -  1));	  int    round    =(int)Math.floor(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
165	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j),  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j),  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j),  field);	  int    round    =(int)Math.floor(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
166	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  1);	  int    round    =(int)Math.round(fields[i][j],    0);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
167	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  3);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  3);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  3);	  int    round    =(int)Math.round(fields[i][j],    0);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
168	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  0,  field.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  0,  field.length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  0,  field.length);	  int    round    =(int)Math.round(fields[i][j],    0);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
169	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i],  field[j]  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i],  field[j]  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i],  field[j]  -  1);	  int    round    =(int)Math.round(fields[i],    field[j]);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
170	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i],  field[j]  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i],  field[j]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i],  field[j]  +  1);	  int    round    =(int)Math.round(fields[i],    field[j]);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
171	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offset  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
172	[BUG]  [BUGGY]  float  round  =(float)Math.floor(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  float  round  =(float)Math.floor(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	float  round  =(float)Math.floor(fields[i].get(j));	  float    round    =(float)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
173	[BUG]  [BUGGY]  double  round  =(double)Math.floor(fields[i].get(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  double  round  =(double)Math.floor(fields[i].get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	double  round  =(double)Math.floor(fields[i].get(i));	  float    round    =(float)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  float  round  =(float)Math.round(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  float  round  =(float)Math.round(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	float  round  =(float)Math.round(fields[i].get(j));	  float    round    =(float)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
175	[BUG]  [BUGGY]  int[][]  fields  =  val.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int[][]  fields  =  val.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int[][]  fields  =  val.get(i);	  if(fields[i][j]    ==    field)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
176	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j])+  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j])+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j])+  1);	  int    round    =(int)Math.floor(fields[i].get(j]));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
177	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j]),  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j]),  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j]),  field);	  int    round    =(int)Math.floor(fields[i].get(j]));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
178	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j])-  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j])-  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j])-  1);	  int    round    =(int)Math.floor(fields[i].get(j]));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
179	[BUG]  [BUGGY]  int  round  =  fields[i].get(j  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(j  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(j  -  1);	  int    round    =    fields[i].get(j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
180	[BUG]  [BUGGY]  int  round  =  fields[i].get(field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(field);	  int    round    =    fields[i].get(j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
181	[BUG]  [BUGGY]  if(fields[i][j]!=  null  &&  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  &&  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  &&  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    fieldSet.contains(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
182	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i][j].contains(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    fieldSet.contains(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
183	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
184	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
185	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
186	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
187	[BUG]  [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(round  &&  roundUp)  {  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
188	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
189	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j].contains(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    fieldSet.contains(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
190	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
191	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
192	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  15);	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
193	[BUG]  [BUGGY]  int  round  =  val.get(fields[i][j  +  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(fields[i][j  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(fields[i][j  +  1]);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
194	[BUG]  [BUGGY]  int  round  =  val.get(fields[i].length  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(fields[i].length  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(fields[i].length  +  1);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
195	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
196	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
197	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  0,  fields[i].length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  0,  fields[i].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  0,  fields[i].length);	  int    round    =(int)Math.round(fields[i][j],    0);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
198	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(fields[i][j]!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(fields[i][j]!=  null)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(fields[i][j]!=  null)  {  return;  }	  if(fields[i][j]!=    null)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
199	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
200	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  val.add(Calendar.DATE,  16);	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
201	[BUG]  [BUGGY]  if(fields[i][j]  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  >=  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  >=  0)  {	  if(fields[i][j]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
202	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(setUp  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
203	[BUG]  [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
204	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(offset  &&  roundUp)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
205	[BUG]  [BUGGY]  if(fields[i][j]  >=  fields[i].length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  >=  fields[i].length)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  >=  fields[i].length)  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
206	[BUG]  [BUGGY]  if(fields[i][j]!=  fields[i].length  ||  roundUp)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  fields[i].length  ||  roundUp)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  fields[i].length  ||  roundUp)  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
207	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
208	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  &  0xFFFF,  field);	  int    round    =(int)Math.floor(fields[i][j]    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
209	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)+  1));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j)+  1));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j)+  1));	  int    round    =(int)Math.floor(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
210	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
211	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
212	[BUG]  [BUGGY]  float  round  =(float)Math.log(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  float  round  =(float)Math.log(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	float  round  =(float)Math.log(fields[i].get(j));	  float    round    =(float)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
213	[BUG]  [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(fields[i][j]!=    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
214	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
215	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  0);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  0);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
216	[BUG]  [BUGGY]  val.add(Calendar.MILLISECOND,  0,  fields[i].length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.MILLISECOND,  0,  fields[i].length);  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.MILLISECOND,  0,  fields[i].length);	  val.add(Calendar.MILLISECOND,    0);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
217	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
218	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(i)+  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(i)+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(i)+  1);	  int    round    =(int)Math.floor(fields[j].get(i));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
219	[BUG]  [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)+  1));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)+  1));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.log(fields[i].get(j)+  1));	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
220	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].equals(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i][j].equals(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i][j].equals(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    field.equals(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
221	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
222	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
223	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
224	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
225	[BUG]  [BUGGY]  char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  0;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  0;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  0;	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
226	[BUG]  [BUGGY]  char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  field;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  field;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(i  <  fields[i].length)?(char)Math.floor(fields[i].get(j))  :  field;	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
227	[BUG]  [BUGGY]  if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(i)  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
228	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i][j]  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(fields[i][j]    ==    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
229	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  &&  roundUp)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  &&  roundUp)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  &&  roundUp)  {	  if(fields[i][j]    ==    field    ||    roundUp)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
230	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
231	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j],  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j],  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j],  field);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
232	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j]  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j]  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j]  +  1);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
233	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j]  &  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j]  &  0xFFFF);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j]  &  0xFFFF);	  char    round    =(char)Math.round(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
234	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
235	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
236	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  1);	  int    round    =(int)Math.floor(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
237	[BUG]  [BUGGY]  val.add(Calendar.DATE,  100);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  100);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  100);	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
238	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i][j]  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i][j]  -  1);	  char    round    =(char)Math.floor(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
239	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i][j],  field);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i][j],  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i][j],  field);	  char    round    =(char)Math.floor(fields[i][j]);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
240	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
241	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
242	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
243	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
244	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
245	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
246	[BUG]  [BUGGY]  int  round  =  val.get(i,  Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  Calendar.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  Calendar.DATE);	  int    round    =    val.get(Calendar.DATE,    i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
247	[BUG]  [BUGGY]  int  round  =  val.get(i,  DateUtils.DATE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  DateUtils.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  DateUtils.DATE);	  int    round    =    val.get(Calendar.DATE,    i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
248	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
249	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
250	[BUG]  [BUGGY]  if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(field  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
251	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1],  field);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j]  -  1],  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j]  -  1],  field);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
252	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field.length  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field.length  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  field.length  -  1);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
253	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  field  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  field  -  1);	  int    round    =(int)Math.round(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
254	[BUG]  [BUGGY]  val.add(Calendar.DATE,  -15,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  val.add(Calendar.DATE,  -15,  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	val.add(Calendar.DATE,  -15,  field);	  val.add(Calendar.DATE,    -15);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
255	[BUG]  [BUGGY]  if(field!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(field!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(field!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
256	[BUG]  [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  0)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
257	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  field);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  -  1],  field);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
258	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.length  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  field.length  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  field.length  -  1);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
259	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  field  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  -  1],  field  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  -  1],  field  +  1);	  int    round    =(int)Math.floor(fields[i][j]    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
260	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j].length  >=  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i][j].length  >=  0)  {	  if(fields[i][j]    ==    null    ||    fields[i][j].length!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
261	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i].get(j  +  1));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i].get(j  +  1));	  int    round    =(int)Math.floor(fields[i].get(j]));    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
262	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
263	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE)+  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE)+  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE)+  1);	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
264	[BUG]  [BUGGY]  float  round  =(float)Math.floor(fields[i][j],  val.get(Calendar.DATE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  float  round  =(float)Math.floor(fields[i][j],  val.get(Calendar.DATE));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	float  round  =(float)Math.floor(fields[i][j],  val.get(Calendar.DATE));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
265	[BUG]  [BUGGY]  int  round  =  fields[i].get(Calendar.DATE  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(Calendar.DATE  -  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(Calendar.DATE  -  1);	  int    round    =    fields[i].get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
266	[BUG]  [BUGGY]  int  round  =  fields[i].get(Calendar.DATE  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(Calendar.DATE  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(Calendar.DATE  +  1);	  int    round    =    fields[i].get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
267	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  -1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  -1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  -1);	  int    round    =    val.get(Calendar.DATE,    1);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
268	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j]  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  fields[i][j]  ==  null)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  fields[i][j]  ==  null)  {	  if(fields[i][j]    ==    null    ||    fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
269	[BUG]  [BUGGY]  Char  round  =  val.get(Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Char  round  =  val.get(Calendar.DATE);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Char  round  =  val.get(Calendar.DATE);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
270	[BUG]  [BUGGY]  char  round  =  val.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =  val.get(i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =  val.get(i);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
271	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(round  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
272	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(offsetSet  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
273	[BUG]  [BUGGY]  int  round  =  fields[i].length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].length;  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].length;	  int    round    =    field.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
274	[BUG]  [BUGGY]  int  round  =  val.get(field,  i);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(field,  i);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(field,  i);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
275	[BUG]  [BUGGY]  int  round  =  val.get(i,  field  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i,  field  +  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i,  field  +  1);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
276	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
277	[BUG]  [BUGGY]  if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(j)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
278	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i][j],  roundUp)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i][j],  roundUp)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i][j],  roundUp)  {	  if(fields[i][j]    ==    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
279	[BUG]  [BUGGY]  if(fields[i][j]  ==  fields[i][j].getMillis())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  fields[i][j].getMillis())  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  fields[i][j].getMillis())  {	  if(fields[i][j]    ==    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
280	[BUG]  [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  field)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
281	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
282	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
283	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
284	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
285	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
286	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
287	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
288	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
289	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  this.offset);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  this.offset);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  this.offset);	  int    round    =(int)Math.floor(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
290	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j  -  1]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j  -  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j  -  1]);	  int    round    =(int)Math.round(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
291	[BUG]  [BUGGY]  if(offsetSet  ||  roundUp)  {  if(fields[i][j]!=  null)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  roundUp)  {  if(fields[i][j]!=  null)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  roundUp)  {  if(fields[i][j]!=  null)  {  break;  }	  if(fields[i][j]!=    null)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
292	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  break;  }	  if(fields[i][j]!=    null)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
293	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
294	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
295	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
296	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  12);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
297	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
298	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(fields[i][j]  ==  field)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
299	[BUG]  [BUGGY]  int  round  =  fields[i].get(fields[j].length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(fields[j].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(fields[j].length);	  int    round    =    fields[i].get(i);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
300	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field  <  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
301	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    15);    }    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
302	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(round    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
303	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  break;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
304	[BUG]  [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  <  =  fieldSet.contains(fields[i][j]))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  ||  fields[i].length  <  =  fieldSet.contains(fields[i][j]))  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  ||  fields[i].length  <  =  fieldSet.contains(fields[i][j]))  {	  if(fields[i][j]    ==    null    ||    fieldSet.contains(fields[i][j]))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
305	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
306	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  10);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    10);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
307	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[i][j  -  1]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[i][j  -  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[i][j  -  1]);	  int    round    =(int)Math.floor(fields[i][j    -    1]);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
308	[BUG]  [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  field  ==  Calendar.DATE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  fields[i][j]  ||  field  ==  Calendar.DATE)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  fields[i][j]  ||  field  ==  Calendar.DATE)  {	  if(fields[i][j]!=    fields[i][j])    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
309	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  break;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
310	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  break;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
311	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
312	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i][j],  val);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i][j],  val);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i][j],  val);	  int    round    =(int)Math.round(fields[i][j],    val);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
313	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE,  1));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE,  1));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE,  1));	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
314	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE),  field);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE),  field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j],  val.get(Calendar.DATE),  field);	  int    round    =(int)Math.floor(fields[i][j],    val.get(Calendar.DATE));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
315	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  break;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  break;  }	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
317	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  3);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  3);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  3);	  int    round    =    val.get(Calendar.DATE,    1);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
318	[BUG]  [BUGGY]  char  round  =(char)Math.floor(fields[j].get(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.floor(fields[j].get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.floor(fields[j].get(i));	  int    round    =(int)Math.floor(fields[j].get(i));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
319	[BUG]  [BUGGY]  if(fields[i][j]!=  null  &&  fields[i].length  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null  &&  fields[i].length  >  0)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null  &&  fields[i].length  >  0)  {	  if(fields[i][j]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
320	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
321	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  15);  }	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
322	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  val.add(Calendar.DATE,	  if(fields[i][j]    ==    field)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
323	[BUG]  [BUGGY]  int  round  =(int)Math.cos(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.cos(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.cos(fields[i].get(j));	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
324	[BUG]  [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)-  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.log(fields[i].get(j)-  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.log(fields[i].get(j)-  1);	  int    round    =(int)Math.log(fields[i].get(j));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
325	[BUG]  [BUGGY]  int  round  =  val.get(field,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(field,  j);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(field,  j);	  int    round    =    val.get(i,    field);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
326	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  12);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	for(int  j  =  0;  j  <  fields.length;  j++)  {  if(fields[i][j]  ==  null)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  12);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    12);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
327	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(round  &&  roundUp)  {  return;  }	  if(fields[i][j]!=    null)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
328	[BUG]  [BUGGY]  Char  round  =  val.get(Calendar.DATE,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Char  round  =  val.get(Calendar.DATE,  j);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Char  round  =  val.get(Calendar.DATE,  j);	  char    round    =    val.get(Calendar.DATE);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
329	[BUG]  [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }	  if(fields[i][j]    ==    field)    {    if(field.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
330	[BUG]  [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  field  ||  offsetSet)  {  if(setUp  &&  roundUp)  {  return;  }	  if(fields[i][j]    ==    field)    {    if(setUp    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
331	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  1);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
332	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  0);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  0);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  val.add(Calendar.DATE,  0);  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
333	[BUG]  [BUGGY]  char  round  =(char)Math.round(fields[i],  fields[j]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  char  round  =(char)Math.round(fields[i],  fields[j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	char  round  =(char)Math.round(fields[i],  fields[j]);	  int    round    =(int)Math.round(fields[i],    fields[j]);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
334	[BUG]  [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.floor(fields[i][j]  &  1);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.floor(fields[i][j]  &  1);	  int    round    =(int)Math.floor(fields[i][j]    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
335	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(field.get(i)  ==  1)  {  val.add(Calendar.DATE,  15);  }  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    if(field.get(i)    ==    1)    {    val.add(Calendar.DATE,    15);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
336	[BUG]  [BUGGY]  Character  round  =(Character)Math.floor(fields[i].get(j));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  Character  round  =(Character)Math.floor(fields[i].get(j));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	Character  round  =(Character)Math.floor(fields[i].get(j));	  char    round    =(char)Math.floor(fields[i].get(i));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
337	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    ||    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
338	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  this.offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  this.offset);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  this.offset);	  int    round    =(int)Math.round(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
339	[BUG]  [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val.get(Calendar.DATE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =(int)Math.round(fields[i][j],  val.get(Calendar.DATE));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =(int)Math.round(fields[i][j],  val.get(Calendar.DATE));	  int    round    =(int)Math.round(fields[i][j],    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
340	[BUG]  [BUGGY]  if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null  ||  offsetSet  ||  roundUp)  {  return;  }	  if(fields[i][j]    ==    null)    {    if(offsetSet    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
341	[BUG]  [BUGGY]  int  round  =  fields[i].get(field.get(i));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  fields[i].get(field.get(i));  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  fields[i].get(field.get(i));	  int    round    =    fields[i].get(j);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
342	[BUG]  [BUGGY]  int  round  =  val.get(Calendar.DATE,  fields[i]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(Calendar.DATE,  fields[i]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(Calendar.DATE,  fields[i]);	  int    round    =    val.get(Calendar.DATE,    i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
343	[BUG]  [BUGGY]  int  round  =  val.get(field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(field);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(field);	  int    round    =    val.get(j);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
344	[BUG]  [BUGGY]  if(fields[i].length!=  1)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].length!=  1)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].length!=  1)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(fields[i][j]  ==  null)  {  val.add(Calendar.DATE,  1);  }	  for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(fields[i][j]    ==    null)    {    val.add(Calendar.DATE,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
345	[BUG]  [BUGGY]  if(fields[i][j]!=  fields[i].length  ||  field  ==  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  fields[i].length  ||  field  ==  DateUtils.SEMI_MONTH)  {  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  fields[i].length  ||  field  ==  DateUtils.SEMI_MONTH)  {	  if(fields[i][j]!=    fields[i].length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
346	[BUG]  [BUGGY]  int  round  =  val.get(fields[i  +  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(fields[i  +  1]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(fields[i  +  1]);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
347	[BUG]  [BUGGY]  int  round  =  val.get(fields[i  +  1][j]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(fields[i  +  1][j]);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(fields[i  +  1][j]);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
348	[BUG]  [BUGGY]  int  round  =  val.get(i  +  1,  fields[j].length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  int  round  =  val.get(i  +  1,  fields[j].length);  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	int  round  =  val.get(i  +  1,  fields[j].length);	  int    round    =    val.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
349	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  16);  }  }	  if(fields[i][j]!=    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    16);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
350	[BUG]  [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }  [BUGGY]        if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i].get(i)!=  null)  {  for(int  j  =  0;  j  <  fields[i].length;  j++)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  }	  if(fields[i].get(i)!=    null)    {    for(int    j    =    0;    j    <    fields[i].length;    j++)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
351	[BUG]  [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(offsetSet  ||  offsetSet)  {  if(fields[i][j]!=  field)  {  return;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
352	[BUG]  [BUGGY]  fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  return;  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	fields[i][j]  ==  field)  {  if(round  &&  roundUp)  {  return;  }	  if(fields[i][j]!=    field)    {    if(round    &&    roundUp)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
353	[BUG]  [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]!=  null)  {  if(field  ==  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
354	[BUG]  [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]            boolean  roundUp  =  false;  for  (int  i  =  0;  i  <  fields.length;  i++)  {  for  (int  j  =  0;  j  <  fields[i].length;  j++)  {      [BUGGY]  if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }  [BUGGY]      if  (fields[i][j]  ==  field)  {  if  (round  &&  roundUp)  {  if  (field  ==  DateUtils.SEMI_MONTH)  {    if  (val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  15);  }  else  {  val.add(Calendar.DATE,  -15);  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	644	644	1	replace	if(fields[i][j]  ==  null)  {  if(field!=  DateUtils.SEMI_MONTH)  {  if(val.get(Calendar.DATE)  ==  1)  {  val.add(Calendar.DATE,  1);  }  }	  if(fields[i][j]    ==    null)    {    if(field    ==    DateUtils.SEMI_MONTH)    {    if(val.get(Calendar.DATE)    ==    1)    {    val.add(Calendar.DATE,    1);    }    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
