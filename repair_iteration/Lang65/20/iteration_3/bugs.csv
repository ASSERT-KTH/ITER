bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  roundUp  =  offset  >((  max  -  min)/  2  *  3);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  >((  max  -  min)/  2  *  3);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  >((  max  -  min)/  2  *  3);	  roundUp    =    offset    >((    max    -    min)/    2    *    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  roundUp  =  offset  >((  max  -  min)/  2  *  4);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  >((  max  -  min)/  2  *  4);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  >((  max  -  min)/  2  *  4);	  roundUp    =    offset    >((    max    -    min)/    2    *    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  int  offset  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])-  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])-  offset;	  int    max    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
5	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])/  max;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])/  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])/  max;	  int    max    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
6	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])/  offset;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])/  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])/  offset;	  int    max    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
7	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])-  min  +  1;	  int    max    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
8	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  offset;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])-  min  +  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])-  min  +  offset;	  int    max    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
9	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  offset);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
10	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  min,  offset);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
11	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  offset);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
12	[BUG]  [BUGGY]  int  max  =  val.getIntMaximum(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getIntMaximum(fields[i][0]  +  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getIntMaximum(fields[i][0]  +  min);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  2;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  2;	  offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  max;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  max;	  offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
15	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  1;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  1;	  offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
16	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  3;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  3;	  offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
17	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  -  min,  max);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  -  min,  max);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  -  min,  max);	  offset    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
18	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  -  min  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  -  min  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  -  min  +  1);	  offset    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
19	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  -  min,  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  -  min,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  -  min,  offset);	  offset    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
20	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  max  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])-  max  +  1;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])-  max  +  1;	  offset    =    val.get(fields[i][0])-    min    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
21	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  2;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])-  min  +  2;	  offset    =    val.get(fields[i][0])-    min    +    1;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
22	[BUG]  [BUGGY]  if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offsetSet)  {  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getIntValue(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  setSet  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  setSet  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	setSet  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
25	[BUG]  [BUGGY]  roundUp  =  min  >((  max  -  offset)/  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  >((  max  -  offset)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  >((  max  -  offset)/  2);	  roundUp    =    min    >((    max    -    offset)/    2    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
26	[BUG]  [BUGGY]  roundUp  =  max  >((  min  -  offset)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  max  >((  min  -  offset)/  2  +  1);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  max  >((  min  -  offset)/  2  +  1);	  roundUp    =    min    >((    max    -    offset)/    2    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
27	[BUG]  [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_SECOND);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_SECOND);	  roundUp    =    offset    +((    max    -    min)/    2    *    MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
28	[BUG]  [BUGGY]  roundUp  =  min  +((  max  -  offset)/  2  *  MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  +((  max  -  offset)/  2  *  MILLIS_PER_DAY);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  +((  max  -  offset)/  2  *  MILLIS_PER_DAY);	  roundUp    =    offset    +((    max    -    min)/    2    *    MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
29	[BUG]  [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_HOUR);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_HOUR);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  +((  max  -  min)/  2  *  MILLIS_PER_HOUR);	  roundUp    =    offset    +((    max    -    min)/    2    *    MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
30	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
31	[BUG]  [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMinimum(fields[i][0]  +  1);	  int    max    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMinimum(fields[i][0]  +  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMinimum(fields[i][0]  +  offset);	  int    max    =    val.getMinimum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  offset);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
34	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
35	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  round;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])-  round;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])-  round;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  roundUp  =  min  +((  offset  -  max)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  +((  offset  -  max)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  +((  offset  -  max)/  2);	  roundUp    =    max    +((    offset    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  roundUp  =  offset  +((  offset  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  +((  offset  -  min)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  +((  offset  -  min)/  2);	  roundUp    =    max    +((    offset    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  max);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  max);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  max);	  offset    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
40	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  min,  max);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  min,  max);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  min,  max);	  offset    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
41	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  min,  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  min,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  min,  offset);	  offset    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
42	[BUG]  [BUGGY]  roundUp  =  min  +((  max  -  offset)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  +((  max  -  offset)/  2  +  1);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  +((  max  -  offset)/  2  +  1);	  roundUp    =    min    +((    max    -    offset)/    2);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  roundUp  =  min  +((  offset  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  +((  offset  -  min)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  +((  offset  -  min)/  2);	  roundUp    =    min    +((    max    -    offset)/    2);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  +((  max  -  min)/  2  *  1);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  +((  max  -  min)/  2  *  1);	  roundUp    =    offset    +((    max    -    min)/    2    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  2);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  2);	  offset    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  3);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  3);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  3);	  offset    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    offset);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
48	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  2);	  val.set(fields[i][0],    val.get(fields[i][0])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
49	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  1);	  val.set(fields[i][0],    val.get(fields[i][0])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
50	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0])-  offset;	  int    max    =    val.getActualMaximum(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
51	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0])-  min  +  1;	  int    max    =    val.getActualMaximum(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
52	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0]  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0]  +  1);	  int    max    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  -  min);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0]  -  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0]  -  min);	  int    max    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0]  +  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0]  +  min);	  int    max    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  max);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  max);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  max);	  val.set(fields[i][0],    val.get(fields[i][0])/    min);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]).get(offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]).get(offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]).get(offset);	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  offset;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  offset;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  offset;	  offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
58	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max,  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  max,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    max);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
59	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])-    min    +    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
60	[BUG]  [BUGGY]  ||  offset  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  ||  offset  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	||  offset  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
61	[BUG]  [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
62	[BUG]  [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
63	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  aughtExceptionHandler.throwAsStatement( " ");  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	aughtExceptionHandler.throwAsStatement( " ");	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
64	[BUG]  [BUGGY]  if(offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offsetSet)  {  int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;  }	  int    max    =    val.getActualMaximum(fields[i][0]    +    1);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
65	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  min;	  int    max    =    val.getActualMaximum(fields[i][0]    +    1);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
66	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  1);	  int    max    =    val.getMaximum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
67	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][0]  +  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][0]  +  min);	  int    max    =    val.getMaximum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
68	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][1]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][1]);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][1]);	  int    max    =    val.getMaximum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  val.set(offset,  val.get(fields[i][0])-  min);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(offset,  val.get(fields[i][0])-  min);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(offset,  val.get(fields[i][0])-  min);	  val.set(min,    val.get(fields[i][0])-    offset);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(offset    ==    0)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
71	[BUG]  [BUGGY]  set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	set  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;	  if(offset    ==    0)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
72	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][0],  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][0],  offset);	  int    max    =    val.getMaximum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min);  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  min);  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  min);  offset  =  val.get(fields[i][0])-  max;	  int    max    =    val.getActualMaximum(fields[i][0]    +    1);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
75	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  offset;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0])-  min  +  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0])-  min  +  offset;	  int    max    =    val.getActualMaximum(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
76	[BUG]  [BUGGY]  roundUp  =  min  >((  offset  -  offset)/  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  >((  offset  -  offset)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  >((  offset  -  offset)/  2);	  roundUp    =    min    >((    max    -    offset)/    2    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
77	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min  +  1);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  min  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])-    min    +    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
78	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }	  if(offset    ==    0)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
79	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getIntValue(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  max;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  min)-  offset;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  min)-  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  min)-  offset;	  offset    =    val.get(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
82	[BUG]  [BUGGY]  if(offset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
83	[BUG]  [BUGGY]  if(offset!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
84	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  max);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  max);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  min,  max);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    max);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
85	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  >=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  roundUp  =  max  +((  min  -  offset)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  max  +((  min  -  offset)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  max  +((  min  -  offset)/  2);	  roundUp    =    min    +((    max    -    offset)/    2);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
88	[BUG]  [BUGGY]  setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	setUp  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  >=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
90	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset;	  val.set(fields[i][0],    val.get(fields[i][0])-    offset    +    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
91	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getIntValue(fields[i][0]);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getIntValue(fields[i][0]);	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  int  max  =  val.getIntValue(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getIntValue(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getIntValue(fields[i][0])-  min;	  int    max    =    val.getIntValue(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  3);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  3);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  3);	  val.set(fields[i][0],    val.get(fields[i][0])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
94	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0])-  1;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0])-  min;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
96	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0]);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0]);	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
97	[BUG]  [BUGGY]  int  offset  =  val.get(fields[i][0])-  MILLIS_PER_DAY;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  offset  =  val.get(fields[i][0])-  MILLIS_PER_DAY;  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  offset  =  val.get(fields[i][0])-  MILLIS_PER_DAY;	  int    offset    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  if(offset!=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset!=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset!=  0)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
99	[BUG]  [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getActualMaximum(fields[i][0]  +  field);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getActualMaximum(fields[i][0]  +  field);	  int    max    =    val.getActualMaximum(fields[i][0]    +    min);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
100	[BUG]  [BUGGY]  if(offset!=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset!=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset!=  0)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  max;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    max;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
101	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  1)-  min;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0]  +  1)-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0]  +  1)-  min;	  offset    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
102	[BUG]  [BUGGY]  roundUp  =  min  +((  offset  -  offset)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  min  +((  offset  -  offset)/  2);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  min  +((  offset  -  offset)/  2);	  roundUp    =    max    +((    offset    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
103	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  min);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  min);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  min);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
104	[BUG]  [BUGGY]  edge  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  edge  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	edge  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    >=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
105	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  4;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  offset  =  val.get(fields[i][0])/  4;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	offset  =  val.get(fields[i][0])/  4;	  offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  if(offset  <  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(offset  <  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(offset  <  min)  {  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.getActualMaximum(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
107	[BUG]  [BUGGY]  roundUp  =  max  >((  offset  -  min)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  max  >((  offset  -  min)/  2  +  1);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  max  >((  offset  -  min)/  2  +  1);	  roundUp    =    min    >((    max    -    offset)/    2    +    1);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
108	[BUG]  [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.getMaximum(fields[i][0])-  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.getMaximum(fields[i][0])-  min;	  int    max    =    val.getMaximum(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
109	[BUG]  [BUGGY]  if(!offsetSet)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  if(!offsetSet)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	if(!offsetSet)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
110	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])/  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  int  max  =  val.get(fields[i][0])/  min;  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	int  max  =  val.get(fields[i][0])/  min;	  int    max    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
111	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  offset);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i],  val.get(fields[i][0])-  offset);	  val.set(min,    val.get(fields[i][0])-    offset);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
112	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  offset,  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  offset,  offset);  [BUGGY]      roundUp  =  offset  >  ((max  -  min)  /  2);  }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  offset,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])-    offset,    offset);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
113	[BUG]  [BUGGY]  roundUp  =  offset  >((  max  -  min)/  3);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      offsetSet  =  true;  }  break;  }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;        [BUGGY]  roundUp  =  offset  >((  max  -  min)/  3);  [BUGGY]      }  val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	706	706	1	replace	roundUp  =  offset  >((  max  -  min)/  3);	  roundUp    =    offset    >((    max    -    min)/    2    *    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
