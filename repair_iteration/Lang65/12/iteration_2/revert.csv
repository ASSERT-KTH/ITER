projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,1);val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,15);val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,-15);val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,-15);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663return;
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663thrownewIllegalArgumentException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663thrownewIllegalStateException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663thrownewUnsupportedOperationException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663thrownewRuntimeException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663thrownewIllegalFieldValueException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,15);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,3);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,-1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(round){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalStateException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,3);val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,2);val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,15,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,16);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.MONTH){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(round){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.MONTH,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(round){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(round){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)==1){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE){thrownewIllegalFieldValueException(""));}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)==1){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.MONTH){val.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.MONTH){thrownewIllegalFieldValueException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.MONTH,-15);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.MONTH,15);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.MONTH,3);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==roundUp){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){thrownewRuntimeException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==roundUp){thrownewRuntimeException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){val.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)==1){val.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)==1){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)>=1){val.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.DATE){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewIllegalFieldValueException(""));}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==roundUp){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==round){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)==1){thrownewIllegalArgumentException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)==1){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwUnsupportedOperationException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwAsSertionFailedError("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwInternal();
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MONTH){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==roundUp){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.DATE){thrownewIllegalArgumentException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,0,1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663val.add(Calendar.DATE,15,-15);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalStateException("".getMessage());
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalStateException("".equals(field));
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalStateException("",val);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663mutables.add(fields[i][0],roundUp){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewIllegalArgumentException("".equalsIgnoreCase(fields[i][0]));}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewIllegalArgumentException("".equalsIgnoreCase(fields[i][1]));}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalArgumentException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)!=1){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)>=1){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.MONTH){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.DATE){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663mutables.add(fields[i][0],1);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663mutables.add(val);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][1]==Calendar.DATE){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.DATE){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated();
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663safeTruncated){thrownewIllegalStateException("".toString());}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.DATE){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwAsOperationException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwUnquotedException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663fields[i][0]==Calendar.DATE){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)!=1){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(val.get(Calendar.DATE)>=1){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663pendingTruncated(){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663tate.checkState(fields[i][0],roundUp);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MILLISECOND){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewIllegalFieldValueException(""));}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663[Delete]
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwAsUnquotedException("");
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.handleMissingName(val,field);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(val.get(Calendar.DATE)!=1){thrownewIllegalStateException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663cast(val.getTime(),field){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663aughtExceptionHandler.throwAsIterable(val,field);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663tate.checkState(fields[i][0],val.get(Calendar.DATE));
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663tate.checkState(fields[i][0]==Calendar.DATE);
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663while(fields[i][0]==Calendar.MONTH){thrownewIllegalFieldValueException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MILLISECOND){thrownewIllegalArgumentException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.HOUR_OF_DAY){thrownewRuntimeException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663Throwables.thrownewIllegalStateException("")
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.YEAR){thrownewUnsupportedOperationException("");}
projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java663if(fields[i][0]==Calendar.DATE||fields[i][1]==Calendar.MILLISECOND){thrownewIllegalFieldValueException("");}
