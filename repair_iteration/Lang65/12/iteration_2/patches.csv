bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  val.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  val.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.MONTH)  {  val.add(fields[i][0],  1);	  if(fields[i][0]    ==    Calendar.MONTH)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");	  if(fields[i][0]    ==    Calendar.MONTH)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
3	[BUG]  [BUGGY]  val.add(Calendar.MONTH,  -15);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(Calendar.MONTH,  -15);  [BUGGY]      return;  }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(Calendar.MONTH,  -15);	  val.add(Calendar.MONTH,    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  val.add(Calendar.MONTH,  15);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(Calendar.MONTH,  15);  [BUGGY]      return;  }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(Calendar.MONTH,  15);	  val.add(Calendar.MONTH,    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
5	[BUG]  [BUGGY]  val.add(Calendar.MONTH,  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(Calendar.MONTH,  3);  [BUGGY]      return;  }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(Calendar.MONTH,  3);	  val.add(Calendar.MONTH,    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
6	[BUG]  [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");  }	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
7	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
8	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
9	[BUG]  [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  roundUp)  {  throw  new  RuntimeException( " ");	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
10	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalStateException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  val.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(fields[i][0],  1);	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  val.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  val.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  val.add(fields[i][0],  1);	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  UnsupportedOperationException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  val.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  val.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)  ==  1)  {  val.add(fields[i][0],  1);	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
16	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalStateException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
17	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)  >=  1)  {  val.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)  >=  1)  {  val.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)  >=  1)  {  val.add(fields[i][0],  1);	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  RuntimeException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   "));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
20	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " "));  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " "));  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " "));  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   "));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
21	[BUG]  [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalStateException( " ");  }	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  IllegalStateException( " ");  }	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  while(fields[i][0]  ==  round)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  round)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  round)  {  throw  new  IllegalStateException( " ");  }	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
26	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)  ==  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
27	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  UnsupportedOperationException( " ");  }	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
28	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwUnsupportedOperationException( " ");	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
29	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSertionFailedError( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwAsSertionFailedError( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwAsSertionFailedError( " ");	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwInternal();	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MONTH)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  roundUp)  {  throw  new  IllegalArgumentException( " ");  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  IllegalArgumentException( " ");  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  val.add(Calendar.DATE,  0,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(Calendar.DATE,  0,  1);  [BUGGY]      return;  }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(Calendar.DATE,  0,  1);	  val.add(Calendar.DATE,    15,    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  val.add(Calendar.DATE,  15,  -15);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  val.add(Calendar.DATE,  15,  -15);  [BUGGY]      return;  }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	val.add(Calendar.DATE,  15,  -15);	  val.add(Calendar.DATE,    15,    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(field));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(field));  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(field));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  val);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  val);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	Throwables.throw  new  IllegalStateException( " ",  val);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  mutables.add(fields[i][0],  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  mutables.add(fields[i][0],  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	mutables.add(fields[i][0],  roundUp)  {  throw  new  IllegalArgumentException( " ");  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
42	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][0]));  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][0]));  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][0]));  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][1]));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][1]));  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  IllegalArgumentException( " ".equalsIgnoreCase(fields[i][1]));  }	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
44	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
46	[BUG]  [BUGGY]  if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalStateException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
47	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.MONTH)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  RuntimeException( " ");  }	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
51	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtException( " ");	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
52	[BUG]  [BUGGY]  mutables.add(fields[i][0],  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  mutables.add(fields[i][0],  1);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	mutables.add(fields[i][0],  1);	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
53	[BUG]  [BUGGY]  mutables.add(val);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  mutables.add(val);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	mutables.add(val);	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
54	[BUG]  [BUGGY]  if(fields[i][1]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][1]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][1]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.DATE)  {  throw  new  UnsupportedOperationException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  safeTruncated();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated();  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated();	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  safeTruncated)  {  throw  new  IllegalStateException( " ".toString());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  safeTruncated)  {  throw  new  IllegalStateException( " ".toString());  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	safeTruncated)  {  throw  new  IllegalStateException( " ".toString());  }	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.DATE)  {  throw  new  RuntimeException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  RuntimeException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwAsOperationException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwAsOperationException( " ");	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
62	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
63	[BUG]  [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	fields[i][0]  ==  Calendar.DATE)  {  throw  new  IllegalStateException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalStateException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
66	[BUG]  [BUGGY]  if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(val.get(Calendar.DATE)  >=  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
67	[BUG]  [BUGGY]  pendingTruncated()  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  pendingTruncated()  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	pendingTruncated()  {  throw  new  UnsupportedOperationException( " ");  }	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  tate.checkState(fields[i][0],  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  tate.checkState(fields[i][0],  roundUp);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	tate.checkState(fields[i][0],  roundUp);	  if(round)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalStateException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " "));  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " "));  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  IllegalFieldValueException( " "));  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   "));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
71	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  [Delete]  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	[Delete]	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(val,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.handleMissingName(val,  field);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.handleMissingName(val,  field);	  if(round)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
74	[BUG]  [BUGGY]  while(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(val.get(Calendar.DATE)!=  1)  {  throw  new  IllegalStateException( " ");  }	  if(val.get(Calendar.DATE)    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  cast(val.getTime(),  field)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  cast(val.getTime(),  field)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	cast(val.getTime(),  field)  {  throw  new  RuntimeException( " ");  }	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
76	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIterable(val,  field);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  aughtExceptionHandler.throwAsIterable(val,  field);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	aughtExceptionHandler.throwAsIterable(val,  field);	  if(round)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  tate.checkState(fields[i][0],  val.get(Calendar.DATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  tate.checkState(fields[i][0],  val.get(Calendar.DATE));  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	tate.checkState(fields[i][0],  val.get(Calendar.DATE));	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  tate.checkState(fields[i][0]  ==  Calendar.DATE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  tate.checkState(fields[i][0]  ==  Calendar.DATE);  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	tate.checkState(fields[i][0]  ==  Calendar.DATE);	  if(round)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	while(fields[i][0]  ==  Calendar.MONTH)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.MONTH)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
80	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalArgumentException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
81	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.HOUR_OF_DAY)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.HOUR_OF_DAY)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.HOUR_OF_DAY)  {  throw  new  RuntimeException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.YEAR)  {  throw  new  UnsupportedOperationException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalFieldValueException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  val.add(Calendar.DATE,  -15);  val.add(Calendar.MONTH,  1);  }  }  else  {    val.add(fields[i][0],  1);  }  }      [BUGGY]  if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalFieldValueException( " ");  }  [BUGGY]      }  }  int  offset  =  0;  boolean  offsetSet  =  false;  switch  (field)  {  case  DateUtils.SEMI_MONTH:  if  (fields[i][0]  ==  Calendar.DATE)  {  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	663	663	1	replace	if(fields[i][0]  ==  Calendar.DATE  ||  fields[i][1]  ==  Calendar.MILLISECOND)  {  throw  new  IllegalFieldValueException( " ");  }	  if(fields[i][0]    ==    Calendar.DATE)    {    throw    new    IllegalFieldValueException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
