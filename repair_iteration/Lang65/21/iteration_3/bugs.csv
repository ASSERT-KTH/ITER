bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  2;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
2	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  1;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
3	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  3;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
4	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0]  +  1)/  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0]  +  1)/  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0]  +  1)/  1);	  val.set(fields[i][0],    val.get(fields[i][0])/    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
5	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset,  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset,  roundUp);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    offset);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  min,  offset  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    offset);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  if(roundUp)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(roundUp)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(roundUp)  {  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  max  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  min;	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  min,  roundUp);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
10	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  min,  offset);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
11	[BUG]  [BUGGY]  val.set(offset,  val.get(fields[i][0])-  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(offset,  val.get(fields[i][0])-  min,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(offset,  val.get(fields[i][0])-  min,  roundUp);	  val.set(offset,    val.get(fields[i][0])-    min);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  1);  }	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
13	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  roundUp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  roundUp);	  val.set(fields[i][0],    val.get(fields[i][1])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
14	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  1);	  val.set(fields[i][0],    val.get(fields[i][1])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
15	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  2  +  1);	  val.set(fields[i][0],    val.get(fields[i][1])/    2);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
16	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  -  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  -  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  -  offset,  roundUp);	  int    field    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
17	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  -  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  -  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  -  roundUp);	  int    field    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
18	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0]  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0]  +  1);	  offset    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
19	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  roundUp;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  roundUp;  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  roundUp;	  offset    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
20	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  2  +  1);	  val.set(fields[i][0],    val.get(fields[i][0])/    2);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
21	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  offset,  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  offset,  roundUp);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0],  offset);	  int    fields[][]    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
23	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0],  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0],  offset);	  int    fields[][]    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
24	[BUG]  [BUGGY]  int[][]  fields  =  val.get(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  fields  =  val.get(fields[i][0],  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  fields  =  val.get(fields[i][0],  offset);	  int    fields[][]    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
25	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0],  offset,  roundUp);	  int    fields[][]    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
26	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
27	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
28	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  offset;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  offset;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
29	[BUG]  [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  min;  }	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
30	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  1;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  <  ((  max  -  min)/  2);  }	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    <    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
32	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
33	[BUG]  [BUGGY]  while(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }	  if(offsetSet)    {    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
34	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
35	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
36	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    field)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  1;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
38	[BUG]  [BUGGY]  if(round)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(round)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(round)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  1;  }	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0]  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0]  +  1);	  int    fields[][]    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  int  field[][]  =  val.get(fields[i][0]  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field[][]  =  val.get(fields[i][0]  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field[][]  =  val.get(fields[i][0]  +  1);	  int    fields[][]    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
42	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
43	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  +  offset,  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
44	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0]  +  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0]  +  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0]  +  offset);	  int    fields[][]    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
45	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  +  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
46	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset,  max);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset,  max);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  offset,  max);	  val.set(fields[i][0],    val.get(fields[i][1])-    offset,    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
50	[BUG]  [BUGGY]  bucketSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  bucketSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	bucketSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
51	[BUG]  [BUGGY]  while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
52	[BUG]  [BUGGY]  while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  max  -  min;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(!offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  max  -  min;  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
53	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0],  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0],  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0],  roundUp);	  int[][]    val    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0]  -  offset);	  int[][]    val    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  offset;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  offset;	  int    field    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
56	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])/  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])/  1;	  int    field    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
57	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
58	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
59	[BUG]  [BUGGY]  while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
60	[BUG]  [BUGGY]  while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(fields[i][0]  <  min  ||  offsetSet)  {  min  =  val.getActualMinimum(fields[i][0]);  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
61	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  -  offset,  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  min);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0]  -  min);	  int    fields[][]    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  roundUp;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  roundUp;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])/  roundUp;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    roundUp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    roundUp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2  +  1);	  offset    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  max;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  max;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])-  max;  }	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
69	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])/  max;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])/  max;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  val.get(fields[i][0])/  max;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
70	[BUG]  [BUGGY]  while(offset  <  min  &&  offset  <  max)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(offset  <  min  &&  offset  <  max)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(offset  <  min  &&  offset  <  max)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
71	[BUG]  [BUGGY]  while(offset  <  min  &&  roundUp  >  max)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(offset  <  min  &&  roundUp  >  max)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(offset  <  min  &&  roundUp  >  max)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
72	[BUG]  [BUGGY]  while(offset  <  min  ||  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(offset  <  min  ||  roundUp)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(offset  <  min  ||  roundUp)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
73	[BUG]  [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min  +  1;	  int    field    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
75	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])/  min;	  int    field    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
76	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  roundUp;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  roundUp;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  roundUp;	  int    field    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
77	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  min,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  -  min,  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
78	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  min,  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  min,  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  -  min,  offset);	  int    fields[][]    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
79	[BUG]  [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int[][]  val  =  val.get(fields[i][0]  -  min,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int[][]  val  =  val.get(fields[i][0]  -  min,  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
80	[BUG]  [BUGGY]  val.set(offset,  val.get(fields[i][0])-  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(offset,  val.get(fields[i][0])-  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(offset,  val.get(fields[i][0])-  roundUp);	  val.set(offset,    val.get(fields[i][0])-    offset);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
81	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  +  1],  roundUp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  +  1],  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  +  1],  roundUp);	  int    field    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  min  +  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  min  +  1;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
83	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])/  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])/  min;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
84	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])/  offset;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])/  offset;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])/  offset;	  offset    =    val.get(fields[i][0])-    offset;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
85	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  offset);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  offset,  roundUp);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
87	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp,  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp,  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  roundUp,  offset);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
88	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  offset  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  offset  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  offset  +  1);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
89	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2.0,  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2.0,  offset);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  2.0,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])/    2.0);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
90	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2.0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2.0);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  2.0);	  val.set(fields[i][0],    val.get(fields[i][0])/    2.0);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
91	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  +  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  +  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  +  roundUp);	  int    field    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  +  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  +  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  +  offset,  roundUp);	  int    field    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  +  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  +  min);	  int    field    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i],  val.get(fields[i][0])-  min);	  val.set(fields[i],    val.get(fields[i][0])    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
95	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  offset,  roundUp);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  offset,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i],  val.get(fields[i][0])-  offset,  roundUp);	  val.set(fields[i],    val.get(fields[i][0])    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
96	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])-  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i],  val.get(fields[i][0])-  roundUp);	  val.set(fields[i],    val.get(fields[i][0])    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
97	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  -  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  -  min,  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  -  min,  roundUp);	  int    field    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
98	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  -  min,  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  -  min,  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  -  min,  offset);	  int    field    =    val.get(fields[i][0]    -    min);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
99	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  1;	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
100	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0])-  min;	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
101	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  (max  -  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  (max  -  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  (max  -  min);	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
102	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  max  -  min;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  max  -  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  max  -  min;	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    max    -    min;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
103	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
104	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  -  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  -  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0],  roundUp  -  offset);	  int    fields[][]    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
105	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  field)/  2);	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    field)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset,  min);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  offset,  min);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  offset,  min);	  val.set(fields[i][0],    val.get(fields[i][1])-    offset,    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
107	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  max  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])-  max;  roundUp  =  offset  >  ((  max  -  min)/  2);	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
108	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2  -  min);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  2  -  min);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  2  -  min);	  val.set(fields[i][0],    val.get(fields[i][1])/    2);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
109	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  1);	  val.set(fields[i][0],    val.get(fields[i][1])/    2);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
110	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  +  ((  max  -  min)/  2);	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
111	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
112	[BUG]  [BUGGY]  if(offset  >=  0)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  0)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  0)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    <    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
113	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0])-  max;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0])-  max;	  offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
114	[BUG]  [BUGGY]  if(offset  >=  min)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  min)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  min)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  if(offset  ==  min)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  ==  min)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  ==  min)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
116	[BUG]  [BUGGY]  if(offset  <  min)  {  throw  new  IllegalArgumentException(fields[i][0]);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  <  min)  {  throw  new  IllegalArgumentException(fields[i][0]);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  <  min)  {  throw  new  IllegalArgumentException(fields[i][0]);  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  -  1);	  int    fields[][]    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0],  roundUp  +  1);	  int    fields[][]    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
119	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])/  MILLIS_PER_SECOND;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])/  MILLIS_PER_SECOND;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min;  offset  =  val.get(fields[i][0])/  MILLIS_PER_SECOND;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])/    min;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
120	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  -  min);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  2  -  min);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  2  -  min);	  val.set(fields[i][0],    val.get(fields[i][0])/    2);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
121	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  3);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  3);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  3);	  val.set(fields[i][0],    val.get(fields[i][1])/    offset);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
122	[BUG]  [BUGGY]  set  <  min  ||  offsetSet  >  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  set  <  min  ||  offsetSet  >  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	set  <  min  ||  offsetSet  >  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
123	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  min,  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  min,  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  min,  roundUp);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
124	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0]  +  min);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0]  +  min);	  offset    =    val.get(fields[i][0]);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
125	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
126	[BUG]  [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  max  =  val.get(fields[i][0])-  min;  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  max  =  val.get(fields[i][0])-  min;	  int    max    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
127	[BUG]  [BUGGY]  int  field[][]  =  val.get(fields[i][0],  offset);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field[][]  =  val.get(fields[i][0],  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field[][]  =  val.get(fields[i][0],  offset);	  int    fields[][]    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
128	[BUG]  [BUGGY]  if(offset  ==  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  ==  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  ==  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  roundUp;  }	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    roundUp;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
129	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp  -  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp  -  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  roundUp  -  offset);	  int    field    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
130	[BUG]  [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
131	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  +  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  +  min);	  int    fields[][]    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
132	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  +  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0],  roundUp  +  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0],  roundUp  +  offset);	  int    fields[][]    =    val.get(fields[i][0]    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
133	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  offset;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  offset;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min  +  offset;	  int    field    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
134	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0]  +  1);  offset  =  val.get(fields[i][0])-  1;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp);  offset  =  val.get(fields[i][0])-  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp);  offset  =  val.get(fields[i][0])-  1;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  roundUp);  offset  =  val.get(fields[i][0])-  1;	  int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
136	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  roundUp  +  1);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  roundUp  +  1);	  int    field    =    val.get(fields[i][0]    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
137	[BUG]  [BUGGY]  offset  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
138	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
139	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  1;  roundUp  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])-  min  +  1;  roundUp  =  val.get(fields[i][0])-  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])-  min  +  1;  roundUp  =  val.get(fields[i][0])-  min;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
140	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  4);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  4);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  4);	  val.set(fields[i][0],    val.get(fields[i][0])/    min);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
141	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  min);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  min);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
142	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0],  max);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0],  max);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0],  max);	  int    field    =    val.get(fields[i][0],    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
143	[BUG]  [BUGGY]  offset  =  val.get(fields[i][0]);  roundUp  =  offset  +  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  offset  =  val.get(fields[i][0]);  roundUp  =  offset  +  ((  max  -  min)/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	offset  =  val.get(fields[i][0]);  roundUp  =  offset  +  ((  max  -  min)/  2);	  offset    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
144	[BUG]  [BUGGY]  else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
145	[BUG]  [BUGGY]  else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	else  if(offsetSet)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  max  -  min;  }	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)    /    2);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
146	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  min;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  min;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  min;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    min;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
147	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  0)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)  /  2);  }	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    field)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
148	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  offset;  }	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
149	[BUG]  [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  fields[i][0]  =  val.get(fields[i][0]);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	fields[i][0]  =  val.get(fields[i][0]);	  if(round)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    offset;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
150	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])-  min  +  1);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])-  min  +  1);	  val.set(fields[i][0],    val.get(fields[i][1])-    min);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
151	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  min,  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])/  min,  offset);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])/  min,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    offset);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
152	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  round,  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0])-  round,  offset);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0])-  round,  offset);	  val.set(fields[i][0],    val.get(fields[i][0])-    min,    offset);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
153	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1]),  roundUp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1]),  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1]),  roundUp);	  val.set(fields[i][0],    val.get(fields[i][1])/    2);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
154	[BUG]  [BUGGY]  if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(fields[i][0]  ==  field)  {  int  field  =  val.get(fields[i][0]);  offset  =  val.get(fields[i][0])-  min;  }	  if(offsetSet)    {    int    field    =    val.get(fields[i][0]);    offset    =    val.get(fields[i][0])-    min;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
155	[BUG]  [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  max;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  max;  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field  =  val.get(fields[i][0])/  min;  roundUp  =  val.get(fields[i][0])-  max;	  int    field    =    val.get(fields[i][0])-    min;    roundUp    =    val.get(fields[i][0])-    max;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
156	[BUG]  [BUGGY]  if(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  <  min)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    <    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
157	[BUG]  [BUGGY]  roundUp  =  offset  >  ((  max  -  min)/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  roundUp  =  offset  >  ((  max  -  min)/  2);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	roundUp  =  offset  >  ((  max  -  min)/  2);	  offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    <    ((    max    -    min)/    2);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
158	[BUG]  [BUGGY]  int  field[][]  =  val.get(fields[i][0]  -  min);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  field[][]  =  val.get(fields[i][0]  -  min);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  field[][]  =  val.get(fields[i][0]  -  min);	  int    fields[][]    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
159	[BUG]  [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  roundUp);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  int  fields[][]  =  val.get(fields[i][0]  -  roundUp);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	int  fields[][]  =  val.get(fields[i][0]  -  roundUp);	  int    fields[][]    =    val.get(fields[i][0]    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
160	[BUG]  [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	while(offset  <  min)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    min)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
161	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])/  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])/  2);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i],  val.get(fields[i][0])/  2);	  val.set(fields[i][0],    val.get(fields[i][0])/    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
162	[BUG]  [BUGGY]  else  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  else  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	else  if(offsetSet)  {  offset  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    offset    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
163	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  roundUp,  roundUp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][1])/  roundUp,  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][1])/  roundUp,  roundUp);	  val.set(fields[i][0],    val.get(fields[i][1])-    offset,    roundUp);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
164	[BUG]  [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0]),  roundUp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i][0],  val.get(fields[i][0]),  roundUp);  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i][0],  val.get(fields[i][0]),  roundUp);	  val.set(fields[i][0],    val.get(fields[i][0])/    3);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
165	[BUG]  [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
166	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0]);  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0]);    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
167	[BUG]  [BUGGY]  val.set(fields[i],  val.get(fields[i][0])/  offset);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  val.set(fields[i],  val.get(fields[i][0])/  offset);  [BUGGY]      val.set(fields[i][0],  val.get(fields[i][0])  -  offset);  }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	val.set(fields[i],  val.get(fields[i][0])/  offset);	  val.set(fields[i],    val.get(fields[i][0])    -    offset);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
168	[BUG]  [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  <  min)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
169	[BUG]  [BUGGY]  if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!offsetSet)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.getActualMaximum(fields[i][0]);  offset  =  val.get(fields[i][0])  -  min;  roundUp  =  offset  >  ((max  -  min)  /  2);  }        [BUGGY]  if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }  [BUGGY]      }  throw  new  IllegalArgumentException(     "The  field       "  +  field  +       "  is  not  supported     ");  }  [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	709	709	1	replace	if(offset  >=  0)  {  int  min  =  val.getActualMinimum(fields[i][0]);  int  max  =  val.get(fields[i][0])-  min;  roundUp  =  offset  >  ((  max  -  min)/  2);  }	  if(offsetSet)    {    int    min    =    val.getActualMinimum(fields[i][0]);    int    max    =    val.get(fields[i][0])-    min;    roundUp    =    offset    >    ((    max    -    min)/    2);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
