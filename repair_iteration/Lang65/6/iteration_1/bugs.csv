bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    val.set(Calendar.YEAR,  field,  round);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    val.set(Calendar.YEAR,  field,  round);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    val.set(Calendar.YEAR,  field,  round);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
2	[BUG]  [BUGGY]    val.set(Calendar.DAY_OF_MONTH,  field,  round);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    val.set(Calendar.DAY_OF_MONTH,  field,  round);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    val.set(Calendar.DAY_OF_MONTH,  field,  round);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
3	[BUG]  [BUGGY]    int[][]  fields  =  val.get(Calendar.YEAR);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    int[][]  fields  =  val.get(Calendar.YEAR);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    int[][]  fields  =  val.get(Calendar.YEAR);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
4	[BUG]  [BUGGY]    val.set(Calendar.MONTH,  field,  round);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    val.set(Calendar.MONTH,  field,  round);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    val.set(Calendar.MONTH,  field,  round);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
5	[BUG]  [BUGGY]    int[][]  fields  =  val.get(Calendar.SECOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    int[][]  fields  =  val.get(Calendar.SECOND);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    int[][]  fields  =  val.get(Calendar.SECOND);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
6	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  280000000)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  280000000)  {  [BUGGY]  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  280000000)  {	if  (val.get(Calendar.YEAR)  >  280000000)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]  if  (val.get(Calendar.YEAR)>  0)  {  [BUGGY]  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  0)  {	if  (val.get(Calendar.YEAR)  >  280000000)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  310000000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]  if  (val.get(Calendar.YEAR)>  310000000)  {  [BUGGY]  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  310000000)  {	if  (val.get(Calendar.YEAR)  >  280000000)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]    val.set(Calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    val.set(Calendar.YEAR,  field);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    val.set(Calendar.YEAR,  field);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
10	[BUG]  [BUGGY]    int[][]  fields  =  val.getValues();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    int[][]  fields  =  val.getValues();  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    int[][]  fields  =  val.getValues();		non-compiled	[CE]  illegal  start  of  expression	12	None	add
11	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  280000000)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]  if(val.get(Calendar.YEAR)!=  280000000)  {  [BUGGY]  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)!=  280000000)  {	if  (val.get(Calendar.YEAR)  >  280000000)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]    val.set(Calendar.MILLISECOND,  round);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]    val.set(Calendar.MILLISECOND,  round);  [BUGGY]  if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	    val.set(Calendar.MILLISECOND,  round);		non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  280000000)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {  [BUGGY]  if(val.get(Calendar.YEAR)  >=  280000000)  {  [BUGGY]  throw  new  ArithmeticException( "Calendar  value  too  large  for  accurate  calculations ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  280000000)  {	if  (val.get(Calendar.YEAR)  >  280000000)  {  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
