bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  round);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)+  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)+  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH)-  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.MONTH)-  1;	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.MONTH,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.MONTH,  field);	  int[][]    fields    =    val.get(Calendar.MONTH);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  val.set(0,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(0,  field);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
6	[BUG]  [BUGGY]  val.set(0,  field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(0,  field,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
7	[BUG]  [BUGGY]  val.set(0,  field  +  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0,  field  +  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(0,  field  +  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
8	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  0,  round  -  1);	  val.set(Calendar.MONTH,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  0,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  0,  round  +  1);	  val.set(Calendar.MONTH,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  round)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  round)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  round)  {	  if    (val.get(Calendar.YEAR)>    1)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  2);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  2);	  val.set(Calendar.MONTH,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  int[][]  fields  =  field.getFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  field.getFields();  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  field.getFields();	  int[][]    fields    =    field.getValues();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
13	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  3100000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  3100000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  3100000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  300000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  300000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  300000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  2500000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  2500000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  2500000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  val.set(FieldUtils.MILLISECOND,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(FieldUtils.MILLISECOND,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(FieldUtils.MILLISECOND,  field);	  val.set(FieldUtils.MILLISECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
17	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  250000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  250000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  250000000)  {	  if(val.get(Calendar.YEAR)!=    250000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
18	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  250000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  ==  250000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  ==  250000000)  {	  if(val.get(Calendar.YEAR)!=    250000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
19	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  250000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  250000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  250000000)  {	  if(val.get(Calendar.YEAR)!=    250000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
20	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  field  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MILLISECOND,  field  -  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
21	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MILLISECOND,  field  +  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
22	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.YEAR,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  Calendar.YEAR,  round);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  val.set(val,  Calendar.YEAR,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(val,  Calendar.YEAR,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(val,  Calendar.YEAR,  round);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  field)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  ==  field)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  ==  field)  {	  if(val.get(Calendar.YEAR)>    field)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
25	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  field)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)!=  field)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)!=  field)  {	  if(val.get(Calendar.YEAR)>    field)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
26	[BUG]  [BUGGY]  if(field.get(Calendar.YEAR)>  val.get(Calendar.YEAR))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(field.get(Calendar.YEAR)>  val.get(Calendar.YEAR))  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(field.get(Calendar.YEAR)>  val.get(Calendar.YEAR))  {	  if(val.get(Calendar.YEAR)>    field)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
27	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  field)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  field)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  field)  {	  if(val.get(Calendar.YEAR)>    field)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
28	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  round  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  int[][]  fields  =  val.get(field  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(field  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  2;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
31	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  3;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
32	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)/  1;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
33	[BUG]  [BUGGY]  if  (val.get(Calendar.MONTH)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.MONTH)  ==  0)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.MONTH)  ==  0)  {	  if    (val.get(Calendar.YEAR)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
34	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  0,  round  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  0,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  0,  round  -  1);	  val.set(Calendar.YEAR,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
35	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  0,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  0,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  0,  round  +  1);	  val.set(Calendar.YEAR,    field,    0,    round);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
36	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  int[][]  fields  =  val.get(field,  round);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(field,  round);	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  50000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  50000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  50000000)  {	  if    (val.get(Calendar.YEAR)>    50000000)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
40	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  MILLIS_PER_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  MILLIS_PER_MONTH)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  MILLIS_PER_MONTH)  {	  if    (val.get(Calendar.YEAR)>    50000000)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
41	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  0);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  0);	  val.set(Calendar.DAY_OF_MONTH,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
42	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  2);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  2);	  val.set(Calendar.DAY_OF_MONTH,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
43	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  2;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  2;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  3;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  3;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)/  1;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)/  1;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  1000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  1000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  1000)  {	  if(val.get(Calendar.YEAR)    >=    1000)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
47	[BUG]  [BUGGY]  int[][]  fields  =  val.getValues(field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getValues(field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.getValues(field,  round);	  int[][]    fields    =    val.getValues(field);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
48	[BUG]  [BUGGY]  int[][]  fields  =  val.getFields(field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getFields(field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.getFields(field);	  int[][]    fields    =    val.getValues(field);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
49	[BUG]  [BUGGY]  int[][]  fields  =  val.getCalendarFields(field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getCalendarFields(field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.getCalendarFields(field);	  int[][]    fields    =    val.getValues(field);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
50	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR,  field  +  1);	  int[][]    fields    =    val.get(Calendar.YEAR,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  2);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  2);	  val.set(Calendar.YEAR,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
54	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  3);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  3);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  3);	  val.set(Calendar.YEAR,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
55	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  round,  field);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  round,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  round,  field);	  val.set(Calendar.DAY_OF_MONTH,    field,    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  round  -  1  -  1);	  val.set(Calendar.MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  round  -  1  +  1);	  val.set(Calendar.MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  100000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  100000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  100000)  {	  if    (val.get(Calendar.YEAR)    ==    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  100000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  100000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  100000)  {	  if(val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
60	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  +  1,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field  +  1,  round);	  val.set(Calendar.YEAR,    field    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
61	[BUG]  [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.MILLISECOND);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  Calendar.MILLISECOND);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
62	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  1);	  val.set(Calendar.DAY_OF_MONTH,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
63	[BUG]  [BUGGY]  val.set(field,  round  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  round  +  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
64	[BUG]  [BUGGY]  val.set(field,  field,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  field,  round);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
65	[BUG]  [BUGGY]  val.set(field,  round,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  round,  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
66	[BUG]  [BUGGY]  val.set(field,  offsetSet,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  offsetSet,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  offsetSet,  round);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
67	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  round  -  1,  1);	  val.set(Calendar.YEAR,    field,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
68	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  round  +  1);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND  +  1,  round);	  int[][]    fields    =    val.get(Calendar.SECOND    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  int[][]  fields  =  val.get(calendar.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(calendar.YEAR,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(calendar.YEAR,  field);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  int[][]  fields  =  val.getFields(field,  round);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getFields(field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.getFields(field,  round);	  int[][]    fields    =    val.getFields();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
72	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.YEAR,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  Calendar.YEAR,  1);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  val.set(0L,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(0L,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(0L,  field);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  3);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  3);	  int[][]    fields    =    val.get(Calendar.YEAR    +    1);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
75	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  ==  2800000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  ==  2800000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  ==  2800000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  2800000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  2800000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  2800000000)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field  -  1);	  val.set(Calendar.YEAR,    field    +    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
78	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  100000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)!=  100000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)!=  100000)  {	  if(val.get(Calendar.YEAR)>    100000)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
79	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  10000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  10000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  >=  10000000)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
80	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  DateUtils.SEMI_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  DateUtils.SEMI_MONTH)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  DateUtils.SEMI_MONTH)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
81	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_MONTH)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_MONTH)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
82	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  50000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  50000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  >=  50000000)  {	  if    (val.get(Calendar.YEAR)>    50000000)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
83	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  0)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)>  50000000  ||  round  >  0)  {	  if    (val.get(Calendar.YEAR)>    50000000)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
84	[BUG]  [BUGGY]  val.set(field,  round  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  round  -  1);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
85	[BUG]  [BUGGY]  val.set(field,  offsetSet);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  offsetSet);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  offsetSet);	  val.set(field,    round);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  >=  1000000)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  >=  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  >=  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
87	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  1000000)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  1000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)!=  1000000)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
88	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR  +  1,  round);	  int[][]    fields    =    val.get(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  10000000  ||  round  >  fields.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  10000000  ||  round  >  fields.length)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  10000000  ||  round  >  fields.length)  {	  if    (val.get(Calendar.YEAR)    ==    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)  ==  0  ||  round  >  fields.length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)  ==  0  ||  round  >  fields.length)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)  ==  0  ||  round  >  fields.length)  {	  if    (val.get(Calendar.YEAR)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  val.set(FieldUtils.DAY_OF_MONTH,  field,  round);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(FieldUtils.DAY_OF_MONTH,  field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(FieldUtils.DAY_OF_MONTH,  field,  round);	  val.set(Calendar.DAY_OF_MONTH,    field,    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
92	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  fields,  round);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  fields,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  fields,  round);	  val.set(Calendar.DAY_OF_MONTH,    field,    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
93	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  25000000)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)!=  25000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)!=  25000000)  {	  if(val.get(Calendar.YEAR)!=    250000000)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
94	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  4;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND)+  4;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND)+  4;	  int[][]    fields    =    val.get(Calendar.SECOND)+    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  int[][]  fields  =  val.getCalendarFields(field,  round);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.getCalendarFields(field,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.getCalendarFields(field,  round);	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
96	[BUG]  [BUGGY]  int[][]  fields  =  this.val.getValues();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  this.val.getValues();  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  this.val.getValues();	  int[][]    fields    =    field.getValues();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
97	[BUG]  [BUGGY]  val.set(FieldUtils.MILLISECOND,  round  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(FieldUtils.MILLISECOND,  round  -  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(FieldUtils.MILLISECOND,  round  -  1);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
98	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  4;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.YEAR)+  4;  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.YEAR)+  4;	  int[][]    fields    =    val.get(Calendar.YEAR)+    1;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
99	[BUG]  [BUGGY]  val.set(FieldType.YEAR,  field);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(FieldType.YEAR,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(FieldType.YEAR,  field);	  val.set(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
100	[BUG]  [BUGGY]  if  (val.get(Calendar.YEAR)!=  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if  (val.get(Calendar.YEAR)!=  1)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if  (val.get(Calendar.YEAR)!=  1)  {	  if    (val.get(Calendar.YEAR)    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
101	[BUG]  [BUGGY]  int[][]  fields  =  this.field.getValues();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  this.field.getValues();  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  this.field.getValues();	  int[][]    fields    =    field.getValues();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
102	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MILLISECOND,  round  +  1);	  val.set(Calendar.MILLISECOND,    field);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
103	[BUG]  [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(Calendar.SECOND,  field));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(Calendar.SECOND,  field));	  int[][]    fields    =    val.get(Calendar.SECOND,    round);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  val.set(1,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(1,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(1,  round);	  val.set(0,    round);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
105	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)  >=  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)  >=  1)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)  >=  1)  {	  if    (val.get(Calendar.YEAR)>    1)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.YEAR,  field,  round  -  1,  round  +  1);	  val.set(Calendar.YEAR,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
107	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  round  -  1,  round  +  1);	  val.set(Calendar.MONTH,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
108	[BUG]  [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MONTH,  field,  round  -  1,  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MONTH,  field,  round  -  1,  1);	  val.set(Calendar.MONTH,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
109	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  100)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  100)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  100)  {	  if(val.get(Calendar.YEAR)    >=    1000)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  val.set(FieldUtils.SEMI_MONTH,  round);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(FieldUtils.SEMI_MONTH,  round);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(FieldUtils.SEMI_MONTH,  round);	  val.set(Calendar.YEAR,    round);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
111	[BUG]  [BUGGY]  int[][]  fields  =  val.get(CalendarFields.MILLIS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  int[][]  fields  =  val.get(CalendarFields.MILLIS_PER_SECOND);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	int[][]  fields  =  val.get(CalendarFields.MILLIS_PER_SECOND);	  int[][]    fields    =    val.getCalendarFields();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
112	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)!=  10000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)!=  10000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)!=  10000000)  {	  if    (val.get(Calendar.YEAR)    ==    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  3);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  3);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  3);	  val.set(Calendar.DAY_OF_MONTH,    field,    1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
114	[BUG]  [BUGGY]  val.set(field,  Calendar.YEAR,  2);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(field,  Calendar.YEAR,  2);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(field,  Calendar.YEAR,  2);	  val.set(field,    Calendar.YEAR);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
115	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  round  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  round  +  1);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  round  -  1,  round  +  1);	  val.set(Calendar.DAY_OF_MONTH,    field,    round    +    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
116	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_MONTH)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_MONTH)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_MONTH)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
117	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_DAY)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  1000000  ||  round  >  MILLIS_PER_DAY)  {	  if    (val.get(Calendar.YEAR)>    1000000)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
118	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  9999)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  9999)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  9999)  {	  if(val.get(Calendar.YEAR)>    2800000000)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
119	[BUG]  [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.DAY_OF_MONTH,  field,  round));  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.DAY_OF_MONTH,  field,  round));	  val.set(Calendar.DAY_OF_MONTH,    field,    offsetSet);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  val.set(Calendar.MILLISECOND,  round  -  1,  field);  [BUGGY]      if  (val.get(Calendar.YEAR)  >  280000000)  {  throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	val.set(Calendar.MILLISECOND,  round  -  1,  field);	  val.set(Calendar.MILLISECOND,    round    -    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
121	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_DAY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_DAY)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  10000000  ||  round  >  MILLIS_PER_DAY)  {	  if    (val.get(Calendar.YEAR)>    10000000)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
122	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  30000000)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  30000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  30000000)  {	  if    (val.get(Calendar.YEAR)    ==    310000000)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  if(val.get(Calendar.YEAR)>  50000000  ||  round  >  50000000)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  void  modify(Calendar  val,  int  field,  boolean  round)  {      [BUGGY]  if(val.get(Calendar.YEAR)>  50000000  ||  round  >  50000000)  {  [BUGGY]      throw  new  ArithmeticException(     "Calendar  value  too  large  for  accurate  calculations     ");  }        [CLASS]  DateUtils  DateIterator  [METHOD]  modify  [RETURN_TYPE]  void  Calendar  val  int  field  boolean  round  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  offsetSet  round  roundUp  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MILLIS_IN_DAY  MILLIS_IN_HOUR  MILLIS_IN_MINUTE  MILLIS_IN_SECOND  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  amount  calendarField  field  i  j  max  min  offset  Calendar  c  cal1  cal2  date  endFinal  gval  rounded  spot  startFinal  truncated  val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	if(val.get(Calendar.YEAR)>  50000000  ||  round  >  50000000)  {	  if    (val.get(Calendar.YEAR)>    50000000)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
