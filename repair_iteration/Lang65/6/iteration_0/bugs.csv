bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
11	[BUG] [BUGGY] if (val.get(Calendar.YEAR) > 280000000) { [FE] AssertionFailedError [CONTEXT] private static void modify(Calendar val, int field, boolean round) { [BUGGY] if (val.get(Calendar.YEAR) > 280000000) { [BUGGY] throw new ArithmeticException("Calendar value too large for accurate calculations"); }        [CLASS] DateUtils DateIterator [METHOD] modify [RETURN_TYPE] void  Calendar val int field boolean round [VARIABLES] TimeZone UTC_TIME_ZONE int[][] fields boolean offsetSet round roundUp long MILLIS_PER_DAY MILLIS_PER_HOUR MILLIS_PER_MINUTE MILLIS_PER_SECOND int MILLIS_IN_DAY MILLIS_IN_HOUR MILLIS_IN_MINUTE MILLIS_IN_SECOND RANGE_MONTH_MONDAY RANGE_MONTH_SUNDAY RANGE_WEEK_CENTER RANGE_WEEK_MONDAY RANGE_WEEK_RELATIVE RANGE_WEEK_SUNDAY SEMI_MONTH amount calendarField field i j max min offset Calendar c cal1 cal2 date endFinal gval rounded spot startFinal truncated val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static void modify(Calendar val, int field, boolean round) { [BUGGY] [BUGGY] if (val.get(Calendar.YEAR) > 280000000) { throw new ArithmeticException("Calendar value too large for accurate calculations"); }        [CLASS] DateUtils DateIterator [METHOD] modify [RETURN_TYPE] void  Calendar val int field boolean round [VARIABLES] TimeZone UTC_TIME_ZONE int[][] fields boolean offsetSet round roundUp long MILLIS_PER_DAY MILLIS_PER_HOUR MILLIS_PER_MINUTE MILLIS_PER_SECOND int MILLIS_IN_DAY MILLIS_IN_HOUR MILLIS_IN_MINUTE MILLIS_IN_SECOND RANGE_MONTH_MONDAY RANGE_MONTH_SUNDAY RANGE_WEEK_CENTER RANGE_WEEK_MONDAY RANGE_WEEK_RELATIVE RANGE_WEEK_SUNDAY SEMI_MONTH amount calendarField field i j max min offset Calendar c cal1 cal2 date endFinal gval rounded spot startFinal truncated val  	projects/Lang65/src/java/org/apache/commons/lang/time/DateUtils.java	0.4472135954999579	620	620	1	add	
