bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    String  ch  =  token.substring(i  +  1);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    String  ch  =  token.substring(i  +  1);  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    String  ch  =  token.substring(i  +  1);		non-compiled	[CE]  	12	None	add
2	[BUG]  [BUGGY]    String  ch  =  token.substring(i);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    String  ch  =  token.substring(i);  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    String  ch  =  token.substring(i);		non-compiled	[CE]  	12	None	add
3	[BUG]  [BUGGY]    String  ch  =  token.substring(i  +  1,  token.length());  [CE]  [FE]        AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    String  ch  =  token.substring(i  +  1,  token.length());  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    String  ch  =  token.substring(i  +  1,  token.length());		non-compiled	[CE]  	12	None	add
4	[BUG]  [BUGGY]    tokens.add(token.substring(i  +  1));  [CE]  [FE]          AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    tokens.add(token.substring(i  +  1));  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    tokens.add(token.substring(i  +  1));		non-compiled	[CE]  	12	None	add
5	[BUG]  [BUGGY]    String  ch  =  token.substring(i).trim();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    String  ch  =  token.substring(i).trim();  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    String  ch  =  token.substring(i).trim();		non-compiled	[CE]  	12	None	add
6	[BUG]  [BUGGY]  String  ch  =  token.charAt(i);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]  String  ch  =  token.charAt(i);  [BUGGY]    if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.charAt(i);	String  ch  =  String.valueOf(token.charAt(i));  	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  char  ch  =  token.charAt(i);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]  char  ch  =  token.charAt(i);  [BUGGY]    if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	char  ch  =  token.charAt(i);	String  ch  =  String.valueOf(token.charAt(i));  	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1));  [BUGGY]    if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  String.valueOf(token.charAt(i  +  1));	String  ch  =  String.valueOf(token.charAt(i));  	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]    ch  =  token.charAt(i);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    ch  =  token.charAt(i);  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    ch  =  token.charAt(i);		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]    tokens.add(token.substring(i));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    tokens.add(token.substring(i));  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    tokens.add(token.substring(i));		non-compiled	[CE]  	12	None	add
12	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  continue;  }  [CE]  [FE]        AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  continue;  }  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  continue;  }		non-compiled	[CE]  	12	None	add
13	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  return;  }  [CE]  [FE]          AssertionFailedError  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  return;  }  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	    if(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  return;  }		non-compiled	[CE]  	12	None	add
