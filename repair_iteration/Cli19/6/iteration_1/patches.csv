bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  ch  =  token.substring(0,  i);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(0,  i);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(0,  i);	      String    ch    =    token.substring(i);    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()).trim();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()).trim();  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  token.length()).trim();	      String    ch    =    token.substring(i).trim();    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1).trim();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1).trim();  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1).trim();	      String    ch    =    token.substring(i).trim();    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i,  i));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i,  i));	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i,  i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add( "- "  +  token.substring(i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add( "- "  +  token.substring(i));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add( "- "  +  token.substring(i));	      tokens.add(token.substring(i));    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  continue;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  continue;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i  +  1));  continue;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    continue;    }    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  tokens.add(token.substring(i));  continue;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i));  continue;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i));  continue;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    continue;    }    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  continue;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i,  i));  continue;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i,  i));  continue;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    continue;    }    	non-compiled	[CE]  	12	None	replace
12	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  2);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  2);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  2);	      String    ch    =    token.substring(i    +    1);    	non-compiled	[CE]  	1	None	replace
13	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  3);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  3);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  3);	      String    ch    =    token.substring(i    +    1);    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  char  ch  =  token.charAt(i  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  char  ch  =  token.charAt(i  +  1);  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	char  ch  =  token.charAt(i  +  1);	  char    ch    =    token.charAt(i);    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  char  ch  =  token.charAt(i)+  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  char  ch  =  token.charAt(i)+  1;  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	char  ch  =  token.charAt(i)+  1;	  char    ch    =    token.charAt(i);    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  String  ch  =  token.charAt(i  +  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.charAt(i  +  1);  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.charAt(i  +  1);	  String    ch    =    token.charAt(i);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  ch  =  token.charAt(i  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  ch  =  token.charAt(i  +  1);  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	ch  =  token.charAt(i  +  1);	  String    ch    =    token.charAt(i);    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  return;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i  +  1));  return;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i  +  1));  return;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    return;    }    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(i));  return;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i));  return;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i));  return;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    return;    }    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  return;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(i,  i));  return;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(i,  i));  return;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    return;    }    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  ch  =  token.substring(i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  ch  =  token.substring(i);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	ch  =  token.substring(i);	      ch    =    token.charAt(i);    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  ch  =  token.charAt(0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  ch  =  token.charAt(0);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	ch  =  token.charAt(0);	      ch    =    token.charAt(i);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  1);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  1);	      String    ch    =    token.substring(i    +    1,    token.length());    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  2);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  2);	      String    ch    =    token.substring(i    +    1,    token.length());    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  +  1);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  +  1);	      String    ch    =    token.substring(i    +    1,    token.length());    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  Option  options  =  options.getOption(i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  Option  options  =  options.getOption(i);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	Option  options  =  options.getOption(i);	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)+  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  String.valueOf(token.charAt(i  +  1)+  1);  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  String.valueOf(token.charAt(i  +  1)+  1);	  String    ch    =    String.valueOf(token.charAt(i    +    1));    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  String  ch  =  token.charAt(i).trim();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.charAt(i).trim();  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.charAt(i).trim();	      String    ch    =    token.substring(i).trim();    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  i);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  i);	      String    ch    =    token.substring(i    +    1);    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  i  +  1);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  i  +  1);	      String    ch    =    token.substring(i    +    1);    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  3);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  token.length()  -  3);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  token.length()  -  3);	      String    ch    =    token.substring(i    +    1,    token.length());    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  ch  =  token.charAt(i)+  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  ch  =  token.charAt(i)+  1;  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	ch  =  token.charAt(i)+  1;	      ch    =    token.charAt(i);    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  String  ch  =  token.substring(i  +  1,  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.substring(i  +  1,  1);  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.substring(i  +  1,  1);	      String    ch    =    token.substring(i);    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  char  ch  =  token.charAt(0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  char  ch  =  token.charAt(0);  [BUGGY]      if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	char  ch  =  token.charAt(0);	  char    ch    =    token.charAt(i);    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  tokens.add(token.substring(0,  i));  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	tokens.add(token.substring(0,  i));	      tokens.add(token.substring(i));    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  String  ch  =  token.charAt(i  +  1,  token.length());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {    [BUGGY]  String  ch  =  token.charAt(i  +  1,  token.length());  [BUGGY]    String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	271	271	1	replace	String  ch  =  token.charAt(i  +  1,  token.length());	      String    ch    =    token.substring(i    +    1,    token.length());    	non-compiled	[CE]  	3	None	replace
