bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  tokens  =  this.options.getValues();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  this.options.getValues();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  this.options.getValues();	  Option    tokens    =    this.options.getOptions();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
2	[BUG]  [BUGGY]  Option  tokens  =  this.options.getOptions(this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  this.options.getOptions(this);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  this.options.getOptions(this);	  Option    tokens    =    this.options.getOptions();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
3	[BUG]  [BUGGY]  Option  tokens  =  this.options.getOwnerOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  this.options.getOwnerOptions();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  this.options.getOwnerOptions();	  Option    tokens    =    this.options.getOptions();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
4	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  This.eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  This.eatTheRest  =  false;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	This.eatTheRest  =  false;	  this.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options,  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(this.options,  options);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options,  currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options,  currentOption);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(this.options,  currentOption);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
10	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  LinkedList  <  Option>(options);	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
11	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(options,  options.size());	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
12	[BUG]  [BUGGY]  tokens  =  Lists.newHashSet();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newHashSet();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newHashSet();	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
13	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(this));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(this));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newLinkedList(Arrays.asList(this));	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
14	[BUG]  [BUGGY]  tokens  =  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.EMPTY_LIST;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Collections.EMPTY_LIST;	  tokens    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
15	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(options,  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(options,  currentOption);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(options,  currentOption);	  tokens    =    Lists.newArrayList(options);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
16	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(options,  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(options,  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(options,  options);	  tokens    =    Lists.newArrayList(options);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
17	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
18	[BUG]  [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(this.options!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
19	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
20	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
21	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
22	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
23	[BUG]  [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  ==  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  ==  0;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null  &&  tokens.size()  ==  0;	  ||    currentOption!=    null    &&    tokens.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
24	[BUG]  [BUGGY]  ||  tokens!=  null  &&  currentOption.size()  >  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  tokens!=  null  &&  currentOption.size()  >  0;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  tokens!=  null  &&  currentOption.size()  >  0;	  ||    currentOption!=    null    &&    tokens.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
25	[BUG]  [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  >=  0;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  >=  0;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null  &&  tokens.size()  >=  0;	  ||    currentOption!=    null    &&    tokens.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
26	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(options.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
27	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(options.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
28	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  LinkedList  <  Option>(options.size());	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
29	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(this,  currentOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(this,  currentOption);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(this,  currentOption);	  Option    tokens    =    options.getOptions(this);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(this,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(this,  true);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(this,  true);	  Option    tokens    =    options.getOptions(this);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(this,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(this,  false);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(this,  false);	  Option    tokens    =    options.getOptions(this);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(size()  -  1);	  tokens    =    Lists.newArrayList(size());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
34	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size()  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(size()  +  1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(size()  +  1);	  tokens    =    Lists.newArrayList(size());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
35	[BUG]  [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
36	[BUG]  [BUGGY]  While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
37	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	While(!eatTheRest)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
38	[BUG]  [BUGGY]  options.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  options.clear();  currentOption  =  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	options.clear();  currentOption  =  null;	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
39	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(tokens    ==    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(tokens    ==    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  &&  currentOption  ==  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  &&  currentOption  ==  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	&&  currentOption  ==  null;	  &&    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
42	[BUG]  [BUGGY]  &&  currentOption  >=  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  &&  currentOption  >=  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	&&  currentOption  >=  null;	  &&    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
43	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  LinkedList  <  Option>();  currentOption  =  null;	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
44	[BUG]  [BUGGY]  eatTheRest  =  new  ArrayList  <  Option>();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  new  ArrayList  <  Option>();  currentOption  =  null;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	eatTheRest  =  new  ArrayList  <  Option>();  currentOption  =  null;	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
45	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayListWithCapacity(size());	  tokens    =    Lists.newArrayListWithCapacity(size()    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
46	[BUG]  [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
47	[BUG]  [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	While(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
48	[BUG]  [BUGGY]  While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	While(!eatTheRest  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
49	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
50	[BUG]  [BUGGY]  if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
51	[BUG]  [BUGGY]  Option  tokens  =  currentOption.getOwnerOptions();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  currentOption.getOwnerOptions();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  currentOption.getOwnerOptions();	  Option    tokens    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  Option  tokens  =  currentOption.getParent();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  currentOption.getParent();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  currentOption.getParent();	  Option    tokens    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  Option  tokens  =  currentOption.getStandardOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  currentOption.getStandardOptions();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  currentOption.getStandardOptions();	  Option    tokens    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(false);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(false);	  Option    tokens    =    options.getOptions(true);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
55	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(false,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(false,  true);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(false,  true);	  Option    tokens    =    options.getOptions(true);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(false,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(false,  false);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(false,  false);	  Option    tokens    =    options.getOptions(true);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(true,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(true,  false);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(true,  false);	  Option    tokens    =    options.getOptions(true);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  tokens  =  new  LinkedList();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  LinkedList();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
59	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  java.util.ArrayList();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
60	[BUG]  [BUGGY]  ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	ArrayList  <  Option>  tokens  =  new  ArrayList  <  Option>();	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
61	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  java.util.ArrayList  <  Option>(1);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
62	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(size());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  java.util.ArrayList  <  Option>(size());	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
63	[BUG]  [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  eatTheRest)  {  eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
64	[BUG]  [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
65	[BUG]  [BUGGY]  ||  eatTheRest)  {  this.eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  eatTheRest)  {  this.eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  eatTheRest)  {  this.eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
66	[BUG]  [BUGGY]  currentOption  =  options;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  currentOption  =  options;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	currentOption  =  options;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
67	[BUG]  [BUGGY]  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  currentOption  =  new  Option();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	currentOption  =  new  Option();	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
68	[BUG]  [BUGGY]  currentOption  =  option;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  currentOption  =  option;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	currentOption  =  option;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "null ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
70	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
71	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
72	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.clear();  currentOption  =  new  Option(this,  options);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
73	[BUG]  [BUGGY]  options.clear();  currentOption  =  new  Option(this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  options.clear();  currentOption  =  new  Option(this);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	options.clear();  currentOption  =  new  Option(this);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
74	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.clear();  currentOption  =  new  Option(tokens);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
75	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
76	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
79	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
80	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
81	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
82	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
83	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
84	[BUG]  [BUGGY]  eatTheRest  =  this;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  this;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	eatTheRest  =  this;	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
85	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    options    =    null;    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
86	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.remove();  }  else  {  options  =  null;  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.remove();  }  else  {  options  =  null;  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.remove();  }  else  {  options  =  null;  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    options    =    null;    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
87	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(1);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(1);	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
88	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(2);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(2);	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
89	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
90	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(tokens  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
91	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
92	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
93	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  LinkedList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
94	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
95	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
96	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  if(eatTheRest!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
97	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
98	[BUG]  [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(this.options!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
99	[BUG]  [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(this.options  ==  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
100	[BUG]  [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(this.options  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(this.options!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
101	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
102	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove(0);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove(0);  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.remove(0);  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  Iterator  <  Option>  tokens  =  options.iterator().next();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Iterator  <  Option>  tokens  =  options.iterator().next();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Iterator  <  Option>  tokens  =  options.iterator().next();	  This.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
104	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
105	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.remove();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
106	[BUG]  [BUGGY]  this.eattheRest  =  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  this.eattheRest  =  false;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	this.eattheRest  =  false;	  this.eattheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  TreeSet  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
108	[BUG]  [BUGGY]  tokens  =  new  TreeMap  <  Option>();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  TreeMap  <  Option>();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  TreeMap  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
109	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
110	[BUG]  [BUGGY]  tokens.remove( "eatTheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.remove( "eatTheRest ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.remove( "eatTheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
111	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.remove(0);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.remove(0);	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
112	[BUG]  [BUGGY]  Option  tokens  =  this.options.getOptOptions();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  this.options.getOptOptions();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  this.options.getOptOptions();	  Option    tokens    =    this.options.getOptions();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
113	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
114	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
115	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  if(!tokens.isEmpty())  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
116	[BUG]  [BUGGY]  eatTheRest  =  currentOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  eatTheRest  =  currentOption;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	eatTheRest  =  currentOption;	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
117	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithOption(options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayListWithOption(options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayListWithOption(options);	  tokens    =    Lists.newArrayList(options);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
118	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
119	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eattheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  eattheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  eattheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
120	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
121	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options,  options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList  <  Option>(options,  options);	  tokens    =    new    ArrayList    <    Option>(options);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
122	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(tokens);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  java.util.ArrayList  <  Option>(tokens);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
123	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>(options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  java.util.ArrayList  <  Option>(options);	  tokens    =    new    java.util.ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
124	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options)+  1;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(this.options)+  1;	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
125	[BUG]  [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  >  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null  &&  tokens.size()  >  1;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null  &&  tokens.size()  >  1;	  ||    currentOption!=    null    &&    tokens.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
126	[BUG]  [BUGGY]  Iterator  <  Option>  tokens  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Iterator  <  Option>  tokens  =  options.iterator();  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Iterator  <  Option>  tokens  =  options.iterator();	  This.eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
127	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
128	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
129	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  tokens.clear();  }	  if(currentOption    ==    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
130	[BUG]  [BUGGY]  if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    options    =    null;    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
131	[BUG]  [BUGGY]  if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(options!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    options    =    null;    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
132	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(tokens));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(tokens));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newLinkedList(Arrays.asList(tokens));	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
133	[BUG]  [BUGGY]  ||(eatTheRest!=  false))  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||(eatTheRest!=  false))  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||(eatTheRest!=  false))  {  eatTheRest  =  true;  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
134	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
135	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
136	[BUG]  [BUGGY]  if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
137	[BUG]  [BUGGY]  if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
138	[BUG]  [BUGGY]  if(!eattheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eattheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eattheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
139	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
140	[BUG]  [BUGGY]  this.options.clear();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  this.options.clear();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	this.options.clear();	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
141	[BUG]  [BUGGY]  this.options.add(new  OptionParser(this));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  this.options.add(new  OptionParser(this));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	this.options.add(new  OptionParser(this));	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
142	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
143	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(0,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(0,  0);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(0,  0);	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
144	[BUG]  [BUGGY]  tokens.remove( "eattheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.remove( "eattheRest ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.remove( "eattheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
145	[BUG]  [BUGGY]  Option  tokens  =  currentOption.getOptOptions();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  currentOption.getOptOptions();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  currentOption.getOptOptions();	  Option    tokens    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
146	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(true,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(true,  true);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(true,  true);	  Option    tokens    =    options.getOptions(true);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
147	[BUG]  [BUGGY]  tokens.add( "none ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "none ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.add( "none ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
148	[BUG]  [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  currentOption  =  true;  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
149	[BUG]  [BUGGY]  this.options.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  this.options.clear();  currentOption  =  null;  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	this.options.clear();  currentOption  =  null;	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
150	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }	  if(currentOption    ==    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
151	[BUG]  [BUGGY]  tokens  =  new  ArrayList(tokens.size());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  new  ArrayList(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  new  ArrayList(tokens.size());	  tokens    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
152	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(0);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayListWithCapacity(0);	  tokens    =    Lists.newArrayListWithCapacity(size()    -    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
153	[BUG]  [BUGGY]  if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest  ||  currentOption!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
154	[BUG]  [BUGGY]  if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest  ||  currentOption  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
155	[BUG]  [BUGGY]  if(!currentOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!currentOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!currentOption)  {  throw  new  IllegalStateException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
156	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens.add( "eatTheRest ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
157	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
158	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(tokens.size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(tokens.size());  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(tokens.size());	  tokens    =    Lists.newArrayList(0);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
159	[BUG]  [BUGGY]  while(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  while(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	while(eatTheRest!=  false)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
160	[BUG]  [BUGGY]  while(eatTheRest!=  false)  {  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  while(eatTheRest!=  false)  {  eatTheRest  =  true;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	while(eatTheRest!=  false)  {  eatTheRest  =  true;	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
161	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayList(this.options,  this.eatTheRest);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
162	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(this.options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(this.options);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newArrayListWithCapacity(this.options);	  tokens    =    Lists.newArrayList(this.options);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
163	[BUG]  [BUGGY]  &&  currentOption!=  null  ||  tokens.size()  ==  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  &&  currentOption!=  null  ||  tokens.size()  ==  1;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	&&  currentOption!=  null  ||  tokens.size()  ==  1;	  &&    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
164	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
165	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
166	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
167	[BUG]  [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  throw  new  IllegalStateException( " ".equals(currentOption.getValue()));  }	  if(!eatTheRest)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
168	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Lists.newLinkedList(Arrays.asList(eatTheRest));	  tokens    =    Lists.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
169	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
170	[BUG]  [BUGGY]  ||  this.currentOption  ==  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  this.currentOption  ==  null;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  this.currentOption  ==  null;	  ||    currentOption    ==    null;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
171	[BUG]  [BUGGY]  Option  tokens  =  currentOption.getTokens();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  currentOption.getTokens();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  currentOption.getTokens();	  Option    tokens    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
172	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
173	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  else  {  options.clear();  currentOption  =  null;  }	  tokens    =    new    ArrayList    <    Option>();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
174	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  options  =  null;  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    options    =    null;    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
175	[BUG]  [BUGGY]  Option  tokens  =  options.getOptions(this,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  Option  tokens  =  options.getOptions(this,  eatTheRest);  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	Option  tokens  =  options.getOptions(this,  eatTheRest);	  Option    tokens    =    options.getOptions(this);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
176	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
177	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add( "- ");  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  tokens.add( "- ");  currentOption  =  null;  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  tokens.add( "- ");  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
178	[BUG]  [BUGGY]  This.eattheRest  =  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  This.eattheRest  =  false;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	This.eattheRest  =  false;	  this.eattheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
179	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
180	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
181	[BUG]  [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
182	[BUG]  [BUGGY]  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
183	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(tokens!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
184	[BUG]  [BUGGY]  tokens  =  Collections.newHashSet();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  tokens  =  Collections.newHashSet();  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	tokens  =  Collections.newHashSet();	  tokens    =    Collections.emptyList();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
185	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  true;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
186	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
187	[BUG]  [BUGGY]  ||  tokens!=  null  &&  tokens.size()  >  0;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  ||  tokens!=  null  &&  tokens.size()  >  0;  [BUGGY]      tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	||  tokens!=  null  &&  tokens.size()  >  0;	  ||    currentOption!=    null    &&    tokens.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
188	[BUG]  [BUGGY]  if(this.options.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {      [BUGGY]  if(this.options.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [BUGGY]      eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	54	54	1	replace	if(this.options.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
