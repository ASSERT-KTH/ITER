bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption  ==  null)  {  tokens.add(token);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  while(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  while(stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.add(currentOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  options.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  Option  token  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  token  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  token  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.put(token,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  options.getOption(token);  tokens.add(option);	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  while(stopAtNonOption)  {  tokens.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption)  {  tokens.add(currentOption);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  While(stopAtNonOption)  {  tokens.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	While(stopAtNonOption)  {  tokens.add(currentOption);	  while(stopAtNonOption)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOption(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <?>  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <  Object>  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token))  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }    [BUGGY]  Option  tokens  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  tokens  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
