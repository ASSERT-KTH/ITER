bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  tokens.add(currentOption.toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption.toString());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.add(currentOption.toString());	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  tokens.add(currentOption.getName());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption.getName());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.add(currentOption.getName());	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(currentOption);	  while(stopAtNonOption)    {    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
11	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.add(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.add(currentOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
16	[BUG]  [BUGGY]  tokens.add(options.getOption(token));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens.add(options.getOption(token));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.add(options.getOption(token));	  Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
20	[BUG]  [BUGGY]  tokens  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens  =  options.getOption(token);	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
21	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(currentOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  tokens  =  options.getOption(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  tokens  =  options.getOption(currentOption);	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  null;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  null;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  currentOption  =  null;  tokens.add(token);  }	  else    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
25	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  option  =  currentOption.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  currentOption.getOption(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  options.getOption(currentOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
27	[BUG]  [BUGGY]  while(currentOption!=  options.getOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(currentOption!=  options.getOption(token))  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(currentOption!=  options.getOption(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    options.getOption(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  options.getOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption  ==  options.getOption(token))  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption  ==  options.getOption(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    options.getOption(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption  ||  options.contains(token))  {  tokens.add(token);  }	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
31	[BUG]  [BUGGY]  options.put(token,  currentOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.put(token,  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.put(token,  currentOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
32	[BUG]  [BUGGY]  options.put(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.put(token,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.put(token,  eatTheRest);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
33	[BUG]  [BUGGY]  final  Option  <  Object>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  final  Option  <  Object>  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	final  Option  <  Object>  currentOption  =  options.getOption(token);	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
34	[BUG]  [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <  Object>  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
35	[BUG]  [BUGGY]  Option  <  Object>  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <  Object>  currentOption  =  options.get(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <  Object>  currentOption  =  options.get(token);	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
36	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  options.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  options.size())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  options.size())  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    tokens.size())    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  while(currentOption!=  stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(currentOption!=  stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(currentOption!=  stopAtNonOption  &&  currentOption!=  tokens.size())  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    tokens.size())    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  while(currentOption!=  tokens.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(currentOption!=  tokens.size())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(currentOption!=  tokens.size())  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    tokens.size())    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  while(currentOption!=  null  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(currentOption!=  null  &&  currentOption!=  tokens.size())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(currentOption!=  null  &&  currentOption!=  tokens.size())  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    tokens.size())    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  options.addOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.addOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.addOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOption(token);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
41	[BUG]  [BUGGY]  while(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption    ==    null)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent  ==  null  &&  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
44	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
45	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
46	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  while(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  while(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  while(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
47	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <?>  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
48	[BUG]  [BUGGY]  final  Option  <?>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  final  Option  <?>  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	final  Option  <?>  currentOption  =  options.getOption(token);	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
49	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getValue(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getValue(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <?>  currentOption  =  options.getValue(token);	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
50	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	While(stopAtNonOption)  {  tokens.add(token);	  While(stopAtNonOption)    {    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
51	[BUG]  [BUGGY]  while(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    null)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  Option  token  =  options.getOption(currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  token  =  options.getOption(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  token  =  options.getOption(currentOption);	  Option    token    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
53	[BUG]  [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  token  =  options.getOption(token,  stopAtNonOption);	  Option    token    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  Option  token  =  currentOption.getOption(token);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  token  =  currentOption.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  token  =  currentOption.getOption(token);	  Option    token    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  stopAtNonOption  =  options.getOption(token);  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent  ==  currentOption.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
58	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.getParent()  <  =  token)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  currentOption.getParent()  <  =  token)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  currentOption.getParent()  <  =  token)  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
59	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  token  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  token  =  options.getOption(token)+  stopAtNonOption;	  Option    token    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  options.addOption(currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.addOption(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.addOption(currentOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {	  Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
63	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  option.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  currentOption  =  option.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	else  if(stopAtNonOption)  {  currentOption  =  option.getOption(token);  tokens.add(token);  }	  else    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  tokens  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  tokens  =  options.getOption(token,  stopAtNonOption);	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
65	[BUG]  [BUGGY]  Option  tokens  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  tokens  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  tokens  =  options.getOption(token)+  stopAtNonOption;	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
66	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  while(stopAtNonOption    &&    currentOption!=    null)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	While(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    null)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  tokens.add(currentOption.token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption.token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.add(currentOption.token);	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  }	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  <?>  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  if(!eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
75	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  if(eatTheRest)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(currentOption);  }	  parent!=    null    &&    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  while(currentOption!=  options.size())  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(currentOption!=  options.size())  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(currentOption!=  options.size())  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    tokens.size())    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(option);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(option);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  option  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(option);  }	  Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
79	[BUG]  [BUGGY]  While(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	While(stopAtNonOption  &&  currentOption!=  options.getOption(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    options.getOption(token))    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
80	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
82	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  parent  ==  currentOption.getParent())  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOption(token);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)+  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  option  =  options.getOption(token)+  1;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
85	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
87	[BUG]  [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <  Object>  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    if(!eatTheRest)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
88	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  tokens  =  options.getOption(token);  }  else  {  tokens.add(token);  }	  Option    tokens    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
89	[BUG]  [BUGGY]  options.put(token,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  options.put(token,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	options.put(token,  null);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
90	[BUG]  [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <  Object>  currentOption  =  options.getOption(token)+  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <  Object>  currentOption  =  options.getOption(token)+  1;	  Option    <    Object>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
91	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	While(stopAtNonOption)  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption)  {  tokens.add(token);  }	  While(stopAtNonOption)    {    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);	  else    if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
94	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);	  else    if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
95	[BUG]  [BUGGY]  tokens.addAll(options.getOption(token));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  tokens.addAll(options.getOption(token));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	tokens.addAll(options.getOption(token));	  tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
96	[BUG]  [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null  &&  options.hasOption(token))  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  while(stopAtNonOption  &&  currentOption!=  null  &&  options.hasOption(token))  {  tokens.add(token);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	while(stopAtNonOption  &&  currentOption!=  null  &&  options.hasOption(token))  {  tokens.add(token);	  while(stopAtNonOption    &&    currentOption!=    null)    {    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
97	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	if(stopAtNonOption)  {  Option  option  =  options.getOption(token);  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
98	[BUG]  [BUGGY]  parent!=  null  &&  currentOption  ==  tokens.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  currentOption  ==  tokens.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  currentOption  ==  tokens.getParent())  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
99	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.getParent()  <  =  tokens.size())  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  currentOption.getParent()  <  =  tokens.size())  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	parent!=  null  &&  currentOption.getParent()  <  =  tokens.size())  {  eatTheRest  =  true;  tokens.add(token);  }	  parent!=    null    &&    parent    ==    currentOption.getParent())    {    eatTheRest    =    true;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
100	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token)+  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	239	239	1	replace	Option  <?>  currentOption  =  options.getOption(token)+  1;	  Option    <?>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
