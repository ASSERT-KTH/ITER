bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(options.contains(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.contains(token)&&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.contains(token)&&  options.hasOption(token))  {	  else    if(options.contains(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
2	[BUG]  [BUGGY]  else  if(options.contains( "- ")||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.contains( "- ")||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.contains( "- ")||  options.hasOption(token))  {	  else    if(options.contains(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
3	[BUG]  [BUGGY]  else  if(options.contains(token)||  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.contains(token)||  options.hasArg(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.contains(token)||  options.hasArg(token))  {	  else    if(options.contains(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
4	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  else  if(options.hasArg(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasArg(token)&&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasArg(token)&&  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	List  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&!options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&!options.hasOption(token))  {	  else    if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {	  else    if(stopAtNonOption    ||!options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
10	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =  options.getOption(token,  stopAtNonOption);	  options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
12	[BUG]  [BUGGY]  options  =  currentOption.getOption(token);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =  currentOption.getOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =  currentOption.getOption(token);	  options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
13	[BUG]  [BUGGY]  else  if(options.hasArg()  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasArg()  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasArg()  ||  options.hasOption(token))  {	  else    if(options.hasArg(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
14	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasValue(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasValue(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasArg(token)||  options.hasValue(token))  {	  else    if(options.hasArg(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
16	[BUG]  [BUGGY]  ters.add(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  ters.add(arguments[0],  arguments[1]);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	ters.add(arguments[0],  arguments[1]);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  currentOption  =  options.get(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  currentOption  =  options.get(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    tokens.add(iter.next());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token,  eatTheRest);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token,  eatTheRest);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  Option>  iter  =  tokens.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
22	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options.add(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options.add(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
23	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
24	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.length  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&  stopAtNonOption  ||  arguments.length  >  2)  {	  else    if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
25	[BUG]  [BUGGY]  Option  options  =(options  ==  null)?  null  :  options.getOptions();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(options  ==  null)?  null  :  options.getOptions();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(options  ==  null)?  null  :  options.getOptions();	  Option    options    =(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
26	[BUG]  [BUGGY]  options  =(options  ==  null)?  null  :  options.getOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =(options  ==  null)?  null  :  options.getOptions();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =(options  ==  null)?  null  :  options.getOptions();	  Option    options    =(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
27	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)&&  options.contains(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  }  else  if(options.hasOption(token)&&  options.contains(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	}  else  if(options.hasOption(token)&&  options.contains(token))  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token)&&  options.hasOption(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
30	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
31	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasValue(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)||  options.hasValue(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token)||  options.hasValue(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
32	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  Option>  iter  =  options.entrySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
33	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	List  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
34	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  arguments;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)+  arguments;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)+  arguments;	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
35	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)/  stopAtNonOption;	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
36	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  burstToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)+  burstToken(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)+  burstToken(token,  stopAtNonOption);	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
37	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  eatTheRest;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)+  eatTheRest;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)+  eatTheRest;	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
38	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	parent!=  null  &&  stopAtNonOption)  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
39	[BUG]  [BUGGY]  try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  burstToken(token);  }	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
40	[BUG]  [BUGGY]  try  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  burstToken(token);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  try  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  burstToken(token);  }  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	try  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  burstToken(token);  }	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
41	[BUG]  [BUGGY]  try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  processOptionToken(token);  }  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	try  {  for(Iterator  iter  =  arguments.iterator();  iter.hasNext();)  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
43	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  ||  arguments.length()  ==  2)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
44	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
45	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!stopAtNonOption)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  options.put(token,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options.put(token,  null);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options.put(token,  null);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  options.put(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options.put(token,  eatTheRest);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options.put(token,  eatTheRest);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  token.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-   ")||  token.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-   ")||  token.startsWith( "-   "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
49	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")||  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
50	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
51	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
52	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
53	[BUG]  [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
54	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption)  {  tokens.add( "- ");  }	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
55	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	tokens.add( "- "  +  token);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
56	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
57	[BUG]  [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	}  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
58	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOption(arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.getOption(arguments);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOption(arguments[0]);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.getOption(arguments[0]);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
62	[BUG]  [BUGGY]  else  if(options.hasValue(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
63	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)+  2;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)+  2;	  Option    token    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)/  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)/  1;	  Option    token    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)-  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)-  1;	  Option    token    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption.startsWith( "- "))  {	  else    if(options.hasOption(token)&&    currentOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
67	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  currentOption.startsWith( "-   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  currentOption.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  currentOption.startsWith( "-   "))  {	  else    if(options.hasOption(token)&&    currentOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
68	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  currentOption.equals( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  currentOption.equals( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  currentOption.equals( "- "))  {	  else    if(options.hasOption(token)&&    currentOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)/  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)/  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)+  2;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)+  2;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)-  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)-  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  else  if(!options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(!options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
73	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  options.iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  iter  =  options.iterator();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
74	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  iter  =  arguments.iterator();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
75	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  tokens  =  currentOption.iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  tokens  =  currentOption.iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
76	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.keySet().iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  tokens  =  currentOption.keySet().iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  tokens  =  currentOption.keySet().iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
77	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.values().iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  tokens  =  currentOption.values().iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  tokens  =  currentOption.values().iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
78	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "- ")&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "- ")&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  token.startsWith( "- ")&&  stopAtNonOption)  {	  else    if(options.hasOption(token)||    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
79	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  eatTheRest)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&  eatTheRest)  {	  else    if(!options.hasOption(token)&&!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
80	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&!stopAtNonOption  &&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&!stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&!stopAtNonOption  &&  arguments.contains(token))  {	  else    if(!options.hasOption(token)&&!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
81	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)&&  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasValue(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasValue(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)||  options.hasValue(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
84	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
85	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
86	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
87	[BUG]  [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	}  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
88	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
89	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.getOption(token,  stopAtNonOption);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
90	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  1)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
91	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.size()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
92	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  &&  arguments.size()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
93	[BUG]  [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  Option  token  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token,  eatTheRest);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token,  eatTheRest);	  Option    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)&&  options.hasOption(token))  {	  else    if(options.hasValue(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)||  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasValue(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasArg(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)||  options.hasArg(token))  {	  else    if(options.hasValue(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
98	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
99	[BUG]  [BUGGY]  else  if(options.hasValue(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)&&  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
100	[BUG]  [BUGGY]  else  if(options.hasArg(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasArg(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasArg(token)&&  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
101	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption)&&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption)&&  arguments.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption)&&  arguments.contains(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
102	[BUG]  [BUGGY]  Option  options  =(Option)this.options.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(Option)this.options.clone();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(Option)this.options.clone();	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  options  =(Option)options.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =(Option)options.clone();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =(Option)options.clone();	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
104	[BUG]  [BUGGY]  Option  options  =(Option)currentOption.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(Option)currentOption.clone();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(Option)currentOption.clone();	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
105	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
106	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOptions(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.getOptions(token);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
107	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
108	[BUG]  [BUGGY]  Option  token  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.get(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.get(token,  stopAtNonOption);	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
109	[BUG]  [BUGGY]  Option  token  =  options.get(0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.get(0);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.get(0);	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
110	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
111	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
112	[BUG]  [BUGGY]  else  if(options.hasOption( "- ")&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption( "- ")&&  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption( "- ")&&  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
113	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
114	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(options);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(options);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(options);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
116	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
117	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(options);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
118	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
119	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
120	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  options.hasArg(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)||  options.hasArg(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token)||  options.hasArg(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
121	[BUG]  [BUGGY]  else  if(options.contains( "-- ")||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.contains( "-- ")||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.contains( "-- ")||  options.hasOption(token))  {	  else    if(options.contains(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
122	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
123	[BUG]  [BUGGY]  Option  options  =  iter.getOptions();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  iter.getOptions();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  iter.getOptions();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
124	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.getOptions(arguments);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.getOptions(arguments);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
125	[BUG]  [BUGGY]  Option  options  =  currentOption.cloneOption();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  currentOption.cloneOption();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  currentOption.cloneOption();	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
126	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add( "-- ");  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	tokens.add( "-- ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
127	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add( "-n ");  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	tokens.add( "-n ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
128	[BUG]  [BUGGY]  tokens.add( "- "  +  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add( "- "  +  arguments);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	tokens.add( "- "  +  arguments);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
129	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
130	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {	  else    if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
131	[BUG]  [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
132	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  currentOption.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  currentOption.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  currentOption.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    currentOption.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
133	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "- ")&&  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)&&    token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
134	[BUG]  [BUGGY]  Option  options  =  iter.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  iter.getOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  iter.getOption(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
135	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
136	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
137	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
138	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
139	[BUG]  [BUGGY]  iter.add( "- ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  iter.add( "- ");  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	iter.add( "- ");	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
140	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  iter.clear();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	iter.clear();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
141	[BUG]  [BUGGY]  else  if(eatTheRest)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(eatTheRest)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(eatTheRest)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
142	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
143	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  ||  token.startsWith( "- "))  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
144	[BUG]  [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options.addOptionToken(token,  stopAtNonOption);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
145	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)||  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)||    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
146	[BUG]  [BUGGY]  Option  token  =  options.get(token)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.get(token)+  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.get(token)+  1;	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
147	[BUG]  [BUGGY]  Option  token  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.get(token)+  stopAtNonOption;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.get(token)+  stopAtNonOption;	  Option    token    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
148	[BUG]  [BUGGY]  PosixParser  <  Object>  tokens  =  options.get(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  PosixParser  <  Object>  tokens  =  options.get(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	PosixParser  <  Object>  tokens  =  options.get(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
149	[BUG]  [BUGGY]  PosixParser  <  Object>  tokens  =  options.getOptions();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  PosixParser  <  Object>  tokens  =  options.getOptions();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	PosixParser  <  Object>  tokens  =  options.getOptions();	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasArg(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasArg(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)||  options.hasArg(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
151	[BUG]  [BUGGY]  else  if(options.hasOption(arguments)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(arguments)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(arguments)||  stopAtNonOption)  {	  else    if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
152	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
153	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&!stopAtNonOption)  {	  else    if(!options.hasOption(token)&&!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
154	[BUG]  [BUGGY]  else  if(options.hasOption(arguments)||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(arguments)||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(arguments)||  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  else  if(options.hasOption( "- ")||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption( "- ")||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption( "- ")||  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
156	[BUG]  [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    token    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
157	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasValue(token)||  options.hasOption(token)&&  stopAtNonOption)  {	  else    if(options.hasValue(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
158	[BUG]  [BUGGY]  Option  options  =(Option)options.get(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(Option)options.get(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(Option)options.get(token);	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
159	[BUG]  [BUGGY]  Option  options  =(Option)options.get(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(Option)options.get(0);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(Option)options.get(0);	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
160	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
161	[BUG]  [BUGGY]  else  if(options.hasArg(1)  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasArg(1)  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasArg(1)  ||  options.hasOption(token))  {	  else    if(options.hasArg(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
162	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(tokens.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(tokens.add(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(tokens.add(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
163	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
164	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
165	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)-  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)-  stopAtNonOption;	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
166	[BUG]  [BUGGY]  Option  token  =  options.getOption(token)+  argument;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  token  =  options.getOption(token)+  argument;  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  token  =  options.getOption(token)+  argument;	  Option    token    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
167	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  iter  =  options.keySet().iterator();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
168	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  iter  =  options.values().iterator();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
169	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  null  :  options.getOptions();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =(options  ==  null)?  null  :  options.getOptions();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =(options  ==  null)?  null  :  options.getOptions();	  Option    options    =(options!=    null)?    null    :    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
170	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(token);  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(options.add(token);	  if(stopAtNonOption)    {    for(Iterator    iter    =    arguments.iterator();    iter.hasNext();)    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
171	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopsAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopsAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopsAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
172	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.getOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.getOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.getOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
173	[BUG]  [BUGGY]  options  =  options.getOption(token)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  options  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	options  =  options.getOption(token)||  options.hasOption(token);	  options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
174	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
175	[BUG]  [BUGGY]  tokens.add('-');  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  tokens.add('-');  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	tokens.add('-');	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	49	None	replace
176	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)||    options.hasOption(token,    stopAtNonOption))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
177	[BUG]  [BUGGY]  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
178	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
179	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  tokens  =  options.values().iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  tokens  =  options.values().iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
180	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  tokens  =  this.options.iterator();  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  tokens  =  this.options.iterator();	  Iterator    <    String>    tokens    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
181	[BUG]  [BUGGY]  Option  options  =(Option)iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =(Option)iter.next();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =(Option)iter.next();	  Option    options    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
182	[BUG]  [BUGGY]  else  if(!options.hasOption(token)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!options.hasOption(token)&&  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!options.hasOption(token)&&  token.startsWith( "-- "))  {	  else    if(options.hasOption(token)||    token.startsWith(   "-       "))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
183	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.size()  ==  0)  {	  else    if(options.hasOption(token)&&    stopAtNonOption    ||    arguments.size()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
184	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token)||  options.hasOption(token))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(!stopAtNonOption  &&  options.contains(token)||  options.hasOption(token))  {	  else    if(options.contains(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
185	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)/  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  options  =  options.getOption(token)/  ||  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  options  =  options.getOption(token)/  ||  options.hasOption(token);	  Option    options    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
186	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0)  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
187	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [BUGGY]      {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- "))  {	  else    if(stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
188	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  2  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Option  option  =  options.getOption(token)/  2  ||  options.hasOption(token);  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Option  option  =  options.getOption(token)/  2  ||  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
189	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
190	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }      [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (options.hasOption(token))    {  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	136	137	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
