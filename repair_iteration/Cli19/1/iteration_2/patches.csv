bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  token  =  options.getOption(token);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  token  =  options.getOption(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	token  =  options.getOption(token);	  token    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	35	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }	  token    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	35	None	replace
3	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  token  ==  null)  {	  else    if(stopAtNonOption    ||    token    ==    null)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  tokens  ==  null)  {	  else    if(stopAtNonOption    ||    token    ==    null)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
5	[BUG]  [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ==  null  ||  stopAtNonOption!=  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
6	[BUG]  [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption!=  null  ||  stopAtNonOption!=  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  stopAtNonOption  ==  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ||  stopAtNonOption  ==  null)  {	  else    if(currentOption    ||    stopAtNonOption!=    null)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
8	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption.hasArg())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ||  stopAtNonOption.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ||  stopAtNonOption.hasArg())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArgs())  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArgs())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
10	[BUG]  [BUGGY]  AssertionFailedError  <  String>  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  <  String>  currentOption  =  options.getOption(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  <  String>  currentOption  =  options.getOption(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    <    String>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	28	None	replace
11	[BUG]  [BUGGY]  AssertionFailedError  <  String>  token  =  options.getOption(token);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  <  String>  token  =  options.getOption(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  <  String>  token  =  options.getOption(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    <    String>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	28	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption)  {	  else    if(currentOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
13	[BUG]  [BUGGY]  else  if(currentOption  ==  stopAtNonOption)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption  ==  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ==  stopAtNonOption)  {	  else    if(currentOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
14	[BUG]  [BUGGY]  else  if(currentOption!=  stopAtNonOption)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption!=  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption!=  stopAtNonOption)  {	  else    if(currentOption    ||    stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  &&  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token,    stopAtNonOption);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token,    stopAtNonOption);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
19	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.remove(token);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
20	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(currentOption!=  null)  {  if(stopAtNonOption)  {  eatTheRest  =  false;  }	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.remove(token);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  	15	None	replace
23	[BUG]  [BUGGY]  else  if(currentOption.hasArg()  ||  tokens.contains(token))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(currentOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  	15	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	  tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	20	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	  tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	20	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(Token);    }    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.equals( "   "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.equals( "   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg()  ||  token.equals( "   "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	25	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "- "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	25	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.equals( "   "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.equals( "   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.equals( "   "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	25	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	18	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	18	None	replace
32	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  ==  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  ==  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  token!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)    {    eattheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  options.add(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  parent.processOptionToken(token,  currentOption);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  parent.processOptionToken(token,  currentOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	parent.processOptionToken(token,  currentOption);	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	36	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	36	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	36	None	replace
41	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.put(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	2	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(startAtNonOption)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	37	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	37	None	replace
46	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.put(token,  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.put(token,  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }	  options.put(token,    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  	17	None	replace
47	[BUG]  [BUGGY]  options.put(token,  currentOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.put(token,  currentOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.put(token,  currentOption)  {  eatTheRest  =  false;  tokens.add(token);  }	  options.put(token,    stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  	17	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	33	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	33	None	replace
50	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	33	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  else  {  currentOption  =  options.getOption(token);  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  else  {  currentOption  =  options.getOption(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  else  {  currentOption  =  options.getOption(token);  }	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	27	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  token!=  null)  {	  else    if(stopAtNonOption    ||    token!=    null)    {    	non-compiled	[CE]  	24	None	replace
53	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  tokens!=  null)  {	  else    if(stopAtNonOption    ||    token!=    null)    {    	non-compiled	[CE]  	24	None	replace
54	[BUG]  [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.addOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(currentOption!=  null)  {  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(currentOption!=  null)  {  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.addOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  	26	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  	32	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  }	  tokens.add(currentOption);    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(currentOption);    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  >=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption  >=  null)  {	  else    if(stopAtNonOption    &&    currentOption    ==    null)    {    	non-compiled	[CE]  	21	None	replace
60	[BUG]  [BUGGY]  AssertionFailedError  eatTheRest  =  false;  tokens.add(token);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  eatTheRest  =  false;  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  eatTheRest  =  false;  tokens.add(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    eatTheRest    =    false;    tokens.add(token);    	non-compiled	[CE]  	39	None	replace
61	[BUG]  [BUGGY]  AssertionFailedError  eatTheRest  =  false;  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  eatTheRest  =  false;  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  eatTheRest  =  false;	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    eatTheRest    =    false;    tokens.add(token);    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  ||  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	||  stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	19	None	replace
64	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption)  {  tokens.add(currentOption);  }	  tokens.add(currentOption);    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  Option  eatTheRest  =  options.getOption(token);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  eatTheRest  =  options.getOption(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  eatTheRest  =  options.getOption(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	27	None	replace
66	[BUG]  [BUGGY]  parent.process(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  parent.process(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	parent.process(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
67	[BUG]  [BUGGY]  options.setOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  options.setOption(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.setOption(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	23	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  	32	None	replace
71	[BUG]  [BUGGY]  AssertionFailedError  <  String>  eatTheRest  =  options.getOption(token);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  <  String>  eatTheRest  =  options.getOption(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  <  String>  eatTheRest  =  options.getOption(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    <    String>    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	28	None	replace
72	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	33	None	replace
73	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  token.equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  token.equals( " "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token)||  token.equals( " "))  {	  else    if(stopAtNonOption    &&    currentOption.hasOption(token))    {    	non-compiled	[CE]  	33	None	replace
74	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption)  {  token  =  options.getOption(token);  tokens.add(token);  }	  token    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	35	None	replace
75	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	19	None	replace
76	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  {	  Option    currentOption    =    options.getOption(token);    tokens.add(token);    	non-compiled	[CE]  	18	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	37	None	replace
80	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "-- "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "-- "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	25	None	replace
81	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null  &&  token.length()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(currentOption);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    }    	non-compiled	[CE]  	5	None	replace
83	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  token.length()  ==  0)  {  Option  currentOption  =  options.getOption(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  	2	None	replace
84	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
85	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  <?>  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    if(!stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  	19	None	replace
86	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  token!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	34	None	replace
87	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    tokens.contains(token))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
88	[BUG]  [BUGGY]  parent.addToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  parent.addToken(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	parent.addToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
89	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.hasArg())  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  token.hasArg())  {	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
90	[BUG]  [BUGGY]  token  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  token  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	token  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token,    stopAtNonOption);    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption!=  null)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	37	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption  ==  null)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption  ==  null)  {  continue;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(currentOption  ==  null)  {  continue;  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  ')'  expected	37	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  return;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  return;  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  return;  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	23	None	replace
94	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "eatTheRest "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "eatTheRest "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( "eatTheRest "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg()    ||    token.equals(   "   "))    {    	non-compiled	[CE]  	25	None	replace
95	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  token!=  null)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	32	None	replace
96	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null  ||  token.length()  ==  0)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null  ||  token.length()  ==  0)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  token  ==  null  ||  token.length()  ==  0)  {	  else    if(stopAtNonOption    ||    token    ==    null)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
97	[BUG]  [BUGGY]  AssertionFailedError  eatTheRest  =  true;  tokens.add(token);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  AssertionFailedError  eatTheRest  =  true;  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	AssertionFailedError  eatTheRest  =  true;  tokens.add(token);	          if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError    eatTheRest    =    false;    tokens.add(token);    	non-compiled	[CE]  ')'  expected	39	None	replace
98	[BUG]  [BUGGY]  eatTheRest  =  false;  tokens.add(token);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  eatTheRest  =  false;  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	eatTheRest  =  false;  tokens.add(token);	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
99	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption  ||  token  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  token  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
100	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(!stopAtNonOption)  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
