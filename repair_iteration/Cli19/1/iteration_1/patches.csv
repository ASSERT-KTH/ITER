bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption!=  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  stopAtNonOption!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ||  stopAtNonOption!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ')'  expected	10	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  }  else  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  }  else  {  tokens.add(token);  }	      Option    currentOption    =    options.getOption(token);    tokens.add(currentOption);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(currentOption);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	tokens.add(currentOption);	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
11	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  If(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  If(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    If(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
12	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)  {  eattheRest  =  false;  tokens.add(token);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
13	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(Token);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArgs())  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArgs())  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  options.put(token,  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	options.put(token,  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
20	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	tokens.add(token);  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
22	[BUG]  [BUGGY]  else  if(currentOption  ||  stopAtNonOption)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(currentOption  ||  stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(currentOption  ||  stopAtNonOption)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  token!=  null)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  token!=  null)  {	  else    if(stopAtNonOption    ||    currentOption!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( " "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( " "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  ||  token.equals( " "))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.addOptionToken(token,  stopAtNonOption);  }	      tokens.add(token);    	non-compiled	[CE]  ';'  expected	1	None	replace
27	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  Option  currentOption  =  options.getOption(token);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  Option  currentOption  =  options.getOption(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    Option  currentOption  =  options.getOption(token);	  	non-compiled	[CE]  ';'  expected	3	None	add
28	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  AssertionFailedError  <  String>  currentOption  =  options.getOption(token);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  AssertionFailedError  <  String>  currentOption  =  options.getOption(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError  <  String>  currentOption  =  options.getOption(token);	  	non-compiled	[CE]  ';'  expected	3	None	add
29	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.remove(token);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.remove(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.remove(token);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
30	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  eatTheRest  =  false;  tokens.add(token);  }	      if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
33	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasOption(token))  {	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null  &&  token.length()  >  0)  {	  else    if(stopAtNonOption    &&    currentOption!=    null)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  token  =  options.getOption(token);  tokens.add(token);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  token  =  options.getOption(token);  tokens.add(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	token  =  options.getOption(token);  tokens.add(token);	      if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	parent.processOptionToken(token,  stopAtNonOption);	      if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  continue;  }	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  ';'  expected	10	None	replace
38	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption  ||  token  ==  null)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  token  ==  null)  {	  else    if(stopAtNonOption    ||    currentOption    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  AssertionFailedError  eatTheRest  =  false;  tokens.add(token);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }    [BUGGY]      if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  AssertionFailedError  eatTheRest  =  false;  tokens.add(token);  [BUGGY]    else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	        if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    AssertionFailedError  eatTheRest  =  false;  tokens.add(token);	  	non-compiled	[CE]  ')'  expected	3	None	add
