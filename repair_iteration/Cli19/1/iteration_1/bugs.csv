bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.add(token);  [CE]  'else'  without  'if'  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    tokens.add(token);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    tokens.add(token);		non-compiled	[CE]  'else'  without  'if'	2	None	add
2	[BUG]  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }		non-compiled	[CE]  'else'  without  'if'	2	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	add	    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
4	[BUG]  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }		compilable	  [FE]  AssertionFailedError  	2	2	add
5	[BUG]  [BUGGY]    if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    if(stopAtNonOption)  {  currentOption  =  options.getOption(token);  tokens.add(token);  }		non-compiled	[CE]  ')'  expected	2	None	add
6	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    if(stopAtNonOption)  {  tokens.add(token);  }		non-compiled	[CE]  ')'  expected	2	None	add
7	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  ||  currentOption  ==  null)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  ||  currentOption  ==  null)  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption!=  null)  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  ')'  expected	2	None	add
11	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]  else  if  (stopAtNonOption)  {  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);		non-compiled	[CE]  ')'  expected	2	None	add
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (options.hasOption(token))  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.7071067811865475	234	235	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {	else  if  (stopAtNonOption)  {  	non-compiled	[CE]  ')'  expected	1	None	replace
