bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "n ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.add( "n ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  tokens.remove( "n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove( "n ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.remove( "n ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  tokens.remove( "- ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove( "- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.remove( "- ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	Option  currentOption  =  options.getOption(this,  tokens);	      Option    currentOption    =    options.getOption(this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }	      Option    currentOption    =    options.getOption(this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }	      Option    currentOption    =    options.getOption(this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  currentOption  =  option.getOption();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  option.getOption();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  option.getOption();	  currentOption    =    option;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  currentOption  =  Options.newInstance();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Options.newInstance();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Options.newInstance();	  currentOption    =    option;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.add(currentOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.add(currentOption);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.clear();  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  currentOption  =  options.getOption(currentOption);  tokens.clear();  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.add(currentOption);  }  else  {  options.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  tokens.add(currentOption);  }  else  {  options.add(currentOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  tokens.add(currentOption);  }  else  {  options.add(currentOption);  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  eatTheRest  =  false;  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	eatTheRest  =  false;	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
15	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
16	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
17	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
18	[BUG]  [BUGGY]  options.add(new  Option(this));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.add(new  Option(this));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	options.add(new  Option(this));	      options.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  tokens.remove( "-- ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove( "-- ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.remove( "-- ");	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
20	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.add( "-- "  +  eatTheRest);	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
21	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  new  Option(tokens);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  new  Option(tokens);	  currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  currentOption  =  eatTheRest;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  eatTheRest;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  eatTheRest;	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  currentOption  =  options.size()  >  0;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.size()  >  0;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.size()  >  0;	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  currentOption  =  options.size()  >  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.size()  >  1;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.size()  >  1;	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  new  Option(tokens.size()  +  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  new  Option(tokens.size()  +  1);	  currentOption    =    new    Option(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.clear();  currentOption  =  new  Option(this);	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.clear();  currentOption  =  new  ArrayList();	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens.size()  *  2);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  new  Option(tokens.size()  *  2);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  new  Option(tokens.size()  *  2);	  currentOption    =    new    Option(tokens.size());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
31	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  eatTheRest;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Option.NONE  ||  eatTheRest;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Option.NONE  ||  eatTheRest;	  currentOption    =    Option.NONE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >  1;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Option.NONE  &&  tokens.size()  >  1;	  currentOption    =    Option.NONE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  currentOption  =  Option.NONE  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Option.NONE  -  1;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Option.NONE  -  1;	  currentOption    =    Option.NONE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(this);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  currentOption  =  options.getOption(this);  tokens.clear();  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  currentOption  =  options.getOption(this);  tokens.clear();  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Option.NO_OPTIONAL_OPTION;	  currentOption    =    option;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  currentOption  =  options.getOption(this,  eatTheRest);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	Option  currentOption  =  options.getOption(this,  eatTheRest);	      Option    currentOption    =    options.getOption(this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  currentOption  =  options.toArray(new  Option[options.size()  ]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.toArray(new  Option[options.size()  ]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.toArray(new  Option[options.size()  ]);	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  currentOption  =  options.getOptions();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.getOptions();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.getOptions();	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  currentOption  =  options.options;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.options;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.options;	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  options.add(new  Option( " "));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.add(new  Option( " "));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	options.add(new  Option( " "));	      options.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
44	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- ".equals(this.options));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "-- ".equals(this.options));  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.add( "-- ".equals(this.options));	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  currentOption  =  new  Option(options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  new  Option(options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  new  Option(options);	  currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  currentOption!=  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  Option.NONE  ||  currentOption!=  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  Option.NONE  ||  currentOption!=  null;	  currentOption    =    Option.NONE;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  tokens.add( "u00 ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "u00 ");  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.add( "u00 ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  currentOption  =  options.cloneTree();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.cloneTree();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.cloneTree();	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  currentOption  =  options.getOption( "eatTheRest ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.getOption( "eatTheRest ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.getOption( "eatTheRest ");	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  currentOption  =  options.next();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  currentOption  =  options.next();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	currentOption  =  options.next();	  currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  options.addAll(tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.addAll(tokens);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	options.addAll(tokens);	      options.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
53	[BUG]  [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
54	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(eatTheRest!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
55	[BUG]  [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	CurrentOption  currentOption  =  new  Option(tokens.size());	  currentOption    =    new    Option(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	      tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	Option  currentOption  =  options.getOption(tokens);	      Option    currentOption    =    options.getOption(this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
59	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]    currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
60	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  eatTheRest;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  currentOption  =  eatTheRest;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.clear();  currentOption  =  eatTheRest;	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
61	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  options.getOption(this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.clear();  currentOption  =  options.getOption(this);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	56	56	1	replace	tokens.clear();  currentOption  =  options.getOption(this);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
