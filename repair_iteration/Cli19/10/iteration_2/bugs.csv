bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  i);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  tokens.add( "- "  +  currentOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  currentOption);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  currentOption);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  if(currentOption.hasArg()  ||  (token.length()  ==  (i  +  1)))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(currentOption.hasArg()  ||  (token.length()  ==  (i  +  1)))  {  [BUGGY]    {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	if(currentOption.hasArg()  ||  (token.length()  ==  (i  +  1)))  {	  if(currentOption.hasArg()    ||    (token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "-n "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.size()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.size()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "-n "  +  ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "-n "  +  ch);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- ");  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- ");  currentOption  =  options.getOption(ch);  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	if(stopAtNonOption)  {  tokens.add( "- ");  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   ");    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  Option  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	Option  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.size()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  AssertionFailedToken  token  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  AssertionFailedToken  token  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	AssertionFailedToken  token  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.size()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  AssertionFailedToken(currentOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  AssertionFailedToken(currentOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	AssertionFailedToken(currentOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  tokens.add( "- ".  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- ".  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- ".  +  ch);  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  0);  currentOption  =  options.getOption(ch);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  ch);  currentOption  =  option.getOption(ch);	      if(stopAtNonOption)    {    if(currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  break;	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    break;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- "  +  0);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);    [BUGGY]  tokens.add( "- "  +  0);  [BUGGY]    if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	278	279	1	replace	tokens.add( "- "  +  0);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
