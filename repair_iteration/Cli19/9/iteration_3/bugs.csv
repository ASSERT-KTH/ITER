bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  options.getOption(i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(i  +  1);	  Option    options    =    options.getOption(ch    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch,  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  currentOption  =  options.getOption(ch,  eatTheRest);	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
6	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  1);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  1);	  currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
7	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  i  +  1);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  i  +  1);	  currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
8	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  0);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  0);	  currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  option  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  option  =  options.getOption(ch,  stopAtNonOption);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  option  =  options.getOption(ch  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  option  =  options.getOption(ch  +  1);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  option  =  options.getOption(ch  -  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  option  =  options.getOption(ch  -  1);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch  *  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch  *  1);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch  *  1);	  currentOption    =    options.getOption(ch    -    1    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
13	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");	  tokens.add(   "-   "    +    ch    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }	  currentOption    =    options.getOption(ch,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  eatTheRest);  }  else  {  tokens.add( "- "  +  ch);  }	  currentOption    =    options.getOption(ch,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  tokens.add( "-n "  +  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-n "  +  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-n "  +  i);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
17	[BUG]  [BUGGY]  options.add( "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  options.add( "- "  +  i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	options.add( "- "  +  i  +  1);	  options.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
18	[BUG]  [BUGGY]  options.add( "- "  +  token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  options.add( "- "  +  token.substring(i  +  1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	options.add( "- "  +  token.substring(i  +  1));	  options.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
19	[BUG]  [BUGGY]  ters.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  ters.add( "- "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	ters.add( "- "  +  ch);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(!stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
20	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	AssertionFailedToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
21	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  tokens);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  tokens);	  currentOption    =    options.getOption(ch,    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  token  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  token  +  1);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  token  +  1);	  currentOption    =    options.getOption(ch,    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  tokens.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  tokens.length);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  tokens.length);	  currentOption    =    options.getOption(ch,    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }	  currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
27	[BUG]  [BUGGY]  options.add( "-- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  options.add( "-- "  +  token);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	options.add( "-- "  +  token);	  options.add(   "--   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
28	[BUG]  [BUGGY]  options.add( "-- "  +  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  options.add( "-- "  +  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	options.add( "-- "  +  i);	  options.add(   "--   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
29	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  break;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  i  +  1);  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  i  +  1);  break;	  tokens.add(   "-   "    +    ch    +    1);    break;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +  2);  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +  2);  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +  2);  break;	  tokens.add(   "-   "    +    ch    +    1);    break;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  [Delete]    	non-compiled	[CE]  <identifier>  expected	33	None	replace
32	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  eatTheRest);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
34	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  token);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  token);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  i);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-n "  +  ch,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-n "  +  ch,  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
37	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch,  StopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add(token.substring(0,  i  +  1));  break;	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add(token.substring(i  +  1));	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  tors.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tors.add( "- "  +  token);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tors.add( "- "  +  token);	  tors.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  tors.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tors.add( "- "  +  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tors.add( "- "  +  i);	  tors.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  options.getOption(ch,  stopAtNonOption);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	options.getOption(ch,  stopAtNonOption);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(ch,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ";no ");  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ";no ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ";no ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ";ne   ");  break;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ";ne   ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ";ne   ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch  -  1  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch  -  1  +  1);	  Option    options    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
47	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch,  token,  stopAtNonOption);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch,  token,  stopAtNonOption);	  currentOption    =    options.getOption(ch,    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  currentOption  =  options.getOption(ch);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(currentOption!=    null)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  eattheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  eattheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  eattheRest);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  AssertionFailedToken(currentOption,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  AssertionFailedToken(currentOption,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	AssertionFailedToken(currentOption,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
51	[BUG]  [BUGGY]  AssertionFailedToken(currentOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  AssertionFailedToken(currentOption,  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	AssertionFailedToken(currentOption,  eatTheRest);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
52	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
53	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +   ";eatTheRest ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
54	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";eat  theRest ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +   ";eat  theRest ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +   ";eat  theRest ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
55	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ":n ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ":n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ":n ");	  tokens.add(   "-   "    +    ch    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
56	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  i  +  1);	  Option    options    =    options.getOption(ch    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "- "  +  ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "- "  +  ch);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  token);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  token);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(ch,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  else  {  tokens.add( "- "  +  ch);  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	33	None	replace
61	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest ");  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +   ";eatTheRest ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
62	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";non-option ");  break;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +   ";non-option ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +   ";non-option ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
63	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(!stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  currentOption  =  options.getOption(ch);  if(!eatTheRest)  {  tokens.add( "- "  +  ch);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(!stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  option  =  options.getOption(ch,  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  option  =  options.getOption(ch,  eatTheRest);	  Option    option    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch);  }	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
68	[BUG]  [BUGGY]  tokens.add( "-null "  +  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-null "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-null "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
69	[BUG]  [BUGGY]  tokens.add( "-non-option "  +  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-non-option "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-non-option "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
71	[BUG]  [BUGGY]  currentOption  =  options.getOption(token.substring(i  -  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(token.substring(i  -  1));  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(token.substring(i  -  1));	  currentOption    =    options.getOption(i    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "-- "  +  ch,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "-- "  +  ch,  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  currentOption    =    options.getOption(ch,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
74	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(token,  i);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(token,  i);	  currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
75	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  parent  ==  null  &&  parent!=  null;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	parent  ==  null  &&  parent!=  null;	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(currentOption!=    null)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
76	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  stoppingAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch,  stoppingAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch,  stoppingAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
77	[BUG]  [BUGGY]  tokens.add( "- "  +  -1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  -1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  -1);	  tokens.add(   "-   "    +    0);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
78	[BUG]  [BUGGY]  currentOption  =  options.getOption(token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(token.substring(i  +  1));  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(token.substring(i  +  1));	  currentOption    =    options.getOption(ch    -    1    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
79	[BUG]  [BUGGY]  currentOption  =  options.getOption(ch  -  1,  i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(ch  -  1,  i  +  1);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(ch  -  1,  i  +  1);	  currentOption    =    options.getOption(ch    -    1    +    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add(token.substring(i,  i  +  1));  break;	  tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  tokens.add( "- "  +  i  + ": ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  i  + ": ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  i  + ": ");	  tokens.add(   "-   "    +    ch    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	33	None	replace
83	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +  1);	  tokens.add(   "-   "    +    ch    +    1);    break;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
84	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +  1,  stopAtNonOption);  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  +  1,  stopAtNonOption);  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  +  1,  stopAtNonOption);  break;	  tokens.add(   "-   "    +    ch    +    1);    break;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
85	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + "; ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + "; ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + "; ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
86	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + "; ");  break;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + "; ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + "; ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
87	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  break;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  break;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  break;	  tokens.add(   "-   "    +    ch    +   ";n   ");    break;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
88	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  parent  ==  null  &&  currentOption!=  null;  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	parent  ==  null  &&  currentOption!=  null;	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    }    else    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption  &&  token.length()  >  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption  &&  token.length()  >  0);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	Option  options  =  options.getOption(ch,  stopAtNonOption  &&  token.length()  >  0);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
90	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  currentOption  =  options.getOption(token,  ch);  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	currentOption  =  options.getOption(token,  ch);	  currentOption    =    options.getOption(ch,    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  currentOption  =  options.getOption(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  break;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  break;  }  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	276	276	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  break;  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
