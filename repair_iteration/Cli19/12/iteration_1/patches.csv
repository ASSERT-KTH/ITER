bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  options.values().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  arguments.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  options);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  tokens);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  tokens);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)+  1;	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  currentOption  =  options.get(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.get(token);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "  +  token);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  options);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  akToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  akToken(token,  stopAtNonOption);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akToken(token,  stopAtNonOption);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- ").replace(token,  stopAtNonOption);	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add( "- "+token.substring(1));  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(1));	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add( "- "+token.substring(2));  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(2));	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  options.keySet().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
29	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasOption(token);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Option  option  =  options.getOption(token);  tokens.add(option);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token);  tokens.add(option);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  option);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  option);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  option);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  iter);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  iter);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
35	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  options.entrySet().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akTokens  =  processOptionToken(token,  stopAtNonOption);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  tokens.add('-');  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  tokens.add('-');  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add('-');	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  processOptionToken(token,  options);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2)  {    [BUGGY]  processOptionToken(token,  options);  [BUGGY]    }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  options);	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
