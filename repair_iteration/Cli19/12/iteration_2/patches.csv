bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.getOption(token)+  1;  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token)+  1;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.get(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.get(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.get(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
4	[BUG]  [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "  +  token,  stopAtNonOption);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
5	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
6	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
7	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
8	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent!=  null  &&  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
9	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  null);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  null);	  processOptionToken(token,    stopAtNonOption,    arguments,    tokens);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  false);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  false);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  ignore);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  ignore);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  ignore);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  true);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  true);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
14	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasValue(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasValue(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasValue(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
16	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  bucketToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	bucketToken(token,  stopAtNonOption,  options);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  tryFallThrough(token)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tryFallThrough(token)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tryFallThrough(token)  {  processOptionToken(token,  stopAtNonOption,  options);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  option,  options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  option,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  option,  options);	  processOptionToken(token,    stopAtNonOption,    arguments,    option);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
21	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  option);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  option);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  options,  option);	  processOptionToken(token,    stopAtNonOption,    arguments,    option);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
22	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Iterator  <  Option>  iter  =  tokens.iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  Option>  iter  =  tokens.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
24	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Ilerator  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- ").replace(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- ").replace(token,  eatTheRest);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- ").replace(token,  eatTheRest);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
26	[BUG]  [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- ").replace(token,  stopAtNonOption,  arguments);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- ").replace(token,  stopAtNonOption,  arguments);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
27	[BUG]  [BUGGY]  Option  token  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  token  =  options.getOption(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  token  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  options);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
29	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  tokens);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  tokens);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
30	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  eatTheRest);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
31	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
35	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  bucketToken(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	bucketToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
36	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	try  ==  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  bucket  =  processOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  bucket  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	bucket  =  processOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  processOptionToken(token,  options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  options,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  options,  stopAtNonOption);	  processOptionToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
39	[BUG]  [BUGGY]  processOptionToken(token,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  null);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  null);	  processOptionToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
40	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token,  eatTheRest);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token,  null);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(2);	  tokens.add(   "-   "+token.substring(1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(2));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add(token.substring(2));  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token.substring(2));	  tokens.add(   "-   "+token.substring(1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
44	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  options,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  options,  arguments);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
45	[BUG]  [BUGGY]  acceptToken(token,  StopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  StopAtNonOption,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  StopAtNonOption,  arguments);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
46	[BUG]  [BUGGY]  acceptToken(token,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  options);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
47	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  tokens);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  options,  tokens);	  processOptionToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  options,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)+  2;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
50	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)/  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)-  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)-  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  tokens.add(option);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  tokens.add(option);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption);  tokens.add(option);	  Option    option    =    options.getOption(token);    tokens.add(option);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
53	[BUG]  [BUGGY]  tokens.add(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add(token,  eatTheRest);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token,  eatTheRest);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token,  stopAtNonOption  +  1);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akTokens  =  processOptionToken(token,  stopAtNonOption,  options);	  akTokens    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
56	[BUG]  [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akTokens  =  processOptionToken(token,  stopAtNonOption,  arguments);	  akTokens    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
57	[BUG]  [BUGGY]  akToken(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  akToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akToken(token,  stopAtNonOption,  arguments);	  akToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
58	[BUG]  [BUGGY]  akToken(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  akToken(token,  stopAtNonOption  +  1);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	akToken(token,  stopAtNonOption  +  1);	  akToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
59	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  options);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  tokens.add('-',  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add('-',  2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add('-',  2);	  tokens.add('-');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
62	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.get(token,  stopAtNonOption);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
63	[BUG]  [BUGGY]  Option  currentOption  =  options.get(0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.get(0);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.get(0);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
64	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token)+  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.get(token)+  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.get(token)+  1;	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(2),  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(2),  stopAtNonOption);	  tokens.add(   "-   "+token.substring(2));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
66	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2)  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(2)  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(2)  +  1);	  tokens.add(   "-   "+token.substring(2));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
70	[BUG]  [BUGGY]  processOptionToken(token,  iter,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  iter,  arguments,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  iter,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
71	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  iter,  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  iter,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  iter,  options);	  processOptionToken(token,    stopAtNonOption,    arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
73	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  tokens.add('-'  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add('-'  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add('-'  +  1);	  tokens.add('-');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
75	[BUG]  [BUGGY]  tokens.add( "-- ").replace(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "-- ").replace(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "-- ").replace(token,  stopAtNonOption);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
76	[BUG]  [BUGGY]  tokens.add( "-$ ").replace(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "-$ ").replace(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "-$ ").replace(token,  stopAtNonOption);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
77	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasArg(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasArg(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasArg(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
78	[BUG]  [BUGGY]  dealToken(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  dealToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	dealToken(token,  stopAtNonOption,  options);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
79	[BUG]  [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "  +  token.toLowerCase());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
80	[BUG]  [BUGGY]  transform(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  transform(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	transform(token,  stopAtNonOption);	  processOptionToken(token,    options);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
81	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(3));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(3));  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(3));	  tokens.add(   "-   "+token.substring(1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
82	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
83	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator(0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator(0);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  options.values().iterator(0);	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
84	[BUG]  [BUGGY]  dealToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  dealToken(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	dealToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
85	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Ilerator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
86	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
87	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	aughtExceptionHandler.handleMissingName(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
88	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Ilerator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
90	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
91	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest,  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  eatTheRest,  options);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  [Delete]  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	[Delete]	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
94	[BUG]  [BUGGY]  ProcessOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  ProcessOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	ProcessOptionToken(token,  stopAtNonOption,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
95	[BUG]  [BUGGY]  processOptionToken(token,  options,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  options,  arguments,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  options,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    option);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
96	[BUG]  [BUGGY]  acceptToken(token,  stopsAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopsAtNonOption,  arguments);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopsAtNonOption,  arguments);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
97	[BUG]  [BUGGY]  tokens.add(token,  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add(token,  null);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token,  null);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
98	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)+  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add(token,  stopAtNonOption)+  1;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
99	[BUG]  [BUGGY]  tokens.add( "- ").append(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- ").append(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- ").append(token,  stopAtNonOption);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
100	[BUG]  [BUGGY]  tokens.add( "- ").delete(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- ").delete(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- ").delete(token,  stopAtNonOption);	  tokens.add(   "-   ").replace(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
101	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  option);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  option);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  option);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
102	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  null);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  null);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
103	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(0,  2));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(0,  2));  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(0,  2));	  tokens.add(   "-   "+token.substring(1));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
104	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2),  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add( "- "+token.substring(2),  2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add( "- "+token.substring(2),  2);	  tokens.add(   "-   "+token.substring(2));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
105	[BUG]  [BUGGY]  try  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  try  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	try  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  aughtExceptionHandler(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	aughtExceptionHandler(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
107	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  try  ==  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	try  ==  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
108	[BUG]  [BUGGY]  Option  currentOption  =  optionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  optionToken(token,  stopAtNonOption);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  optionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption,    options);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
109	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  ||  options.hasOption(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  currentOption  =  options.getOption(token)/  2  ||  options.hasOption(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
110	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
111	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	Iterator  <  String>  iter  =  options.list().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
112	[BUG]  [BUGGY]  tokens.add('-').trim();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  tokens.add('-').trim();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	tokens.add('-').trim();	  tokens.add('-');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
113	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  iter);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments,  iter);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
114	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  iter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  iter);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  options,  iter);	  processOptionToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options,  options);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  options,  options);	  processOptionToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2)  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  1);  [BUGGY]      }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	134	134	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  1);	  processOptionToken(token,    stopAtNonOption,    arguments,    tokens);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
