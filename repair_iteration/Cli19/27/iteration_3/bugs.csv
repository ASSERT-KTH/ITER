bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  String  token  =  iter.getValue()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =  iter.getValue()  +  1;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =  iter.getValue()  +  1;	  String    token    =    iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  String  token  =  iter.next()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =  iter.next()  -  1;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =  iter.next()  -  1;	  String    token    =    iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(arguments!=  null?  arguments.iterator()  :  null).iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(arguments!=  null?  arguments.iterator()  :  null).iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(arguments!=  null?  arguments.iterator()  :  null).iterator();	  Iterator    <    String>    iter    =(arguments.iterator()).iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
5	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(arguments!=  null?  null  :  arguments.iterator()).iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(arguments!=  null?  null  :  arguments.iterator()).iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(arguments!=  null?  null  :  arguments.iterator()).iterator();	  Iterator    <    String>    iter    =(arguments.iterator()).iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  while(iter.hasNext())  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  while(iter.hasNext())  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	while(iter.hasNext())  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  null  :  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  null  :  this.tokens.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  null  :  this.tokens.iterator();	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
13	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[1];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[1];  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[1];	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  arguments[0]  :  iter.next();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  arguments[0]  :  iter.next();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  arguments[0]  :  iter.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].toLowerCase();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].toLowerCase();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].toLowerCase();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
17	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
18	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
19	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  : "-- ";  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  : "-- ";  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  : "-- ";	  String    token    =(iter.hasNext())?    iter.next()    :   "-   ";    	non-compiled	[CE]  <identifier>  expected	15	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  arguments;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  arguments;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  :  arguments;	  String    token    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()!=  null)?  null  :  iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()!=  null)?  null  :  iter.next();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.next()!=  null)?  null  :  iter.next();	  Iterator    <    String>    tokens    =(iter.next()    ==    null)?    null    :    iter.next();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  null  :  iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  null  :  iter.next();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  null  :  iter.next();	  Iterator    <    String>    tokens    =(iter.next()    ==    null)?    null    :    iter.next();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
30	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  null  :  iter.next()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  null  :  iter.next()  +  1;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.next()  ==  null)?  null  :  iter.next()  +  1;	  Iterator    <    String>    tokens    =(iter.next()    ==    null)?    null    :    iter.next();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
31	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1));	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
32	[BUG]  [BUGGY]  tokens.add(token.substring(0,  iter.next()  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  iter.next()  +  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  iter.next()  +  1));	  tokens.add(token.substring(0,    iter.next()));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
33	[BUG]  [BUGGY]  tokens.add(token.substring(0,  iter.next()  -  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  iter.next()  -  1));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  iter.next()  -  1));	  tokens.add(token.substring(0,    iter.next()));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
34	[BUG]  [BUGGY]  tokens.add(token.substring(0,  iter.next()).trim());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  iter.next()).trim());  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  iter.next()).trim());	  tokens.add(token.substring(0,    iter.next()));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
35	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  this.iter.next()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  this.iter.next()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  this.iter.next()  :  null;	  Iterator    <    String>    tokens    =    this.iter.next();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?  iter.next()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.next())?  iter.next()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.next())?  iter.next()  :  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
39	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =  iter.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =  iter.iterator();	  Iterator    <    String>    tokens    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
40	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =  this.currentOption.iterator();	  Iterator    <    String>    tokens    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  options.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =  options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =  options.iterator();	  Iterator    <    String>    tokens    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :   " ";  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :   " ";  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  :   " ";	  String    token    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  String  token  =(iter.next())?  iter.next()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.next())?  iter.next()  :  null;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.next())?  iter.next()  :  null;	  String    token    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
44	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
45	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
46	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  currentOption.arguments.iterator();	  Iterator    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
47	[BUG]  [BUGGY]  String  token  =  iter.remove();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =  iter.remove();  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =  iter.remove();	  String    token    =    iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
48	[BUG]  [BUGGY]  String  token  =  itser.next();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =  itser.next();  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =  itser.next();	  String    token    =    iter.next()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
49	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Ilerator  iter  =  options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
50	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =  this.currentOption.keySet().iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =  this.currentOption.keySet().iterator();	  Iterator    <    String>    tokens    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[2];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[2];  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[2];	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options[0];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options[0];  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options[0];	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  options;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add( "-- ");  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add( "-- ");	  tokens.add(token);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
56	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1);	  tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
57	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  currentOption.values().iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  currentOption.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
58	[BUG]  [BUGGY]  tokens.add(token.substring(0,  iter.next())+  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  iter.next())+  1);  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  iter.next())+  1);	  tokens.add(token.substring(0,    iter.next()));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
59	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
60	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(arguments  ==  null?  null  :  arguments.iterator()).iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(arguments  ==  null?  null  :  arguments.iterator()).iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(arguments  ==  null?  null  :  arguments.iterator()).iterator();	  Iterator    <    String>    iter    =(arguments.iterator()).iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(this.iter.hasNext())?  this.iter.next()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(this.iter.hasNext())?  this.iter.next()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(this.iter.hasNext())?  this.iter.next()  :  null;	  Iterator    <    String>    tokens    =    this.iter.next();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
64	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(1,  token.indexOf('=')));	  tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
65	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  null  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  null  +  1;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  :  null  +  1;	  String    token    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =  this.currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
67	[BUG]  [BUGGY]  Iterator  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;	  Iterator    iter    =    this.arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  tokens;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  :  tokens;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  :  tokens;	  String    token    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length());  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  : "- ".trim();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.hasNext())?  iter.next()  : "- ".trim();  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.hasNext())?  iter.next()  : "- ".trim();	  String    token    =(iter.hasNext())?    iter.next()    :   "-   ";    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.next()  ==  null)?  iter.next()  :  null;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(arguments.iterator())+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(arguments.iterator())+  1;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(arguments.iterator())+  1;	  Iterator    <    String>    iter    =(arguments.iterator()).iterator();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.options.iterator();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =  this.currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
74	[BUG]  [BUGGY]  String  token  =(iter.next()  ==  null)?  iter.next()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  String  token  =(iter.next()  ==  null)?  iter.next()  :  null;  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	String  token  =(iter.next()  ==  null)?  iter.next()  :  null;	  String    token    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
75	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].trim();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].trim();  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[0].trim();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments[0];    	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  iter  =(this.arguments!=  null)?  this.arguments.iterator()  :  null;	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
77	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]        if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[i];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {        [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[i];  [BUGGY]      String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	109	109	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  arguments[i];	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    arguments;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
