bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption,  arguments);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  process(token,  stopAtNonOption,  arguments);	  eatTheRest    =    process(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
2	[BUG]  [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption,  options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  process(token,  stopAtNonOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  process(token,  stopAtNonOption,  options);	  eatTheRest    =    process(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
3	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( "- "  +  token);	  tokens.add(   "-   ");    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( ": ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( ": ");	  tokens.add(   "-   ");    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  iter.addValue(arguments[1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.addValue(arguments[1]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.addValue(arguments[1]);	  iter.addValue(arguments[0]);    	non-compiled	[CE]  	51	None	replace
6	[BUG]  [BUGGY]  iter.addValue(arguments[0],  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.addValue(arguments[0],  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.addValue(arguments[0],  stopAtNonOption);	  iter.addValue(arguments[0]);    	non-compiled	[CE]  	51	None	replace
7	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(arguments[0]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add(arguments[0]);	  iter.addValue(arguments[0]);    	non-compiled	[CE]  	51	None	replace
8	[BUG]  [BUGGY]  Iterator  iter  =  options.getIterables().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getIterables().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.getIterables().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
9	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptionIterator().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.getOptionIterator().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
10	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processOptionToken(token,  stopAtNonOption,  arguments,  options);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	34	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)&&  options.hasOption(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  	55	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  	55	None	replace
13	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasValue(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)||  options.hasValue(token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)||  options.hasValue(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  	55	None	replace
14	[BUG]  [BUGGY]  process(token,  stopAtNonOption,  arguments,  options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  process(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	process(token,  stopAtNonOption,  arguments,  options);	  process(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	30	None	replace
15	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  	42	None	replace
16	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOptions().values().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getOptions().values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getOptions().values().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  	42	None	replace
17	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	List  <  String>  iter  =  options.keySet().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	39	None	replace
18	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	39	None	replace
19	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.values().iterator();	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
20	[BUG]  [BUGGY]  Option  <  Option>  iter  =  currentOption.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  currentOption.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  currentOption.iterator();	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
21	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.keySet().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.keySet().iterator();	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
22	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
23	[BUG]  [BUGGY]  parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
24	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	17	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	17	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	17	None	replace
28	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  arguments.iterator();	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	45	None	replace
31	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.entrySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	40	None	replace
32	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(token,  stopAtNonOption  +  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add(token,  stopAtNonOption  +  1);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.get(token,  stopAtNonOption);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  	23	None	replace
34	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.get(token)+  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.get(token)+  1;	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  	23	None	replace
35	[BUG]  [BUGGY]  Option  currentOption  =  options.get(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.get(0);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.get(0);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  	23	None	replace
36	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOptionIterator().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getOptionIterator().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getOptionIterator().iterator();	  Option    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	56	None	replace
37	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOption(token).iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getOption(token).iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getOption(token).iterator();	  Option    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	56	None	replace
38	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getIterables().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getIterables().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getIterables().iterator();	  Option    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	56	None	replace
39	[BUG]  [BUGGY]  tokens.add(options.getValue(token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getValue(token));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add(options.getValue(token));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	33	None	replace
40	[BUG]  [BUGGY]  tokens.add(options.getOption(token,  stopAtNonOption));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getOption(token,  stopAtNonOption));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add(options.getOption(token,  stopAtNonOption));	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	33	None	replace
41	[BUG]  [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add(options.getOption(token),  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add(options.getOption(token),  stopAtNonOption);	  tokens.add(options.getOption(token));    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  	24	None	replace
43	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent  ==  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent!=  null  ||  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	44	None	replace
47	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOption(token).iterator();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOption(token).iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.getOption(token).iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	44	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)/  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	22	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  2;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)+  2;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	22	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }	  eatTheRest    =    processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
51	[BUG]  [BUGGY]  eatTheRest  =  processStringToken(token,  stopAtNonOption,  arguments);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processStringToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processStringToken(token,  stopAtNonOption,  arguments);	  eatTheRest    =    processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
52	[BUG]  [BUGGY]  eatTheRest  =  processStringToken(token,  stopAtNonOption,  options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processStringToken(token,  stopAtNonOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processStringToken(token,  stopAtNonOption,  options);	  eatTheRest    =    processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }	  processStringToken(token,    currentOption);    	non-compiled	[CE]  	29	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  tokens.add(token);  }	  processStringToken(token,    currentOption);    	non-compiled	[CE]  	29	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  currentOption);  }  else  {  options.put(token,  stopAtNonOption);  }	  processStringToken(token,    currentOption);    	non-compiled	[CE]  	29	None	replace
56	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	21	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	21	None	replace
58	[BUG]  [BUGGY]  iter.add(options.getValue(token));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(options.getValue(token));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.add(options.getValue(token));	  iter.add(options.getOption(token));    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  iter.add(options.getOption(token),  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(options.getOption(token),  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.add(options.getOption(token),  stopAtNonOption);	  iter.add(options.getOption(token));    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  iter.add(options.getOption(token,  stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.add(options.getOption(token,  stopAtNonOption));  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.add(options.getOption(token,  stopAtNonOption));	  iter.add(options.getOption(token));    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  eatTheRest  =  processRawToken(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processRawToken(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processRawToken(token,  stopAtNonOption);	  processRawToken(token,    stopAtNonOption);    	non-compiled	[CE]  	54	None	replace
62	[BUG]  [BUGGY]  processRawToken(token,  stopAtNonOption,  options);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processRawToken(token,  stopAtNonOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processRawToken(token,  stopAtNonOption,  options);	  processRawToken(token,    stopAtNonOption);    	non-compiled	[CE]  	54	None	replace
63	[BUG]  [BUGGY]  processRawToken(token,  stopAtNonOption,  arguments);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processRawToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processRawToken(token,  stopAtNonOption,  arguments);	  processRawToken(token,    stopAtNonOption);    	non-compiled	[CE]  	54	None	replace
64	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	acceptToken(token,  stopAtNonOption,  arguments,  options);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  	35	None	replace
65	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  burstToken(token,  stopAtNonOption,  arguments,  null);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	burstToken(token,  stopAtNonOption,  arguments,  null);	  burstToken(token,    stopAtNonOption,    arguments,    options);    	non-compiled	[CE]  	35	None	replace
66	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
68	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  options);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  1);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  options.size()  -  1);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.size()  +  1);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  options.size()  +  1);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.size());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.size());  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  arguments.size());	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.size()  -  2);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  options.size()  -  2);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  process(token,  currentOption,  options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  process(token,  currentOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	process(token,  currentOption,  options);	  process(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	32	None	replace
74	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  argument,  options);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  argument,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  argument,  options);	  accept(token,    stopAtNonOption,    argument);    	non-compiled	[CE]  	57	None	replace
75	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)-  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)-  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)-  1;	  Option    currentOption    =    options.getOption(token)-    1;    	non-compiled	[CE]  	38	None	replace
76	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)-  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)-  2;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)-  2;	  Option    currentOption    =    options.getOption(token)-    1;    	non-compiled	[CE]  	38	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	28	None	replace
78	[BUG]  [BUGGY]  processStringToken(token,  currentOption,  options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processStringToken(token,  currentOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processStringToken(token,  currentOption,  options);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	28	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  tokens.add(token);  }	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	28	None	replace
80	[BUG]  [BUGGY]  proceed(token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  proceed(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	proceed(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)||  options.hasOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption)||  options.hasOption(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption)||  options.hasOption(token);	  accept(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  	47	None	replace
82	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(arguments);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption)&&  options.hasOption(arguments);	  accept(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  	47	None	replace
83	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(options.get(token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(options.get(token));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption)&&  options.hasOption(options.get(token));	  accept(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  	47	None	replace
84	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterator().iterator();	  Iterator    <    Option>    iter    =    options.getOptionIterator().iterator();    	non-compiled	[CE]  	43	None	replace
85	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptionIterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getOptionIterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getOptionIterator();	  Iterator    <    Option>    iter    =    options.getOptionIterator().iterator();    	non-compiled	[CE]  	43	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  	36	None	replace
87	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  	49	None	replace
88	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	List  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  	49	None	replace
89	[BUG]  [BUGGY]  iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);	  iter.addValue(arguments[0],    arguments[1]);    	non-compiled	[CE]  	58	None	replace
90	[BUG]  [BUGGY]  processStringToken(token,  currentOption,  arguments);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processStringToken(token,  currentOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processStringToken(token,  currentOption,  arguments);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	27	None	replace
91	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption,  arguments,  options);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processStringToken(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processStringToken(token,  stopAtNonOption,  arguments,  options);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	27	None	replace
92	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  options);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  arguments,  options);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	5	None	replace
93	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  arguments,  eatTheRest);	  accept(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	5	None	replace
94	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "null ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( "- "  +  token,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  processOptionToken(token,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  processOptionToken(token,  currentOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	processOptionToken(token,  currentOption);	  processStringToken(token,    currentOption);    	non-compiled	[CE]  	29	None	replace
97	[BUG]  [BUGGY]  eatTheRest  =  processStringToken(token,  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processStringToken(token,  currentOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processStringToken(token,  currentOption);	  processStringToken(token,    currentOption);    	non-compiled	[CE]  	29	None	replace
98	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	34	None	replace
99	[BUG]  [BUGGY]  Option  currentOption  =  options.get(arguments);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.get(arguments);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.get(arguments);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  	23	None	replace
100	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().values().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterables().values().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  	37	None	replace
101	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getIterables().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.getIterables().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.getIterables().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  	37	None	replace
102	[BUG]  [BUGGY]  Option  <  Option>  iter  =  currentOption.options.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  currentOption.options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  currentOption.options.iterator();	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
103	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.process(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  stopAtNonOption.process(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  stopAtNonOption.process(token);	  eatTheRest    =    process(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
104	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  	19	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  ||  options.hasOption(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  ||  options.hasOption(token);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)/  ||  options.hasOption(token);	  Option    currentOption    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  	55	None	replace
107	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  	2	None	replace
108	[BUG]  [BUGGY]  options.addOption(token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  options.addOption(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	options.addOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  	2	None	replace
109	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token);  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
110	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	45	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processStringToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
112	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( "-- ");	  tokens.add(   "-   ");    	non-compiled	[CE]  	10	None	replace
113	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  eatTheRest);	  accept(token,    stopAtNonOption,    argument);    	non-compiled	[CE]  	57	None	replace
114	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	40	None	replace
115	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptions().values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.getOptions().values().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
116	[BUG]  [BUGGY]  Ilerator  iter  =  options.getOptions().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  iter  =  options.getOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  iter  =  options.getOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
117	[BUG]  [BUGGY]  iter.addValue(arguments[0],  arguments[2]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  iter.addValue(arguments[0],  arguments[2]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	iter.addValue(arguments[0],  arguments[2]);	  iter.addValue(arguments[0],    arguments[1]);    	non-compiled	[CE]  	58	None	replace
118	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent!=  null  &&  stopAtNonOption  ==  processOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
119	[BUG]  [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  options.addOptionToken(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	options.addOptionToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
120	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption  +  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption  +  1);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	21	None	replace
121	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  arguments.length);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  arguments.length);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  arguments.length);	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
122	[BUG]  [BUGGY]  process(token,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  process(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	process(token,  stopAtNonOption,  eatTheRest);	  process(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	30	None	replace
123	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  	42	None	replace
124	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption.processOptionToken(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  stopAtNonOption.processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  stopAtNonOption.processOptionToken(token,  stopAtNonOption);	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
125	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  	36	None	replace
126	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOptions().toArray(new  Option[options.size()  ]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getOptions().toArray(new  Option[options.size()  ]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getOptions().toArray(new  Option[options.size()  ]);	  Option    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	56	None	replace
127	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Ilerator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  	18	None	replace
128	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(token,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption)&&  options.hasOption(token,  stopAtNonOption);	  accept(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  	47	None	replace
129	[BUG]  [BUGGY]  Option  currentOption  =  options.get(arguments[0]);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.get(arguments[0]);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.get(arguments[0]);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  	23	None	replace
130	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption  -  1);  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption  -  1);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  	21	None	replace
131	[BUG]  [BUGGY]  Option  <  Option>  iter  =(options.hasOption(token))?  options.iterator()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =(options.hasOption(token))?  options.iterator()  :  null;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =(options.hasOption(token))?  options.iterator()  :  null;	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
132	[BUG]  [BUGGY]  Option  <  Option>  iter  =(options.hasOption(token))?  options.get(token):  options.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =(options.hasOption(token))?  options.get(token):  options.iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =(options.hasOption(token))?  options.get(token):  options.iterator();	  Option    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  	20	None	replace
133	[BUG]  [BUGGY]  process(token,  stopAtNonOption,  arguments,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  process(token,  stopAtNonOption,  arguments,  eatTheRest);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	process(token,  stopAtNonOption,  arguments,  eatTheRest);	  process(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	30	None	replace
134	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	34	None	replace
135	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption,  arguments);  }  else  {  tokens.add(token);  }	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  	34	None	replace
136	[BUG]  [BUGGY]  Iterator  iter  =  options.getAllOptions().iterator();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getAllOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.getAllOptions().iterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
137	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.getOptionIterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.getOptionIterator();	  Iterator    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	50	None	replace
138	[BUG]  [BUGGY]  eatTheRest(token,  stopAtNonOption,  options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest(token,  stopAtNonOption,  options);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest(token,  stopAtNonOption,  options);	  process(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	32	None	replace
139	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  	42	None	replace
140	[BUG]  [BUGGY]  Accept(token,  stopAtNonOption,  arguments);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Accept(token,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Accept(token,  stopAtNonOption,  arguments);	  accept(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	6	None	replace
141	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)&&  arguments.hasOption(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption)&&  arguments.hasOption(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption)&&  arguments.hasOption(token);	  accept(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  	47	None	replace
142	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getAllIterables().iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getAllIterables().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getAllIterables().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  	37	None	replace
143	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterators().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterators().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterators().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  	37	None	replace
144	[BUG]  [BUGGY]  accept(token,  stopAtNonOption,  options.get(token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  accept(token,  stopAtNonOption,  options.get(token));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	accept(token,  stopAtNonOption,  options.get(token));	  accept(token,    stopAtNonOption,    options.size());    	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  [Delete]  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	[Delete]	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
146	[BUG]  [BUGGY]  parent!=  (stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent!=  (stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent!=  (stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
147	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	parent  ==  null  &&  stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	3	None	replace
148	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  -  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)/  2  -  1;	  Option    currentOption    =    options.getOption(token)-    1;    	non-compiled	[CE]  	38	None	replace
149	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  eatTheRest    =    processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  	48	None	replace
150	[BUG]  [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.allOptions().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  	24	None	replace
151	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  String>  iter  =  options.allOptions().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  String>  iter  =  options.allOptions().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  	13	None	replace
152	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption,  options);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  	28	None	replace
153	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  process(token,  stopAtNonOption):  process(token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  eatTheRest  =  stopAtNonOption?  process(token,  stopAtNonOption):  process(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	eatTheRest  =  stopAtNonOption?  process(token,  stopAtNonOption):  process(token);	  eatTheRest    =    process(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
154	[BUG]  [BUGGY]  akTokens  =  process(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  akTokens  =  process(token,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	akTokens  =  process(token,  stopAtNonOption);	  eatTheRest    =    process(token,    stopAtNonOption);    	non-compiled	[CE]  	31	None	replace
155	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOption(arguments.iterator());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  <  Option>  iter  =  options.getOption(arguments.iterator());  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  <  Option>  iter  =  options.getOption(arguments.iterator());	  Option    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  	56	None	replace
156	[BUG]  [BUGGY]  tokens.add( "stop ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  tokens.add( "stop ");  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	tokens.add( "stop ");	  tokens.add(   "n   ");    	non-compiled	[CE]  	9	None	replace
157	[BUG]  [BUGGY]  ==  [Delete]  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  ==  [Delete]  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	==  [Delete]	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
158	[BUG]  [BUGGY]  >=  [Delete]  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  >=  [Delete]  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	>=  [Delete]	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
159	[BUG]  [BUGGY]  >>  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  >>  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	>>	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
160	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator(token).iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator(token).iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  <  Option>  iter  =  options.getIterator(token).iterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  	36	None	replace
161	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Option  currentOption  =  options.getOption(token)/  2  +  1;  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Option  currentOption  =  options.getOption(token)/  2  +  1;	  Option    currentOption    =    options.getOption(token)+    1;    	non-compiled	[CE]  	22	None	replace
162	[BUG]  [BUGGY]  Iterator  iter  =  options.list().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {      [BUGGY]  Iterator  iter  =  options.list().iterator();  [BUGGY]      burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	143	143	1	replace	Iterator  iter  =  options.list().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  	45	None	replace
