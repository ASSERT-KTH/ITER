bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]  if(stopAtNonOption)  {  [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption)  {	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
2	[BUG]  [BUGGY]  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.hasOption(token)||  stopAtNonOption)  {	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
3	[BUG]  [BUGGY]  if(!options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]  if(!options.hasOption(token))  {  [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!options.hasOption(token))  {	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	  	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
5	[BUG]  [BUGGY]    Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    Option  options  =  options.getOption(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    Option  options  =  options.getOption(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
6	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    if(stopAtNonOption)  {  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	27	None	add
7	[BUG]  [BUGGY]    if(stopAtNonOption)  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    if(stopAtNonOption)  {  options.put(token,  stopAtNonOption);  }  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    if(stopAtNonOption)  {  options.put(token,  stopAtNonOption);  }		non-compiled	[CE]  <identifier>  expected	27	None	add
8	[BUG]  [BUGGY]    options.put(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    options.put(token,  stopAtNonOption);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    options.put(token,  stopAtNonOption);		non-compiled	[CE]  <identifier>  expected	27	None	add
9	[BUG]  [BUGGY]    tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    tokens.add(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    tokens.add(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
10	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
11	[BUG]  [BUGGY]    Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    Option  option  =  options.getOption(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    Option  option  =  options.getOption(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
12	[BUG]  [BUGGY]    Options  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    Options  options  =  options.getOption(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    Options  options  =  options.getOption(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
13	[BUG]  [BUGGY]    Options  options  =  options.getOptions(token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    Options  options  =  options.getOptions(token);  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    Options  options  =  options.getOptions(token);		non-compiled	[CE]  <identifier>  expected	27	None	add
14	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.hasOption(token))  {	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
15	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!stopAtNonOption  &&  options.hasOption(token))  {	if  (options.hasOption(token))  {  	non-compiled	[CE]  <identifier>  expected	26	None	replace
16	[BUG]  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	27	None	add
17	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(token!=  null)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  [BUGGY]    if(stopAtNonOption)  {  if(token!=  null)  {  tokens.add(token);  }  [BUGGY]  if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	    if(stopAtNonOption)  {  if(token!=  null)  {  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	27	None	add
