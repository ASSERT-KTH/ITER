bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  tokens.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.containsKey(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.hasOption(token)&&  currentOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.getOption(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
7	[BUG]  [BUGGY]  options.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.add(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.add(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  AssertionFailedError.make(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  AssertionFailedError.make(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	AssertionFailedError.make(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token);  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  currentOption  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.hasOption(token)||  stopAtNonOption  &&  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
11	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
12	[BUG]  [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
13	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOptions(token,  stopAtNonOption);	  Options    options    =    options.getOptions(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
14	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Options  options  =  options.getOptions(token,  stopAtNonOption,  token);	  Options    options    =    options.getOptions(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
15	[BUG]  [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Options  options  =  options.getOptions(token,  stopAtNonOption,  eatTheRest);	  Options    options    =    options.getOptions(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
16	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.EXPR_RESULT,  stopAtNonOption);	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
17	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT).replace(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT).replace(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.EXPR_RESULT).replace(token,  stopAtNonOption);	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
18	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.getOptions(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  currentOption.getOptions(token);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
19	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  tokens;	  Option    options    =    stopAtNonOption?    options.getOption(token):    token;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
20	[BUG]  [BUGGY]  Option  options  =  option.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  option.getOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  option.getOption(token,  stopAtNonOption);	  Option    options    =    option.getOption(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EMPTY,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.EMPTY,  stopAtNonOption);	  tokens.add(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  ||  tokens.contains(token)  ==  false)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
23	[BUG]  [BUGGY]  if(options.getOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.getOption(token)&&  stopAtNonOption)  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
24	[BUG]  [BUGGY]  if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
25	[BUG]  [BUGGY]  if(!options.getOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!options.getOption(token)||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!options.getOption(token)||  stopAtNonOption)  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
26	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.getOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  currentOption.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
27	[BUG]  [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options  =  options.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
28	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  options.getOption(token)  ==  null)  {	  if(stopAtNonOption    ||    options.getOption(token)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.hasOption(token)&&  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)&&  stopAtNonOption;	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    option    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
33	[BUG]  [BUGGY]  token  =  options.getOption(token);  tokens.add(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  token  =  options.getOption(token);  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	token  =  options.getOption(token);  tokens.add(token);	  if(stopAtNonOption)    {    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.equals( "   "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.equals( "   "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  token.equals( "   "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "- "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.equals( "- "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( "_ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( "_ "))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.equals( "_ "))  {	  if(stopAtNonOption    ||    token.equals(   "   "))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.equals(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.equals(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  token.equals(token))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
38	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  token.equals(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  token.equals(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!stopAtNonOption  &&  token.equals(token))  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.containsKey(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.containsKey(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.containsKey(token)||  tokens.containsKey(token))  {	  if(stopAtNonOption    &&    options.containsKey(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
42	[BUG]  [BUGGY]  tokens.add(token)||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)||  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token)||  stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
43	[BUG]  [BUGGY]  tokens.add(token)&&  currentOption;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)&&  currentOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token)&&  currentOption;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
44	[BUG]  [BUGGY]  tokens.add(token)&&  eatTheRest;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)&&  eatTheRest;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token)&&  eatTheRest;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
45	[BUG]  [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.NAME,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.NAME,  stopAtNonOption);	  tokens.add(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
46	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token)&&  stopAtNonOption;	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
47	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  ||  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
48	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  currentOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  currentOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token)||  currentOption;	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
49	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.get(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  stopAtNonOption?  options.get(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
50	[BUG]  [BUGGY]  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options  =  stopAtNonOption?  options.getOption(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
51	[BUG]  [BUGGY]  options.put(token,  new  Option(stopAtNonOption));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  new  Option(stopAtNonOption));  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.put(token,  new  Option(stopAtNonOption));	  options.put(token,    null);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  tokens.contains(token))  {	  if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token))  {	  if(stopAtNonOption    ||    options.getOption(token))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
55	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!stopAtNonOption  &&  options.getOption(token))  {	  if(stopAtNonOption    ||    options.getOption(token))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  token.length()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  token.length()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.size()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  tokens.size()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption  ||  tokens.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  tokens.length()  ==  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  tokens.length()  ==  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
59	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  currentOption.contains(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  currentOption.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.put(token,  stopAtNonOption)&&  currentOption.contains(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.get(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.get(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.put(token,  stopAtNonOption)&&  tokens.get(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption.getOption(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  stopAtNonOption.getOption(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
64	[BUG]  [BUGGY]  Option  options  =  currentOption.process(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.process(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  currentOption.process(token);	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)/  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  eatTheRest;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  eatTheRest;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)+  eatTheRest;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)+  StopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)+  StopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  options.setOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.setOption(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.setOption(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  options.setOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.setOption(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.setOption(token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  currentOption  =  options.getOption(token,  null);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
71	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
72	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
73	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token,  stopAtNonOption  &&  currentOption!=  null);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
74	[BUG]  [BUGGY]  Options  options  =  stopAtNonOption?  options.getOption(token):  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Options  options  =  stopAtNonOption?  options.getOption(token):  null;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Options  options  =  stopAtNonOption?  options.getOption(token):  null;	  Option    options    =    stopAtNonOption?    options.getOption(token):    null;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
75	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  tokens.add(token);  }	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
76	[BUG]  [BUGGY]  AssertionFailedError.warning( "Unexpected  token: "  +  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  AssertionFailedError.warning( "Unexpected  token: "  +  token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	AssertionFailedError.warning( "Unexpected  token: "  +  token);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token,  stopAtNonOption)!=  null)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
78	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT).toLowerCase();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT).toLowerCase();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.EXPR_RESULT).toLowerCase();	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
79	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token)-  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  Option  options  =  currentOption.cloneTree();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  currentOption.cloneTree();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  currentOption.cloneTree();	  Option    options    =    currentOption.getOption(token);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||!options.hasOption(token)&&  stopAtNonOption)  {	  if(!options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.equals(token)&&  stopAtNonOption)  {	  if(stopAtNonOption    ||    token.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
84	[BUG]  [BUGGY]  if(options.getOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(options.getOption(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(options.getOption(token))  {	  if(options.getOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
85	[BUG]  [BUGGY]  options.setOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.setOption(stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.setOption(stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
87	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption  ||  tokens.contains(token))  {	  if(options.hasOption(token)||    stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
89	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    options    =    options.getOption(token)||    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.contains(token))  {	  if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  1)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.length()  ==  1)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
92	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()!=  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.length()!=  0)  {	  if(stopAtNonOption    ||    token.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
93	[BUG]  [BUGGY]  tokens.add(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token)/  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token)/  stopAtNonOption;	  tokens.add(token)&&    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
94	[BUG]  [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  stopAtNonOption?  options.getOption(token):  token,  stopAtNonOption;	  Option    options    =    stopAtNonOption?    options.getOption(token):    token;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
95	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
96	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  options  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);	  Option    options    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
97	[BUG]  [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
98	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  token.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  token.length()  >  0)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
99	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token)!=  null  &&  stopAtNonOption)  {	  if(stopAtNonOption    &&    options.getOption(token)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
100	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)  ==  null  &&  token.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  &&  options.getOption(token)  ==  null  &&  token.length()  >  0)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  &&  options.getOption(token)  ==  null  &&  token.length()  >  0)  {	  if(stopAtNonOption    &&    options.getOption(token)    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
101	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.length()  ==  0)  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.length()  ==  0)  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.equals( " "))  {  eatTheRest  =  false;  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption  ||  token.equals( " "))  {  eatTheRest  =  false;  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption  ||  token.equals( " "))  {  eatTheRest  =  false;  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
103	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(stopAtNonOption)  {  Options  options  =  options.getOption(token);  tokens.add(token);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
104	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
105	[BUG]  [BUGGY]  tokens.add(Token.EXPR_RESULT).trim();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  tokens.add(Token.EXPR_RESULT).trim();  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	tokens.add(Token.EXPR_RESULT).trim();	  tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
106	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  AssertionFailedToName(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	AssertionFailedToName(token,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
107	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]      {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	if(!stopAtNonOption)  {	  if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
108	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption)&&  tokens.contains(token);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption?  null  :  stopAtNonOption);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
110	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)&&!stopAtNonOption;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
111	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.add(token);  [BUGGY]      if  (options.hasOption(token))  {  {  currentOption  =  options.getOption(token);  tokens.add(token);  }  else  if  (stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3333333333333333	229	230	1	replace	options.put(token,  stopAtNonOption)&&  tokens.add(token);	  options.put(token,    stopAtNonOption)&&    tokens.contains(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
