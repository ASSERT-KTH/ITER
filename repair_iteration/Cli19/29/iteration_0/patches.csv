bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.add(token);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token);  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add(token);		non-compiled	[CE]  <identifier>  expected	60	None	add
2	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "- ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
3	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add(token.substring(0,  token.indexOf( "= ")));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
4	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
5	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add(token.substring(0,  token.length()  -  2));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
6	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	59	None	replace
7	[BUG]  [BUGGY]  else  if( "- ".equals(token)|| "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)|| "- ".equals(token))  {  [BUGGY]  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	else  if( "- ".equals(token)|| "- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	59	None	replace
8	[BUG]  [BUGGY]  else  if( "- ".equals(token)&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)&&  token.startsWith( "- "))  {  [BUGGY]  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	else  if( "- ".equals(token)&&  token.startsWith( "- "))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	59	None	replace
9	[BUG]  [BUGGY]  else  if( "-- ".equals(token))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "-- ".equals(token))  {  [BUGGY]  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	else  if( "-- ".equals(token))  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	59	None	replace
10	[BUG]  [BUGGY]  else  if( "- ".equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]  else  if( "- ".equals(token)&&  stopAtNonOption)  {  [BUGGY]  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	else  if( "- ".equals(token)&&  stopAtNonOption)  {	else  if  ( "- ".equals(token))  {  	non-compiled	[CE]  <identifier>  expected	59	None	replace
11	[BUG]  [BUGGY]    tokens.add( "- "  +  token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add( "- "  +  token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add( "- "  +  token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
12	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  <identifier>  expected	60	None	add
13	[BUG]  [BUGGY]    tokens.add( "- "  +  token.substring(0,  token.indexOf('>')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add( "- "  +  token.substring(0,  token.indexOf('>')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add( "- "  +  token.substring(0,  token.indexOf('>')));  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()));		non-compiled	[CE]  <identifier>  expected	60	None	add
14	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.entities().iterator();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    Iterator  <  String>  iter  =  options.entities().iterator();  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    Iterator  <  String>  iter  =  options.entities().iterator();		non-compiled	[CE]  <identifier>  expected	60	None	add
15	[BUG]  [BUGGY]    Iterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    Iterator  iter  =  options.iterator();  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    Iterator  iter  =  options.iterator();		non-compiled	[CE]  <identifier>  expected	60	None	add
16	[BUG]  [BUGGY]    tokens.add( "- ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }    [BUGGY]    tokens.add( "- ");  [BUGGY]  else  if  ( "- ".equals(token))    {  {  tokens.add(token);  }  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	126	127	1	replace	    tokens.add( "- ");		non-compiled	[CE]  <identifier>  expected	60	None	add
