bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.contains( "- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.contains( "- "))  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    tokens.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "-- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "-- "))  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    tokens.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  options.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  options.contains( "- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  options.contains( "- "))  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    tokens.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  iter);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  iter);	  Option    currentOption    =    options.getOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  eatTheRest);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  eatTheRest);	  Option    currentOption    =    options.getOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  tokens);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption,  tokens);	  Option    currentOption    =    options.getOption(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
7	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  tokens.add(currentOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "startAtNonOption ");  tokens.add(currentOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
10	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  1)  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  1)  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  2)  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  2)  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  tokens.add(arguments[0]);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	tokens.add(arguments[0]);	  if(stopAtNonOption)    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
13	[BUG]  [BUGGY]  options.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  options.add(arguments[0]);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	options.add(arguments[0]);	  if(stopAtNonOption)    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
14	[BUG]  [BUGGY]  Option  currentOption  =(options  ==  null)?  options.next()  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =(options  ==  null)?  options.next()  :  null;  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =(options  ==  null)?  options.next()  :  null;	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
15	[BUG]  [BUGGY]  Option  currentOption  =(options  ==  null)?  iter.next()  :  options;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =(options  ==  null)?  iter.next()  :  options;  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =(options  ==  null)?  iter.next()  :  options;	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
16	[BUG]  [BUGGY]  Option  currentOption  =(options!=  null)?  iter.next()  :  options;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =(options!=  null)?  iter.next()  :  options;  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =(options!=  null)?  iter.next()  :  options;	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  token,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(token,  arguments);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
19	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.options,  token);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(this.options,  token);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(this.options,  token);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
20	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(arguments,  token);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(arguments,  token);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(arguments,  token);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Options  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	if(stopAtNonOption)  {  Options  currentOption  =  options.getOption( "stopAtNonOption ");  tokens.add(currentOption);  }	  Options    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
22	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption( "stopAtNonOption ",  arguments);	  Option    currentOption    =    iter.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  token);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption( "stopAtNonOption ",  token);	  Option    currentOption    =    iter.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
24	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(this.options);	  Option    currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
25	[BUG]  [BUGGY]  whilst(!stopAtNonOption  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  whilst(!stopAtNonOption  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	whilst(!stopAtNonOption  &&  iter.hasNext())  {	  while(!stopAtNonOption    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
26	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  if(currentOption  ==  null)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ");  if(currentOption  ==  null)  {  tokens.add(currentOption);  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ");  if(currentOption  ==  null)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    if(currentOption!=    null)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(item);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(item);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(item);	  Option    currentOption    =    options.getOption(item);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(options);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(options);	  Option    currentOption    =    options.getOption(iter);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption();	  Option    currentOption    =    options.getOption(iter);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(iter,  arguments);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(iter,  arguments);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(iter,  arguments);	  Option    currentOption    =    options.getOption(iter);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
34	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
35	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().equals(arguments[0]))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().equals(arguments[0]))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().equals(arguments[0]))  {	  while(!stopAtNonOption    &&    iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
36	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().startsWith( "- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next().startsWith( "- "))  {	  while(!stopAtNonOption    &&    iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
37	[BUG]  [BUGGY]  Ilerator  iter  =  Arrays.asList(this.options).iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Ilerator  iter  =  Arrays.asList(this.options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Ilerator  iter  =  Arrays.asList(this.options).iterator();	  Ilerator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
38	[BUG]  [BUGGY]  Ilerator  iter  =  Arrays.asList(options).iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Ilerator  iter  =  Arrays.asList(options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Ilerator  iter  =  Arrays.asList(options).iterator();	  Ilerator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ",  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  tokens.add( "stopAtNonOption ",  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	tokens.add( "stopAtNonOption ",  arguments);	  tokens.add(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
40	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().toLowerCase())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().toLowerCase())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext()  &&  iter.next().toLowerCase())  {	  while(iter.hasNext()    &&    iter.next())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
43	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().equals(arguments))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().equals(arguments))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext()  &&  iter.next().equals(arguments))  {	  while(iter.hasNext()    &&    iter.next())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
44	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments[0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments[0]);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments[0]);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ",    arguments);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(arguments);	  Option    currentOption    =    iter.getOption(token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(this.options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(this.options);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(this.options);	  Option    currentOption    =    iter.getOption(token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  this.currentOptions.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  this.currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
48	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokens,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
50	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Options  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Options  currentOption  =  options.getOption(arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokens,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
51	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(tokens,  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(tokens,  arguments);	  Option    currentOption    =    options.getOption(tokens,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
52	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(stopAtNonOption  &&  iter.hasNext()  &&  arguments.length  >  0)  {	  while(stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
53	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  argument);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(token,  argument);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(token,  argument);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
54	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(this.options).iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(this.options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  Arrays.asList(this.options).iterator();	  Iterator    <    String>    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
55	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(options).iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  Arrays.asList(options).iterator();	  Iterator    <    String>    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".toString());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ".toString());	  Option    currentOption    =    options.getOption(   "stopAtNonOption.   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  tokens  =  iter.next();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  tokens  =  iter.next();	  Iterator    <    String>    tokens    =    iter.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
58	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  tokens  =  currentOption.iterator();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  tokens  =  currentOption.iterator();	  Iterator    <    String>    tokens    =    iter.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  tokens  =  arguments.iterator();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  tokens  =  arguments.iterator();	  Iterator    <    String>    tokens    =    iter.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  iter.getOption(tokens);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  iter.getOption(tokens);  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  iter.getOption(tokens);  }	  Option    currentOption    =    iter.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
61	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter  ==  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter  ==  null  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter  ==  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter!=    null    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
62	[BUG]  [BUGGY]  whilst(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  whilst(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	whilst(!stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter!=    null    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
63	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[i],  iter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[i],  iter);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[i],  iter);	  Option    currentOption    =    options.getOption(arguments[i]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
64	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[i]  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[i]  +  1);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[i]  +  1);	  Option    currentOption    =    options.getOption(arguments[i]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
65	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
66	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
67	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(token,  eatTheRest);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
68	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption,  arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(tokens,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(tokens,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
69	[BUG]  [BUGGY]  Iterator  iter  =  options.arguments.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  iter  =  options.arguments.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  iter  =  options.arguments.iterator();	  Iterator    iter    =    currentOption.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
70	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  argument.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  argument.length  >  0)  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  argument.length  >  0)  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext()  ||  iter.next())  {	  while(iter.hasNext()    &&    iter.next())    {    	non-compiled	[CE]  	31	None	replace
72	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(item,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(item,  stopAtNonOption);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(item,  stopAtNonOption);	  Option    currentOption    =    options.getOption(item);    	non-compiled	[CE]  	5	None	replace
73	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[item]);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[item]);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[item]);	  Option    currentOption    =    options.getOption(item);    	non-compiled	[CE]  	5	None	replace
74	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[i],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[i],  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[i],  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments[i]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
75	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  null);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  null);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
76	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Ilerator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Ilerator  <  String>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    <    String>    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "startAtNonOption ");	  if(stopAtNonOption)    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
78	[BUG]  [BUGGY]  while(stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(stopAtNonOption  &&  iter!=  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter!=    null    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
79	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  tokens!=  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  tokens!=  null  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  tokens!=  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter!=    null    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  this.options.iterator();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  this.options.iterator();  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  this.options.iterator();  }	  Iterator    iter    =    Arrays.asList(this.options).iterator();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
81	[BUG]  [BUGGY]  Option  currentOption  =(options  ==  null)?  options  :  iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =(options  ==  null)?  options  :  iter.next();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =(options  ==  null)?  options  :  iter.next();	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
82	[BUG]  [BUGGY]  whilst(iter.hasNext()  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  whilst(iter.hasNext()  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	whilst(iter.hasNext()  &&  iter.hasNext())  {	  while(iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(arguments,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(arguments,  stopAtNonOption);	  Option    currentOption    =    iter.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
84	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "/ "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "/ "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  tokens.contains( "/ "))  {	  while(!stopAtNonOption    &&    iter.hasNext()    &&    tokens.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  -  1);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0]  -  1);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
86	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( ".- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext()  &&  iter.next().startsWith( ".- "))  {	  while(iter.hasNext()    ||    iter.next().startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
87	[BUG]  [BUGGY]  tokens.add( "-stopAtNonOption ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  tokens.add( "-stopAtNonOption ");  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	tokens.add( "-stopAtNonOption ");	  tokens.add(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "eatTheRest ");  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "eatTheRest ");  if(currentOption!=  null)  {  tokens.add(currentOption);  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "eatTheRest ");  if(currentOption!=  null)  {  tokens.add(currentOption);  }	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    if(currentOption!=    null)    {    tokens.add(currentOption);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(iter,  stopAtNonOption);	  Option    currentOption    =    options.getOption(iter);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "eatTheRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption( "eatTheRest ");  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption( "eatTheRest ");	  Option    currentOption    =    iter.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
91	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ",  options);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption( "stopAtNonOption ",  options);	  Option    currentOption    =    iter.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
92	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(options,  stopAtNonOption);	  Option    currentOption    =    options.getOption(options);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
93	[BUG]  [BUGGY]  IllegalArgumentIterator  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  IllegalArgumentIterator  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	IllegalArgumentIterator  iter  =  Arrays.asList(arguments).iterator();	  Ilerator    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
94	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(token,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(token,  stopAtNonOption);	  Option    currentOption    =    iter.getOption(token);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
95	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next()!=  null)  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next()!=  null)  {	  while(!stopAtNonOption    &&    iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
96	[BUG]  [BUGGY]  while(currentOption  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(currentOption  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(currentOption  &&  iter.hasNext())  {	  while(stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
97	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.values();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  tokens  =  iter.values();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  tokens  =  iter.values();	  Iterator    <    String>    tokens    =    iter.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
98	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".cloneTree());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".cloneTree());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ".cloneTree());	  Option    currentOption    =    options.getOption(   "stopAtNonOption.   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
99	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".clone());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ".clone());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ".clone());	  Option    currentOption    =    options.getOption(   "stopAtNonOption.   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
100	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(token,  this.stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(token,  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
101	[BUG]  [BUGGY]  while(iter.hasNext();  iter.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext();  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext();  iter.hasNext())  {	  while(iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
102	[BUG]  [BUGGY]  while(tokens.isEmpty()  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(tokens.isEmpty()  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(tokens.isEmpty()  &&  iter.hasNext())  {	  while(stopAtNonOption    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
103	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Options  currentOption  =  options.getOption( "stopAtNonOption ");  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Options  currentOption  =  options.getOption( "stopAtNonOption ");	  Options    currentOption    =    options.getOption(   "stopAtNonOption   ");    tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
104	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter.hasNext()  &&  iter.next())  {	  while(!stopAtNonOption    &&    iter.hasNext()    ||    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
105	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next().equals( "- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next().equals( "- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(iter.hasNext()  ||  iter.next().equals( "- "))  {	  while    (iter.hasNext()    &&    iter.next().equals(   "-   "))    {    	non-compiled	[CE]  	12	None	replace
106	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ").iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption( "stopAtNonOption ").iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption( "stopAtNonOption ").iterator();	  Option    currentOption    =    iter.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
107	[BUG]  [BUGGY]  Option  currentOption  =(Option)iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =(Option)iter.next();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =(Option)iter.next();	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
108	[BUG]  [BUGGY]  Option  currentOption  =  iter.get();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.get();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.get();	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
109	[BUG]  [BUGGY]  Option  currentOption  =  iter.getValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getValue();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getValue();	  Option    currentOption    =    iter.next();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
110	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  tokens  =  iter.values().iterator();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  tokens  =  iter.values().iterator();	  Iterator    <    String>    tokens    =    iter.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
111	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(tokens,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(tokens,  stopAtNonOption);	  Option    currentOption    =    options.getOption(tokens,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
112	[BUG]  [BUGGY]  Option  currentOption  =  iter.getOption(this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  iter.getOption(this);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  iter.getOption(this);	  Option    currentOption    =    iter.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
113	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  iter  >=  null  &&  iter.hasNext())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(!stopAtNonOption  &&  iter  >=  null  &&  iter.hasNext())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	while(!stopAtNonOption  &&  iter  >=  null  &&  iter.hasNext())  {	  while(!stopAtNonOption    &&    iter!=    null    &&    iter.hasNext())    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
114	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]).iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments[0]).iterator();	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
115	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Option  currentOption  =  options.getOption(arguments,  tokens);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Option  currentOption  =  options.getOption(arguments,  tokens);	  Option    currentOption    =    options.getOption(arguments,    token);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
116	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arrays.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  this.arrays.iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	106	107	1	replace	Iterator  <  String>  iter  =  this.arrays.iterator();	  Iterator    <    String>    iter    =    arrays.iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
