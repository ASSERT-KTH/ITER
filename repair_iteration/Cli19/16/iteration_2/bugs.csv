bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iter.add(arguments[0]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter.add(arguments[0]);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.add(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterables().iterator();	      Iterator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getAllOptions().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.getAllOptions().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getAllOptions().iterator();	      Iterator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  options.contains(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(!stopAtNonOption  &&  arguments.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasValue(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasArg(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasArg(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(!stopAtNonOption  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token,  stopAtNonOption);	      Option    iter    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
17	[BUG]  [BUGGY]  Option  iter  =  options.get(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Option  iter  =  options.get(token);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.get(token);	      Option    iter    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Option  iter  =  options.getOption(token)+  1;  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token)+  1;	      Option    iter    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  arguments.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  currentOption.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0)  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  0)  {	  else    if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1)  {	  else    if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.values().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.values().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  arguments.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  arguments.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter  =  currentOption.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter  =  currentOption.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter  =  options.values().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter  =  options.values().iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
31	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  options.keySet().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  iter  =  options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter.clear();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.clear();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Option  iter  =  options.getOption(arguments);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments);	      Option    iter    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  options.hasOption(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  ||  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.getOptions().iterator();	      Iterator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().values().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getOptions().values().iterator();	      Iterator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  String>  iter  =  options.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
43	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.keySet().iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
45	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(stopAtNonOption  ||  tokens.contains(token))  {  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token))  {  tokens.add(token);  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]    {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  iter.addValue(arguments[0]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter.addValue(arguments[0]);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
51	[BUG]  [BUGGY]  iter.addValue(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter.addValue(arguments[0],  arguments[1]);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0],  arguments[1]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  iter.addValue(arguments[0].toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  iter.addValue(arguments[0].toString());  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0].toString());	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Option  iter  =  options.getOption(arguments[0]);  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments[0]);	      Option    iter    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }    [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]    else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	      Iterator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
