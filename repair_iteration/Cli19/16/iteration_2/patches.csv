bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter  =  arguments.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter  =  arguments.iterator();	  iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  tokens.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  tokens.contains(token))  {	  else    if(stopAtNonOption    ||    tokens.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
3	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterator().iterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.contains(token))  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  iter.add(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.add(arguments[1]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.add(arguments[1]);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.add(arguments[0],  stopAtNonOption);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  final  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  final  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	final  Ilerator  <  Option>  iter  =  options.iterator();	  Ilerator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
10	[BUG]  [BUGGY]  List  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  Option>  iter  =  options.iterator();	  Ilerator    <    Option>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
11	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getIterables().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  <  Option>  iter  =  options.getIterables().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  <  Option>  iter  =  options.getIterables().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getIterables().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.getIterables().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.getIterables().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  options.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption)  {  options.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
16	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
17	[BUG]  [BUGGY]  iter.addValue(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[1]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[1]);	  iter.addValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
18	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  ==  0)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  ==  0)  {	  else    if(stopAtNonOption    ||    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  <  2)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  <  2)  {	  else    if(stopAtNonOption    ||    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  1)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  1)  {	  else    if(stopAtNonOption    ||    arguments.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  ||  options.hasOption(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  0  ||  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
22	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  options.hasOption(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
23	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  ||  options.hasOption(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1  ||  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
24	[BUG]  [BUGGY]  Option  iter  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.get(token,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.get(token,  stopAtNonOption);	  Option    iter    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
25	[BUG]  [BUGGY]  Option  iter  =  options.get(currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.get(currentOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.get(currentOption);	  Option    iter    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
26	[BUG]  [BUGGY]  Option  iter  =  options.get(arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.get(arguments);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.get(arguments);	  Option    iter    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
27	[BUG]  [BUGGY]  iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0],  arguments[1],  stopAtNonOption);	  iter.addValue(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
28	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    iter    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    iter    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(arguments))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(arguments))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasArg(arguments))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.entrySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
32	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
33	[BUG]  [BUGGY]  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter  =  options.keySet().iterator();	  iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
34	[BUG]  [BUGGY]  iter.addValue(arguments[1].toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[1].toString());  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[1].toString());	  iter.addValue(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
35	[BUG]  [BUGGY]  iter.addValue(arguments[0].toString(),  arguments[1].toString());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0].toString(),  arguments[1].toString());  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0].toString(),  arguments[1].toString());	  iter.addValue(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
36	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption  ==  true)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
37	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
38	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
39	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  true)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  true)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  stopAtNonOption!=  true)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    false)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
40	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  false)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)&&  stopAtNonOption!=  false)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption!=    false)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
41	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasValue(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasValue(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasValue(token))  {	  else    if(stopAtNonOption    &&    options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token)||  stopAtNonOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasValue(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasValue(token)||  arguments.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasValue(token)||  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	final  Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
45	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
46	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains(token)||  arguments.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.contains(token)||  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	}  else  if(options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.containsKey(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.containsKey(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.containsKey(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  2)  {	  else    if(stopAtNonOption    &&    arguments.length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
50	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token)/  1;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token)/  1;	  Option    iter    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
51	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token)+  2;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token)+  2;	  Option    iter    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
52	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token)-  1;  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token)-  1;	  Option    iter    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
53	[BUG]  [BUGGY]  List  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  Option>  iter  =  currentOptions.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
54	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token)||  arguments.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.contains(token)||  arguments.contains(token))  {	  else    if(stopAtNonOption    &&    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
55	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
56	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(arguments))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(arguments))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasArg(arguments))  {	  else    if(stopAtNonOption    &&    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasArg(token)||  stopAtNonOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasArg(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getOptions().keySet().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
59	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOptions().values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  <  Option>  iter  =  options.getOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  <  Option>  iter  =  options.getOptions().values().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
60	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
61	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  arguments.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  arguments.contains(token))  {	  else    if(!stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
63	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments,  stopAtNonOption);	  Option    iter    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  Option  iter  =  options.getOption(currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(currentOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(currentOption);	  Option    iter    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(arguments[1]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments[1]);	  Option    iter    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
66	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments[0],  stopAtNonOption);	  Option    iter    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
67	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
69	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  arguments.length  >  0  ||  arguments[0].equals(arguments[1]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    arguments[0].equals(arguments[1]))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
70	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  ||  arguments[0].equals(arguments[1]))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  1  ||  arguments[0].equals(arguments[1]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  1  ||  arguments[0].equals(arguments[1]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    arguments[0].equals(arguments[1]))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
71	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[1].equals(arguments[2]))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[1].equals(arguments[2]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  ||  arguments[1].equals(arguments[2]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    arguments[0].equals(arguments[1]))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
72	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOption(token).iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOption(token).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.getOption(token).iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
73	[BUG]  [BUGGY]  List  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  Option>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
74	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
76	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
77	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
79	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
80	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
81	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(options.hasOption(token))    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[0].equals(arguments[1]))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[0].equals(arguments[1]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0  &&  arguments[0].equals(arguments[1]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    arguments[0].equals(arguments[1]))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
83	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  ==  0  ||  arguments[0].equals(arguments[1]))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  ==  0  ||  arguments[0].equals(arguments[1]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  arguments.length  ==  0  ||  arguments[0].equals(arguments[1]))  {	  else    if(stopAtNonOption    &&    arguments.length    >    0    ||    arguments[0].equals(arguments[1]))    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
84	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  currentOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
85	[BUG]  [BUGGY]  Option  iter  =  options.getOption(throwAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(throwAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(throwAtNonOption);	  Option    iter    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
87	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
88	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(arguments[0]))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasArg(arguments[0]))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasArg(arguments[0]))  {	  else    if(stopAtNonOption    ||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
89	[BUG]  [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  IllegalArgumentIterator  iter  =  options.iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	IllegalArgumentIterator  iter  =  options.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
90	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(token,  stopAtNonOption,  eatTheRest);	  Option    iter    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
91	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterableOptions().iterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.getOptions().values().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
94	[BUG]  [BUGGY]  iter.add( "n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.add( "n ");  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.add( "n ");	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
95	[BUG]  [BUGGY]  iter.addValue(arguments[0],  arguments[2]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0],  arguments[2]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0],  arguments[2]);	  iter.addValue(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
96	[BUG]  [BUGGY]  iter.addValue(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0],  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0],  stopAtNonOption);	  iter.addValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
97	[BUG]  [BUGGY]  iter.addValue(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0].toString(),  stopAtNonOption);	  iter.addValue(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
98	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables().values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterables().values().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
99	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
100	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
101	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {	  else    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
102	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments[0]  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(arguments[0]  -  1);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments[0]  -  1);	  Option    iter    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
103	[BUG]  [BUGGY]  final  Ilerator  <  Option>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  final  Ilerator  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	final  Ilerator  <  Option>  iter  =  options.getOptions().iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
104	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Ilerator  <  Option>  iter  =  options.getOptionIterator().iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
105	[BUG]  [BUGGY]  Option  iter  =  options.get(arguments[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.get(arguments[0]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.get(arguments[0]);	  Option    iter    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
106	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  <  Option>  iter  =  options.getOptions().iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
107	[BUG]  [BUGGY]  List  <  Option>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  List  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	List  <  Option>  iter  =  options.getOptions().iterator();	  Ilerator    <    Option>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
108	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(!stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption    ||    options.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
109	[BUG]  [BUGGY]  Option  iter  =  options.getOption(arguments[0]).iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Option  iter  =  options.getOption(arguments[0]).iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Option  iter  =  options.getOption(arguments[0]).iterator();	  Option    iter    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
110	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterator();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
111	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getAllOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getAllOptions();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getAllOptions();	  Iterator    <    Option>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
112	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.length  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.length  ==  0)  {  [BUGGY]      {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(stopAtNonOption  ||  options.hasOption(token)&&  arguments.length  ==  0)  {	  else    if(stopAtNonOption    ||    options.hasOption(token)&&    stopAtNonOption    ==    false)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
113	[BUG]  [BUGGY]  iter.addValue(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0].toLowerCase());  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0].toLowerCase());	  iter.addValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
114	[BUG]  [BUGGY]  iter.addValue(arguments[0].toString(),  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.addValue(arguments[0].toString(),  arguments);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.addValue(arguments[0].toString(),  arguments);	  iter.addValue(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
115	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getOptions().entrySet().iterator();	  Iterator    <    Option>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
116	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  {  tokens.add(token);	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
117	[BUG]  [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  iter  =  options.allOptions().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  iter  =  options.allOptions().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
118	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
119	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  if(options.hasOption(token))  {  tokens.add(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterators().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterators().iterator();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterators().iterator();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
121	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  Iterator  <  Option>  iter  =  options.getIterables();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	Iterator  <  Option>  iter  =  options.getIterables();	  Iterator    <    Option>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
122	[BUG]  [BUGGY]  iter.write(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.write(arguments[0]);  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.write(arguments[0]);	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
123	[BUG]  [BUGGY]  iter.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.close();  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.close();	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
124	[BUG]  [BUGGY]  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  else  {  tokens.add(token);  }  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	else  {  tokens.add(token);  }	  else    if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
125	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [Delete]  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [Delete]  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [Delete]	  else    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
126	[BUG]  [BUGGY]  iter.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  burstToken(token,  stopAtNonOption);  }  }      [BUGGY]  iter.add(arguments[0].toLowerCase());  [BUGGY]      else  if  (stopAtNonOption)    {  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.30151134457776363	146	147	1	replace	iter.add(arguments[0].toLowerCase());	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
