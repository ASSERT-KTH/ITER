bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "-n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "-n ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
2	[BUG]  [BUGGY]  tokens.add( "- "  +  getValue());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- "  +  getValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "- "  +  getValue());	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
3	[BUG]  [BUGGY]  tokens.add( "- "  +  arguments.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- "  +  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "- "  +  arguments.length);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
4	[BUG]  [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  return  iter.nextToken();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.nextToken();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.nextToken();	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
7	[BUG]  [BUGGY]  return  iter.next()  +  arguments.length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.next()  +  arguments.length;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.next()  +  arguments.length;	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
8	[BUG]  [BUGGY]  return  iter.next()  +  arguments.toString();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.next()  +  arguments.toString();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.next()  +  arguments.toString();	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
9	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(arguments);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(stopAtNonOption)  {  return  options.toArray(arguments);  }	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
13	[BUG]  [BUGGY]  return  options.toArray(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.toArray(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.toArray(arguments,  stopAtNonOption);	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return  options.toArray(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(stopAtNonOption)  {  return  options.toArray(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
15	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  return(String[])options.toArray(arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(arguments);	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[1]);	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
18	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  options.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	options.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
21	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
22	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(iter,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
24	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(token,  iter);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
25	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  iter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(tokens,  iter);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
26	[BUG]  [BUGGY]  tokens.add( ",n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",n ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( ",n ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(tokens);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
30	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  options.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  options.keySet().iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	options.keySet().iterator().next();	  return    options.keySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
33	[BUG]  [BUGGY]  tokens.add(options.keySet().iterator().next());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(options.keySet().iterator().next());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(options.keySet().iterator().next());	  return    options.keySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
34	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
35	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  options  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
36	[BUG]  [BUGGY]  tokens.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1].toString());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[1].toString());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
37	[BUG]  [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0].toString(),  stopAtNonOption);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
38	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0].toString()  + ", ");	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  0]);	  return(String[])tokens.toArray(new    String[tokens.size()    2]);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
40	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
42	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argument);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
43	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argument);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argument);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argument);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "null ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  tokens.add( "[ ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "[ ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "[ ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  arguments[1],  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
48	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  arguments[1].toLowerCase());	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
49	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  arguments[2]);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
50	[BUG]  [BUGGY]  return(String[])this.keys.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])this.keys.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])this.keys.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  return(String[])keys.toArray(new  String[keys.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])keys.toArray(new  String[keys.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])keys.toArray(new  String[keys.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(currentOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(currentOption);	  tokens.add(arguments);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  -  1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[args.size()  -  1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[args.size()  -  1]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
55	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
56	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  +  1]);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[args.size()  +  1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[args.size()  +  1]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(token,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  options);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  tokens.add(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[1]);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0].toLowerCase());	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  stopAtNonOption);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
64	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
65	[BUG]  [BUGGY]  return  iter.next()  &&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.next()  &&  tokens.contains(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.next()  &&  tokens.contains(token);	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
66	[BUG]  [BUGGY]  return  tokens.next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  tokens.next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  tokens.next();	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
67	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  0]);	  return(String[])tokens.toArray(new    String[tokens.size()    1]);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
70	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
72	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
73	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
74	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  return  options.toString(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.toString(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.toString(arguments);	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
76	[BUG]  [BUGGY]  return  options.toArray(new  String[]  {  }  );  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.toArray(new  String[]  {  }  );  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.toArray(new  String[]  {  }  );	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
77	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[options.size()  ]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[options.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(new  String[options.size()  ]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
78	[BUG]  [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])this.options.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
81	[BUG]  [BUGGY]  tokens.add( ",  eatTheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  eatTheRest ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( ",  eatTheRest ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
82	[BUG]  [BUGGY]  tokens.add( ",  eat  theRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  eat  theRest ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( ",  eat  theRest ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
83	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
84	[BUG]  [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Ilerator  iter  =  currentOption.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens.size());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(tokens.size());	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  token);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption,  token);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
88	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "-- ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
89	[BUG]  [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- ",  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "- ",  stopAtNonOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
90	[BUG]  [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- "  +  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "- "  +  stopAtNonOption);	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
91	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0].toString()  +  1);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
92	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  token);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(options,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
94	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(startAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(startAtNonOption,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  currentOption  =  options.getOption(startAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
95	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "stopAtNonOption ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  return  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.keySet().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.keySet().iterator();	  return    options.keySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
97	[BUG]  [BUGGY]  return  options.values().iterator().next();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.values().iterator().next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.values().iterator().next();	  return    options.keySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
98	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.values().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
99	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
100	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
101	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
102	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
103	[BUG]  [BUGGY]  tokens.add( ",  null ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  null ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( ",  null ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
104	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
106	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
107	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
108	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
109	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
110	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Option  <?>  currentOption  =  options.get(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
111	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0],  arguments[1]).toLowerCase();	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
112	[BUG]  [BUGGY]  tokens.add( "- "  +  getName());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- "  +  getName());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add( "- "  +  getName());	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
113	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
114	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
115	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
116	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
117	[BUG]  [BUGGY]  return  options.toArray(new  String[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.toArray(new  String[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.toArray(new  String[0]);	  return    options.toArray(arguments);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
118	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
119	[BUG]  [BUGGY]  tors.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tors.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tors.add(token);	  if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
120	[BUG]  [BUGGY]  tokens.add(arguments[0].getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].getName());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	tokens.add(arguments[0].getName());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
121	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	Iterator  iter  =  this.currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
122	[BUG]  [BUGGY]  return  options.keySet().iterator().remove();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  options.keySet().iterator().remove();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  options.keySet().iterator().remove();	  return    options.keySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
123	[BUG]  [BUGGY]  return  iter.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.clone();	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
124	[BUG]  [BUGGY]  return  iter.nextOrder();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return  iter.nextOrder();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return  iter.nextOrder();	  return    iter.next();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
125	[BUG]  [BUGGY]  return(String[])options.toArray(arguments,  new  String[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(arguments,  new  String[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2581988897471611	158	158	1	replace	return(String[])options.toArray(arguments,  new  String[0]);	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
