bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  while(currentOption.hasArg())    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  while(currentOption.hasArg())    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }	  else    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	23	None	replace
5	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }	  else    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	23	None	replace
6	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()  -  1));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()  -  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()  -  1));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1),  currentOption);  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1),  currentOption);  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i  +  1),  currentOption);  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
8	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption  ||  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
9	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(currentOption.getValue()));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(currentOption.getValue()));  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(currentOption.getValue()));  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	19	None	replace
11	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()  >=  (i  +  1)))  {  tokens.add(token.substring  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()  >=  (i  +  1)))  {  tokens.add(token.substring  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()  >=  (i  +  1)))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	24	None	replace
13	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  }	  parent!=    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  token.substring(i  +  1));  }	  parent!=    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  ||  currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	||  currentOption.hasArg())  {  break;  }	  if(stopAtNonOption    ||    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	28	None	replace
16	[BUG]  [BUGGY]  if(currentOption.hasArg())  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(currentOption.hasArg())  {  break;  }	  if(stopAtNonOption    ||    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	28	None	replace
17	[BUG]  [BUGGY]  else  if(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	41	None	replace
19	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	41	None	replace
20	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	20	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {  break;  }	  if(stopAtNonOption    ||    currentOption!=    null)    {    break;    }    	non-compiled	[CE]  	39	None	replace
22	[BUG]  [BUGGY]  While(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  break;  }	  While(currentOption.hasArg()    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasArg())  {  break;  }	  While(currentOption.hasArg()    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  ||  currentOption.hasArg())  {  continue;  }	  if(!stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	22	None	replace
25	[BUG]  [BUGGY]  tokens.add( ": "  +  i);  currentOption  =  options.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( ": "  +  i);  currentOption  =  options.getOption(i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( ": "  +  i);  currentOption  =  options.getOption(i);	  tokens.add(   ":   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	25	None	replace
26	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	40	None	replace
27	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	40	None	replace
28	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()));  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.length()));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(currentOption.substring(i));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(currentOption.substring(i));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(currentOption.substring(i));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
30	[BUG]  [BUGGY]  tokens.add( "-n "  +  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "-n "  +  i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "-n "  +  i);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	31	None	replace
31	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  break;  }	  While(currentOption.hasArg()    &&    stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1));	  While(currentOption.hasArg()    &&    stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	options.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add(token.substring(i  +  1));	  while(currentOption.hasArg()    &&    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasNext())  {  tokens.add(token.substring(i  +  1));	  while(currentOption.hasArg()    &&    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));	  while(currentOption.hasArg()    &&    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption  ==  null)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption  ==  null)  {  break;  }	  if(stopAtNonOption    ||    currentOption    ==    null)    {    break;    }    	non-compiled	[CE]  	38	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
42	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  Option  currentOption  =  options.getOption(i);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	Option  currentOption  =  options.getOption(i);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	37	None	replace
44	[BUG]  [BUGGY]  else  if(currentOption.hasArg())  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(currentOption.hasArg())  {  break;  }	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  else  if(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  else  if(currentOption.hasArg())  {  process(token.substring(i));  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(currentOption.hasArg())  {  process(token.substring(i));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(currentOption.hasArg())  {  process(token.substring(i));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
47	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }	  While(currentOption.hasArg()    &&    stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  AssertionFailedToken(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  AssertionFailedToken(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	AssertionFailedToken(currentOption.hasArg()  &&  stopAtNonOption)  {  break;  }	  While(currentOption.hasArg()    &&    stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  AssertionFailedToken(currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  AssertionFailedToken(currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	AssertionFailedToken(currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasArg())  {  if(stopAtNonOption)  {  break;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  While(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArg()  &&  currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  break;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  tokens.add( "n "  +  i);  currentOption  =  options.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "n "  +  i);  currentOption  =  options.getOption(i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "n "  +  i);  currentOption  =  options.getOption(i);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	19	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	24	None	replace
55	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i));  continue;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i));  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i));  continue;  }	  else    if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	23	None	replace
56	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- ");  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- ");	  tokens.add(   "-   "    +    0);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(!eatTheRest  ||  stopAtNonOption))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(!eatTheRest  ||  stopAtNonOption))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent!=  null  &&  currentOption.hasArg()  &&(!eatTheRest  ||  stopAtNonOption))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( "	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
58	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
59	[BUG]  [BUGGY]  else  if(currentOption.hasArg())  {  process(token.substring(i  +  1));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(currentOption.hasArg())  {  process(token.substring(i  +  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(currentOption.hasArg())  {  process(token.substring(i  +  1));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
60	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(currentOption.substring(i  +  1));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(currentOption.substring(i  +  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(currentOption.substring(i  +  1));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
61	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " "  +  i);  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(!stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(!stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }	  if(!stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	22	None	replace
64	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  tokens.add( "- ",  ch);  currentOption  =  options.getOption(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- ",  ch);  currentOption  =  options.getOption(i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- ",  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	20	None	replace
67	[BUG]  [BUGGY]  tokens.add( ": "  +  i);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( ": "  +  i);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( ": "  +  i);	  tokens.add(   ":   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	36	None	replace
68	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg())  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(!stopAtNonOption  &&  currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(!stopAtNonOption  &&  currentOption.hasArg())  {  break;  }	  else    if(stopAtNonOption    ||    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	37	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	37	None	replace
71	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	31	None	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption.hasArg())  {  continue;  }	  if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  continue;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  ||  currentOption!=  null)  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  ||  currentOption!=  null)  {  continue;  }	  if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  continue;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  ||  currentOption  ==  null)  {  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  ||  currentOption  ==  null)  {  continue;  }	  if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	6	None	replace
75	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	Option  currentOption  =  options.getOption(ch  -  1);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
76	[BUG]  [BUGGY]  tokens.add( "-- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "-- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "-- "  +  i);  currentOption  =  options.getOption(ch);	  tokens.add(   "n   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	26	None	replace
77	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg())  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg())  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  while(currentOption.hasArg())    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	5	None	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }	  if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	29	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  '-')  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  '-')  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption.hasArg()  &&  token.charAt(i  +  1)!=  '-')  {  break;  }	  if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	29	None	replace
80	[BUG]  [BUGGY]  while(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArgs()  &&  currentOption.hasArgs())  {  tokens.add(token.substring(i  +  1));	  while(currentOption.hasArg()    &&    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
81	[BUG]  [BUGGY]  While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	8	None	replace
82	[BUG]  [BUGGY]  While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }	  While(currentOption.hasArg())    {    if(stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	8	None	replace
83	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption  &&  currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	  else    if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(ch);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  option  =  options.getOption(ch);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  option  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	30	None	replace
86	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  while(currentOption.hasArg())    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	5	None	replace
87	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
88	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(token);	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
89	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.getArg()));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.getArg()));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i,  currentOption.getArg()));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i));    break;    }    	non-compiled	[CE]  	32	None	replace
90	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	14	None	replace
91	[BUG]  [BUGGY]  tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- ",  i);  currentOption  =  options.getOption(ch);	  tokens.add(   "-   ",    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	34	None	replace
92	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	40	None	replace
93	[BUG]  [BUGGY]  While(currentOption.hasArg()  ||  currentOption.hasArg())  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArg()  ||  currentOption.hasArg())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArg()  ||  currentOption.hasArg())  {  break;  }	  While(currentOption.hasArg()    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	9	None	replace
94	[BUG]  [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasNext())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg()  &&  currentOption.hasNext())  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg()  &&  currentOption.hasNext())  {  break;  }	  While(currentOption.hasArg()    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  tokens.add( ": "  +  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( ": "  +  ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( ": "  +  ch);	  tokens.add(   ":   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	25	None	replace
96	[BUG]  [BUGGY]  tokens.add( ": "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( ": "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( ": "  +  ch);  currentOption  =  options.getOption(ch);	  tokens.add(   ":   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	25	None	replace
97	[BUG]  [BUGGY]  tokens.add( "- ",  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add( "- ",  currentOption);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add( "- ",  currentOption);	  tokens.add(   "-   "    +    currentOption);    	non-compiled	[CE]  	3	None	replace
98	[BUG]  [BUGGY]  tokens.add('-'  +  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add('-'  +  ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add('-'  +  ch);	  tokens.add(   "-   "    +    currentOption);    	non-compiled	[CE]  	3	None	replace
99	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
100	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	  else    if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
101	[BUG]  [BUGGY]  while(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  while(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	while(currentOption.hasArg())  {  tokens.add(token.substring(i  +  1));	  while(currentOption.hasArg()    &&    currentOption.hasArg())    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	4	None	replace
102	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	41	None	replace
103	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]      break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	13	None	replace
104	[BUG]  [BUGGY]  While(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  While(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	While(currentOption.hasArg()  ||  stopAtNonOption)  {  break;  }	  While(currentOption.hasArg()    &&    stopAtNonOption)    {    break;    }    	non-compiled	[CE]  	7	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token.substring(i));  continue;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption)  {  process(token.substring(i));  continue;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption)  {  process(token.substring(i));  continue;  }	  if(stopAtNonOption)    {    continue;    }    	non-compiled	[CE]  	6	None	replace
106	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  if(stopAtNonOption  &&  currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	if(stopAtNonOption  &&  currentOption.hasArg()  ||(token.length()!=  (i  +  1)))  {  break;  }	  if(stopAtNonOption    &&    currentOption.hasArg())    {    break;    }    	non-compiled	[CE]  	29	None	replace
107	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.getArg()));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.getArg()));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.getArg()));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
108	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.length()));  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));      [BUGGY]  else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.length()));  break;  }  [BUGGY]      }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  {  tokens.add(token);  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	282	282	1	replace	else  if(stopAtNonOption)  {  process(token.substring(i  +  1,  currentOption.length()));  break;  }	  else    if(stopAtNonOption)    {    process(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	33	None	replace
